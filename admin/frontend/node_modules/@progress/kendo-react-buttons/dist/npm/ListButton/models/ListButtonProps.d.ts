/// <reference types="react" />
import { ButtonsPopupSettings } from './PopupSettings';
import { SplitButtonClickEvent, SplitButtonItemClickEvent, SplitButtonFocusEvent, SplitButtonBlurEvent, SplitButtonOpenEvent, SplitButtonCloseEvent, DropDownButtonItemClickEvent, DropDownButtonFocusEvent, DropDownButtonBlurEvent, DropDownButtonOpenEvent, DropDownButtonCloseEvent } from './events';
import { ButtonItemProps } from '../ButtonItem';
import { KendoReactComponentBaseProps } from '@progress/kendo-react-common';
export interface DropDownButtonProps extends KendoReactComponentBaseProps {
    /**
     * Specifies the `accessKey` of the main button.
     */
    accessKey?: string;
    /**
     * The accessible label of the component.
     */
    ariaLabel?: string;
    /**
     * The title of the component.
     */
    title?: string;
    /**
     * Specifies the text of the main button ([see example]({% slug overview_dropdownbutton %}#toc-basic-usage)).
     */
    text?: React.ReactNode;
    /**
     * Specifies the list items ([see example]({% slug binding_dropdownbutton %}#toc-array-of-objects)).
     */
    items?: any[];
    /**
     * Configures the field that will be used for the text of the `items`. `textField` has to be used together with the `items` prop ([see example]({% slug binding_dropdownbutton %}#toc-array-of-objects)).
     */
    textField?: string;
    /**
     * Specifies the `tabIndex` of the main button.
     */
    tabIndex?: number;
    /**
     * Determines whether the component is disabled ([see example]({% slug disabled_dropdownbutton %})).
     */
    disabled?: boolean;
    /**
     * Opens the popup of the DropDownButton if set to `true`.
     */
    opened?: boolean;
    /**
     * Defines an icon that will be rendered next to the main button text ([see example]({% slug icons_dropdownbutton %})).
     */
    icon?: string;
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the main button text ([see example]({% slug icons_dropdownbutton %})).
     */
    iconClass?: string;
    /**
     * Defines the location of an image that will be displayed next to the main button text ([see example]({% slug icons_dropdownbutton %})).
     */
    imageUrl?: string;
    /**
     * Configures the popup
     * ([see example]({% slug customization_dropdownbutton %}#toc-popup)).
     */
    popupSettings?: ButtonsPopupSettings;
    /**
     * A React functional or class component which is used for rendering items ([see example]({% slug customization_dropdownbutton %}#toc-item-render)). The default rendering includes an icon, an image, and text.
     */
    item?: null | React.ComponentType<{
        item: any;
        itemIndex: number;
    }>;
    /**
     * Fires when a dropdown list button item is about to be rendered. Use it to override the default appearance of the list items.
     * if `item` prop is not declared, `itemRender` behaves like `item`, for backward compatibility with versions before 4.2.0
     */
    itemRender?: ((li: React.ReactElement<HTMLLIElement>, props: ButtonItemProps) => React.ReactNode) | React.ComponentType<{
        item: any;
        itemIndex: number;
    }>;
    /**
     * Sets the `className` of the DropDownButton component.
     */
    className?: string;
    /**
     * Sets the `className` of the main button.
     */
    buttonClass?: string;
    /**
     * Sets the direction of the component.
     */
    dir?: string;
    /**
     * Fires when the component is focused ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onFocus?: (event: DropDownButtonFocusEvent) => void;
    /**
     * Fires when the component is blurred ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onBlur?: (event: DropDownButtonBlurEvent) => void;
    /**
     * Fires when an item is clicked ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onItemClick?: (event: DropDownButtonItemClickEvent) => void;
    /**
     * Fires when the popup which contains the items is opened ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onOpen?: (event: DropDownButtonOpenEvent) => void;
    /**
     * Fires when the popup which contains the items is closed ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onClose?: (event: DropDownButtonCloseEvent) => void;
    /**
     * Configures the `size` of the DropDownButton.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `shape` of the DropDownButton.
     *
     * The available options are:
     * - rectangle
     * - square
     * - null&mdash;Does not set a shape `className`.
     *
     * @default `null`
     *
     * @deprecated The `shape` property will be deprecated with version `^6` of the `@progress/kendo-react-buttons` package.
     */
    shape?: null | 'rectangle' | 'square';
    /**
     * Configures the `roundness` of the DropDownButton.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the DropDownButton.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - link
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline' | 'flat' | 'link';
    /**
     * Configures the `themeColor` of the DropDownButton.
     *
     * The available options are:
     * - base
     * - primary
     * - secondary
     * - tertiary
     * - info
     * - success
     * - warning
     * - dark
     * - light
     * - inverse
     * - null&mdash;Does not set a themeColor `className`.
     *
     * @default `base`
     */
    themeColor?: null | 'base' | 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'dark' | 'light' | 'inverse';
}
export interface SplitButtonProps extends KendoReactComponentBaseProps {
    /**
     * Specifies the `accessKey` of the main button.
     */
    accessKey?: string;
    /**
     * The accessible label of the component.
     */
    ariaLabel?: string;
    /**
     * The title of the component.
     */
    title?: string;
    /**
     * Specifies the text of the main button ([see example]({% slug overview_splitbutton %}#toc-basic-usage)).
     */
    text?: string;
    /**
     * Specifies the list items ([see example]({% slug binding_splitbutton %}#toc-array-of-objects)).
     */
    items?: any[];
    /**
     * Configures the field that will be used for the text of the `items`. `textField` has to be used together with the `items` prop ([see example]({% slug binding_splitbutton %}#toc-array-of-objects)).
     */
    textField?: string;
    /**
     * Specifies the `tabIndex` of the main button.
     */
    tabIndex?: number;
    /**
     * Determines whether the component is disabled ([see example]({% slug disabled_splitbutton %})).
     */
    disabled?: boolean;
    /**
     * Defines an icon that will be rendered next to the main button text ([see example]({% slug icons_splitbutton %})).
     */
    icon?: string;
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the main button text ([see example]({% slug icons_splitbutton %})).
     */
    iconClass?: string;
    /**
     * Defines the location of an image that will be displayed next to the main button text ([see example]({% slug icons_splitbutton %})).
     */
    imageUrl?: string;
    /**
     * Configures the popup ([see example]({% slug customization_splitbutton %}#toc-popup)).
     */
    popupSettings?: ButtonsPopupSettings;
    /**
     * Opens the popup of the SplitButton if set to `true`.
     */
    opened?: boolean;
    /**
     * A React functional or class component which is used for rendering items ([see example]({% slug customization_dropdownbutton %}#toc-item-render)). The default rendering includes an icon, an image, and text.
     */
    item?: null | React.ComponentType<{
        item: any;
        itemIndex: number;
    }>;
    /**
     * Fires when a dropdown list button item is about to be rendered. Use it to override the default appearance of the list items.
     * if `item` prop is not declared, `itemRender` behaves like `item`, for backward compatibility with versions before 4.2.0
     */
    itemRender?: ((li: React.ReactElement<HTMLLIElement>, props: ButtonItemProps) => React.ReactNode) | React.ComponentType<{
        item: any;
        itemIndex: number;
    }>;
    /**
     * Sets the `className` of the SplitButton component.
     */
    className?: string;
    /**
     * Sets the `className` of the main button.
     */
    buttonClass?: string;
    /**
     * Sets the direction of the component.
     */
    dir?: string;
    /**
     * Fires when the main button is clicked ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onButtonClick?: (event: SplitButtonClickEvent) => void;
    /**
     * Fires when the component is focused ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onFocus?: (event: SplitButtonFocusEvent) => void;
    /**
     * Fires when the component is blurred ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onBlur?: (event: SplitButtonBlurEvent) => void;
    /**
     * Fires when an item is clicked ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onItemClick?: (event: SplitButtonItemClickEvent) => void;
    /**
     * Fires when the popup which contains the items is opened ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onOpen?: (event: SplitButtonOpenEvent) => void;
    /**
     * Fires when the popup which contains the items is closed ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onClose?: (event: SplitButtonCloseEvent) => void;
    /**
     * Configures the `size` of the SplitButton.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the SplitButton.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the SplitButton.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - link
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline' | 'flat' | 'link';
    /**
     * Configures the `themeColor` of the SplitButton.
     *
     * The available options are:
     * - base
     * - primary
     * - secondary
     * - tertiary
     * - info
     * - success
     * - warning
     * - dark
     * - light
     * - inverse
     * - null&mdash;Does not set a themeColor `className`.
     *
     * @default `base`
     */
    themeColor?: null | 'base' | 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'dark' | 'light' | 'inverse';
}
