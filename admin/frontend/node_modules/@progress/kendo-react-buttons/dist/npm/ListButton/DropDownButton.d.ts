import * as React from 'react';
import * as PropTypes from 'prop-types';
import { DropDownButtonProps } from './models/ListButtonProps';
/**
 * @hidden
 */
export interface DropDownButtonState {
    focusedIndex?: number;
    focused?: boolean;
    opened: boolean;
}
/**
 * Represents the [KendoReact DropDownButton component]({% slug overview_dropdownbutton %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    render() {
 *        return (
 *            <DropDownButton text="Act">
 *                <DropDownButtonItem text="Item1" />
 *                <DropDownButtonItem text="Item2" />
 *                <DropDownButtonItem text="Item3" />
 *            </DropDownButton>
 *        );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare class DropDownButton extends React.Component<DropDownButtonProps, DropDownButtonState> {
    /**
     * @hidden
     */
    static propTypes: {
        accessKey: PropTypes.Requireable<string>;
        ariaLabel: PropTypes.Requireable<string>;
        title: PropTypes.Requireable<string>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onItemClick: PropTypes.Requireable<(...args: any[]) => any>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        items: PropTypes.Requireable<any[]>;
        textField: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        disabled: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<string>;
        iconClass: PropTypes.Requireable<string>;
        imageUrl: PropTypes.Requireable<string>;
        popupSettings: PropTypes.Requireable<object>;
        itemRender: PropTypes.Requireable<(...args: any[]) => any>;
        item: PropTypes.Requireable<(...args: any[]) => any>;
        className: PropTypes.Requireable<string>;
        buttonClass: PropTypes.Requireable<string>;
        dir: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        size: string;
        rounded: string;
        shape: null;
        fillMode: string;
        themeColor: string;
    };
    /**
     * @hidden
     */
    readonly state: {
        opened: boolean;
        focused: boolean;
        focusedIndex: number;
    };
    private wrapper;
    private mainButton;
    private list;
    private skipFocus;
    private guid;
    private buttonsData;
    constructor(props: DropDownButtonProps);
    private get opened();
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * The DOM element of main button.
     */
    get element(): HTMLButtonElement | null;
    private onKeyDown;
    private switchFocus;
    private handleFocus;
    private handleBlur;
    private onItemClick;
    private onItemDown;
    private mouseDown;
    private dispatchClickEvent;
    private renderPopup;
    private onPopupClose;
    private listRef;
    private renderChildItems;
    private onClickMainButton;
    private dispatchPopupEvent;
    private isItemDisabled;
    private isRtl;
}
