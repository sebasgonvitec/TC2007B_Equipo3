"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingActionButton = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var FloatingActionButtonItem_1 = require("./FloatingActionButtonItem");
var package_metadata_1 = require("../package-metadata");
var utils_1 = require("./utils");
var kendo_react_popup_1 = require("@progress/kendo-react-popup");
/** @hidden */
var ZINDEX_FAB_STEP = 2;
/** @hidden */
var DEFAULT_FAB_ZINDEX = 100;
/**
 * Represents the [KendoReact FloatingActionButton component]({% slug overview_floatingactionbutton %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *     <FloatingActionButton icon="plus" text="Create"/>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
exports.FloatingActionButton = React.forwardRef(function (props, ref) {
    (0, kendo_react_common_1.validatePackage)(package_metadata_1.packageMetadata);
    var _a = props.align, align = _a === void 0 ? defaultProps.align : _a, alignOffset = props.alignOffset, className = props.className, disabled = props.disabled, icon = props.icon, iconClass = props.iconClass, id = props.id, items = props.items, item = props.item, text = props.text, _b = props.positionMode, positionMode = _b === void 0 ? defaultProps.positionMode : _b, _c = props.shape, shape = _c === void 0 ? defaultProps.shape : _c, _d = props.size, size = _d === void 0 ? defaultProps.size : _d, style = props.style, _e = props.rounded, rounded = _e === void 0 ? defaultProps.rounded : _e, _f = props.themeColor, themeColor = _f === void 0 ? defaultProps.themeColor : _f, overlayStyle = props.overlayStyle, tabIndex = props.tabIndex, accessKey = props.accessKey, _g = props.popupSettings, popupSettings = _g === void 0 ? {} : _g, modal = props.modal, onClick = props.onClick, onItemClick = props.onItemClick, onFocus = props.onFocus, onBlur = props.onBlur, onKeyDown = props.onKeyDown, onOpen = props.onOpen, onClose = props.onClose, others = __rest(props, ["align", "alignOffset", "className", "disabled", "icon", "iconClass", "id", "items", "item", "text", "positionMode", "shape", "size", "style", "rounded", "themeColor", "overlayStyle", "tabIndex", "accessKey", "popupSettings", "modal", "onClick", "onItemClick", "onFocus", "onBlur", "onKeyDown", "onOpen", "onClose"]);
    var zIndexContext = (0, kendo_react_common_1.useZIndexContext)();
    var currentZIndex = zIndexContext ? zIndexContext + ZINDEX_FAB_STEP : DEFAULT_FAB_ZINDEX;
    var target = React.useRef(null);
    var elementRef = React.useRef(null);
    var listRef = React.useRef(null);
    var popupRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    var getImperativeHandle = React.useCallback(function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); }, [focusElement]);
    React.useImperativeHandle(target, getImperativeHandle);
    React.useImperativeHandle(ref, function () { return target.current; });
    var _h = React.useState(false), open = _h[0], setOpen = _h[1];
    var _j = React.useState(false), focused = _j[0], setFocused = _j[1];
    var _k = React.useState(-1), focusedIndex = _k[0], setFocusedIndex = _k[1];
    var buttonId = React.useMemo(function () { return (0, kendo_react_common_2.guid)(); }, []);
    var dir = (0, kendo_react_common_2.useDir)(elementRef, props.dir);
    var isRtl = dir === 'rtl';
    var listId = React.useMemo(function () { return (0, kendo_react_common_2.guid)(); }, []);
    React.useEffect(function () {
        (0, utils_1.position)(elementRef, align, alignOffset, isRtl);
    }, [elementRef, align, alignOffset, isRtl]);
    React.useEffect(function () {
        if (focused && elementRef && elementRef.current) {
            // firefox in mac does not focus on mouse-down, next line fixes this
            elementRef.current.focus();
        }
    }, [focused, elementRef]);
    var dispatchPopupEvent = React.useCallback(function (dispatchedEvent, isOpen) {
        if (!items) {
            return;
        }
        (0, kendo_react_common_2.dispatchEvent)(isOpen ? onOpen : onClose, dispatchedEvent, getImperativeHandle(), undefined);
    }, [onOpen, onClose, items]);
    var handleClick = React.useCallback(function (event) {
        if (!event.target || disabled) {
            return;
        }
        if (!items && onClick) {
            (0, kendo_react_common_2.dispatchEvent)(onClick, event, getImperativeHandle(), undefined);
        }
        else {
            setOpen(!open);
            setFocused(true);
            setFocusedIndex(!open ? 0 : -1);
            dispatchPopupEvent(event, !open);
        }
    }, [setOpen, setFocused, setFocusedIndex, onClick, dispatchPopupEvent,
        open, items, disabled]);
    var handleFocus = React.useCallback(function (event) {
        setFocused(true);
        setFocusedIndex(open ? 0 : -1);
        if (onFocus) {
            (0, kendo_react_common_2.dispatchEvent)(onFocus, event, getImperativeHandle(), undefined);
        }
    }, [onFocus, setFocused, setFocusedIndex]);
    var handleBlur = React.useCallback(function (event) {
        setFocused(false);
        setOpen(false);
        setFocusedIndex(-1);
        (0, kendo_react_common_2.dispatchEvent)(onBlur, event, getImperativeHandle(), undefined);
        var fireCloseEvent = open;
        if (fireCloseEvent) {
            dispatchPopupEvent(event, false);
        }
    }, [onBlur, setFocused, setOpen, setFocusedIndex, dispatchPopupEvent]);
    var handleMouseDown = React.useCallback(function (event) {
        event.preventDefault();
    }, []);
    var dispatchItemClickEvent = React.useCallback(function (dispatchedEvent, index) {
        if (!items) {
            return;
        }
        if (!items[index].disabled) {
            (0, kendo_react_common_2.dispatchEvent)(onItemClick, dispatchedEvent, getImperativeHandle(), {
                itemProps: items[index],
                itemIndex: index
            });
        }
    }, [onItemClick]);
    var handleItemClick = React.useCallback(function (event, clickedItemIndex) {
        if (!event.target || !items) {
            return;
        }
        setFocusedIndex(clickedItemIndex);
        setOpen(false);
        dispatchItemClickEvent(event, clickedItemIndex);
        dispatchPopupEvent(event, false);
    }, [setFocusedIndex, setOpen, dispatchItemClickEvent, dispatchPopupEvent]);
    var handleItemDown = React.useCallback(function (event) {
        if (document.activeElement === elementRef.current) {
            event.preventDefault();
        }
    }, [elementRef, document.activeElement]);
    var handleKeyDown = React.useCallback(function (event) {
        var currIndex = focusedIndex;
        var maxNavIndex = items ? items.length - 1 : -1;
        var isAtBottom = align.vertical === 'bottom';
        switch (event.keyCode) {
            case kendo_react_common_2.Keys.enter:
            case kendo_react_common_2.Keys.space:
                if (currIndex >= 0) {
                    dispatchItemClickEvent(event, currIndex);
                }
                event.preventDefault();
                setOpen(!open);
                setFocusedIndex(!open ? 0 : -1);
                break;
            case kendo_react_common_2.Keys.esc:
                event.preventDefault();
                setOpen(false);
                setFocusedIndex(-1);
                break;
            case kendo_react_common_2.Keys.home:
                event.preventDefault();
                setFocusedIndex(0);
                break;
            case kendo_react_common_2.Keys.end:
                event.preventDefault();
                setFocusedIndex(maxNavIndex);
                break;
            case kendo_react_common_2.Keys.down:
            case kendo_react_common_2.Keys.right:
                event.preventDefault();
                if (currIndex < maxNavIndex && !isAtBottom) {
                    setFocusedIndex(currIndex + 1);
                }
                if (currIndex > 0 && isAtBottom) {
                    setFocusedIndex(currIndex - 1);
                }
                break;
            case kendo_react_common_2.Keys.up:
            case kendo_react_common_2.Keys.left:
                event.preventDefault();
                if (currIndex > 0 && !isAtBottom) {
                    setFocusedIndex(currIndex - 1);
                }
                if (currIndex < maxNavIndex && isAtBottom) {
                    setFocusedIndex(currIndex + 1);
                }
                break;
            default:
                break;
        }
        (0, kendo_react_common_2.dispatchEvent)(onKeyDown, event, getImperativeHandle(), undefined);
    }, [onKeyDown, focusedIndex, setFocusedIndex, isRtl, setOpen]);
    var buttonClassNames = React.useMemo(function () {
        var _a;
        return (0, kendo_react_common_2.classNames)('k-fab k-fab-solid', (_a = {},
            _a["k-fab-".concat(shape)] = shape,
            _a['k-fab-sm'] = size === 'small',
            _a['k-fab-md'] = size === 'medium',
            _a['k-fab-lg'] = size === 'large',
            _a['k-disabled'] = disabled,
            _a['k-pos-absolute'] = positionMode === 'absolute',
            _a['k-pos-fixed'] = positionMode === 'fixed',
            _a['k-focus'] = focused,
            _a["k-rounded-".concat(kendo_react_common_1.kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded,
            _a["k-fab-solid-".concat(themeColor)] = themeColor,
            _a), "k-".concat(align.vertical, "-").concat(align.horizontal), className);
    }, [themeColor, size, rounded, shape, disabled, positionMode, align, focused, className]);
    var fabItems = (items && (items.map(function (element, index) {
        return (React.createElement(FloatingActionButtonItem_1.FloatingActionButtonItem, __assign({}, element, { key: index, index: index, id: "".concat(listId, "-").concat(index), disabled: disabled || element.disabled, focused: focusedIndex === index, dataItem: element, item: item, className: (0, kendo_react_common_2.classNames)(element.className, (0, utils_1.getTextDirectionClass)(dir || 'ltr', align.horizontal)), onClick: handleItemClick, onDown: handleItemDown })));
    })));
    var isIconFab = icon && !text;
    var fabWidth = elementRef.current ? elementRef.current.offsetWidth : 0;
    var iconWidth = 32;
    var spacing = (fabWidth / 2) - (iconWidth / 2);
    return (React.createElement(kendo_react_common_1.ZIndexContext.Provider, { value: currentZIndex },
        React.createElement(React.Fragment, null,
            React.createElement("button", __assign({ ref: elementRef, id: id || buttonId, role: items ? 'menubutton' : 'button', type: 'button', "aria-disabled": disabled, "aria-expanded": items ? open : undefined, "aria-haspopup": items ? true : false, "aria-label": "".concat(text || '', " floatingactionbutton"), "aria-owns": items ? listId : undefined, "aria-activedescendant": focusedIndex >= 0 && items ? "".concat(listId, "-").concat(focusedIndex) : undefined, tabIndex: (0, kendo_react_common_2.getTabIndex)(tabIndex, disabled), accessKey: accessKey, dir: dir, disabled: disabled, className: buttonClassNames, style: style, onClick: handleClick, onMouseDown: handleMouseDown, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown }, others),
                icon ?
                    React.createElement("span", { role: "presentation", className: (0, kendo_react_common_2.classNames)("k-fab-icon k-icon k-i-".concat(icon)) }) :
                    iconClass ?
                        React.createElement("span", { role: "presentation", className: iconClass }) :
                        null,
                text && React.createElement("span", { className: "k-fab-text" }, text)),
            modal && open && (React.createElement("div", { className: "k-overlay", style: __assign({ zIndex: currentZIndex }, overlayStyle) })),
            React.createElement(kendo_react_popup_1.Popup, { ref: popupRef, anchor: elementRef.current, show: open, animate: popupSettings.animate, popupClass: (0, kendo_react_common_2.classNames)('k-popup-transparent k-fab-popup', popupSettings.popupClass), anchorAlign: popupSettings.anchorAlign || (0, utils_1.getAnchorAlign)(align, isRtl), popupAlign: popupSettings.popupAlign || (0, utils_1.getPopupAlign)(align, isRtl), style: { boxShadow: 'none' } },
                React.createElement("ul", { ref: listRef, role: 'menu', "aria-labelledby": id, id: listId, className: (0, kendo_react_common_2.classNames)('k-fab-items', {
                        'k-fab-items-bottom': align.vertical !== 'bottom',
                        'k-fab-items-top': align.vertical === 'bottom'
                    }), style: {
                        paddingLeft: isIconFab ? spacing : undefined,
                        paddingRight: isIconFab ? spacing : undefined
                    } }, fabItems)))));
});
exports.FloatingActionButton.propTypes = {
    className: PropTypes.string,
    style: PropTypes.object,
    id: PropTypes.string,
    dir: PropTypes.string,
    tabIndex: PropTypes.number,
    accessKey: PropTypes.string,
    disabled: PropTypes.bool,
    icon: PropTypes.string,
    iconClass: PropTypes.string,
    text: PropTypes.string,
    alignOffset: PropTypes.shape({
        x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        y: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
    }),
    align: PropTypes.shape({
        vertical: PropTypes.oneOf(['top', 'middle', 'bottom']),
        horizontal: PropTypes.oneOf(['start', 'center', 'end'])
    }),
    positionMode: PropTypes.oneOf(['absolute', 'fixed']),
    shape: PropTypes.oneOf([null, 'rectangle', 'square']),
    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
    themeColor: PropTypes.oneOf([null,
        'primary', 'secondary', 'tertiary',
        'info', 'success', 'warning',
        'error', 'dark', 'light', 'inverse'
    ]),
    modal: PropTypes.bool,
    overlayStyle: PropTypes.object
};
var defaultProps = {
    align: { vertical: 'bottom', horizontal: 'end' },
    shape: null,
    size: 'medium',
    rounded: 'full',
    themeColor: 'primary',
    positionMode: 'fixed'
};
exports.FloatingActionButton.displayName = 'KendoFloatingActionButton';
