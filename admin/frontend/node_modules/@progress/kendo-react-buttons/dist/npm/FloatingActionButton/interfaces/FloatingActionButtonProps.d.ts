/// <reference types="react" />
import { FloatingActionButtonPopupSettings } from './FloatingActionButtonPopupSettings';
import { FloatingActionButtonItemProps } from '../FloatingActionButtonItem';
import { FloatingActionButtonAlign } from '../models/align';
import { FloatingActionButtonAlignOffset } from '../models/align-offset';
import { FloatingActionButtonEvent, FloatingActionButtonItemEvent } from '../models/events';
import { FloatingActionButtonPositionMode } from '../models/position-mode';
import { FloatingActionButtonShape } from '../models/shape';
import { FloatingActionButtonSize } from '../models/size';
import { FloatingActionButtonThemeColor } from '../models/theme-color';
import { FloatingActionButtonRounded } from '../models/rounded';
/**
 * @hidden
 */
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/**
 * Represents the props of the [KendoReact FloatingActionButton component]({% slug overview_floatingactionbutton %}).
 */
export interface FloatingActionButtonProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onBlur' | 'onFocus' | 'onKeyDown' | 'onClick'> {
    /**
     * Sets additional CSS styles to the Floating Action Button.
     */
    style?: React.CSSProperties;
    /**
     * Specifies a list of CSS classes that will be added to the Floating Action Button.
     */
    className?: string;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL [see example]({% slug rtl_buttons %}).
     */
    dir?: string;
    /**
     * Sets the `id` property of the root HTML element.
     */
    id?: string;
    /**
     * Specifies if the Floating Action Button is disabled [see example]({% slug disabled_floatingactionbutton %}). Defaults to `false`.
     */
    disabled?: boolean;
    /**
     * Defines the icon rendered in the Floating Action Button [see example]({% slug contenttypes_floatingactionbutton %}).
     */
    icon?: string;
    /**
     * Defines a CSS class or multiple classes separated by spaces which are applied
     * to a `span` element inside the Floating Action Button. Allows the usage of custom icons.
     */
    iconClass?: string;
    /**
     * Specifies the text of the Floating Action Button [see example]({% slug contenttypes_floatingactionbutton %}).
     */
    text?: string;
    /**
     * Specifies the horizontal and vertical offset applied to the Floating Action Button
     * [see example]({% slug positioning_floatingactionbutton %}).
     *
     * Normally, the floating button is positioned next to the boundaries of its container with a default offset of `16px`.
     *
     * Positive offsets move floating buttons, which are in a corner, further from that corner. Buttons, which are
     * not in a corner, can be moved along the container's boundary or towards the center of the container.
     *
     * A negative offset can be used to force a button to overflow the boundaries of its container.
     *
     * The possible keys are:
     * * `x`&mdash;Sets the horizontal offset of the Floating Action Button.
     * * `y`&mdash;Sets the vertical offset of the Floating Action Button.
     *
     */
    alignOffset?: FloatingActionButtonAlignOffset;
    /**
     * Specifies the horizontal and vertical alignment of the Floating Action Button in relation to the container
     * [see example]({% slug positioning_floatingactionbutton %}).
     *
     * > Centering the Floating Action Button in both horizontal and vertical dimension is not a typical use case.
     * Still, it is possible to achieve such a layout with appropriate offsets. Setting horizontal: "center" and vertical: "middle"
     * at the same time is not supported.
     *
     * The possible keys are:
     * * `horizontal`&mdash; Defines the possible horizontal alignment of the Floating Action Button..
     *   * `start`&mdash;Uses the start point of the container.
     *   * `center`&mdash;Uses the center point of the container.
     *   * `end`(Default)&mdash;Uses the end point of the container
     * * `vertical`&mdash; Defines the possible vertical alignment of the Floating Action Button..
     *   * `top`&mdash;Uses the top point of the container.
     *   * `middle`&mdash;Uses the middle point of the container.
     *   * `bottom`(Default)&mdash;Uses the bottom point of the container.
     *
     */
    align?: FloatingActionButtonAlign;
    /**
     * Specifies the position mode of the Floating Action Button
     * [see example]({% slug positioning_floatingactionbutton %}). It is based on the
     * [CSS position](https://developer.mozilla.org/en-US/docs/Web/CSS/position) rule.
     *
     * * The possible values are:
     * * 'fixed' (Default)
     * * 'absolute'
     */
    positionMode?: FloatingActionButtonPositionMode;
    /**
     * Specifies the shape of the Floating Action Button
     * [see example]({% slug appearance_floatingactionbutton %}).
     *
     * The possible values are:
     * * `rectangle`&mdash;Applies no border radius on the FloatingActionButton.
     * * `square`&mdash;Applies square shape on the FloatingActionButton.
     * * `null`&mdash;Does not set a shape `className`.
     *
     * @default null
     *
     * @deprecated The `shape` property will be deprecated with version `^6` of the `@progress/kendo-react-buttons` package.
     */
    shape?: FloatingActionButtonShape;
    /**
     * Specifies the size of the Floating Action Button
     * [see example]({% slug appearance_floatingactionbutton %}).
     *
     * The possible values are:
     * * `small`&mdash;Applies half of the default padding, e.g. `8px`.
     * * `medium` (Default)&mdash;Applies the default padding, e.g. `16px`.
     * * `large`&mdash;Applies one and one half of the default padding, e.g. `24px`.
     * * `null`&mdash;Does not set a size `className`.
     *
     */
    size?: FloatingActionButtonSize;
    /**
     * Specifies the rounding of the Floating Action Button.
     *
     * The possible values are:
     * * `small`
     * * `medium`
     * * `large`
     * * `full`
     * * `null`&mdash;Does not set a rounded `className`.
     *
     * @default `full`
     */
    rounded?: FloatingActionButtonRounded;
    /**
     * Specifies the theme color of the Floating Action Button
     * [see example]({% slug appearance_floatingactionbutton %}).
     *
     * The possible values are:
     * * `primary` (Default)&mdash;Applies coloring based on the primary theme color.
     * * `secondary`&mdash;Applies coloring based on the secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on the tertiary theme color.
     * * `info`&mdash;Applies coloring based on the info theme color.
     * * `success`&mdash; Applies coloring based on the success theme color.
     * * `warning`&mdash; Applies coloring based on the warning theme color.
     * * `error`&mdash; Applies coloring based on the error theme color.
     * * `dark`&mdash; Applies coloring based on the dark theme color.
     * * `light`&mdash; Applies coloring based on the light theme color.
     * * `inverse`&mdash; Applies coloring based on the inverse theme color.
     * * `null`&mdash;Does not set a theme color `className`.
     *
     */
    themeColor?: FloatingActionButtonThemeColor;
    /**
     * The collection of items that will be rendered in the Floating Action Button
     * [see example]({% slug databinding_floatingactionbutton %}).
     */
    items?: Array<FloatingActionButtonItemProps>;
    /**
     * Overrides the default component responsible for visualizing a single item
     * [see example]({% slug customization_floatingactionbutton %}#toc-items-rendering).
     *
     * The default Component is: [FloatingActionButtonItem]({% slug api_buttons_floatingactionbuttonitem %}).
     */
    item?: React.ComponentType<FloatingActionButtonItemProps>;
    /**
     * Represents the additional props that will be passed to the Popup inside the Floating Action Button
     * [see example]({% slug customization_floatingactionbutton %}#toc-popup-behavior).
     */
    popupSettings?: FloatingActionButtonPopupSettings;
    /**
     * Specifies the `tabIndex` of the main button.
     */
    tabIndex?: number;
    /**
     * Specifies the `accessKey` of the main button.
     */
    accessKey?: string;
    /**
     * Specifies if the Floating Action Button will be modal by rendering an overlay under the component.
     */
    modal?: boolean;
    /**
     * Set styles to the Floating Action Button overlay element rendered when the `modal` prop is enabled.
     */
    overlayStyle?: React.CSSProperties;
    /**
     * Fires when the Floating Action Button is focused
     * [see example]({% slug overview_floatingactionbutton %}#toc-events).
     */
    onFocus?: (event: FloatingActionButtonEvent) => void;
    /**
     * Fires when the Floating Action Button is blurred
     * [see example]({% slug overview_floatingactionbutton %}#toc-events).
     */
    onBlur?: (event: FloatingActionButtonEvent) => void;
    /**
     * Fires when the Floating Action Button is clicked.
     */
    onClick?: (event: FloatingActionButtonEvent) => void;
    /**
     * Fires when the Floating Action Button Item is clicked
     * [see example]({% slug overview_floatingactionbutton %}#toc-events).
     */
    onItemClick?: (event: FloatingActionButtonItemEvent) => void;
    /**
     * Triggers onKeyDown event
     * [see example]({% slug overview_floatingactionbutton %}#toc-events).
     */
    onKeyDown?: (event: FloatingActionButtonEvent) => void;
    /**
     * Fires when the popup which contains the items is opened
     * [see example]({% slug overview_floatingactionbutton %}#toc-events).
     */
    onOpen?: (event: FloatingActionButtonEvent) => void;
    /**
     * Fires when the popup which contains the items is closed
     * [see example]({% slug overview_floatingactionbutton %}#toc-events).
     */
    onClose?: (event: FloatingActionButtonEvent) => void;
}
export {};
