import * as React from 'react';
import { ChipRemoveEvent, ChipMouseEvent, ChipFocusEvent, ChipKeyboardEvent } from './../models/index';
/**
 * Represents the properties of [Chip]({% slug api_buttons_chip %}) component.
 */
export interface ChipProps {
    /**
     * Sets the `id` property of the top div element of the Chip.
     */
    id?: string;
    /**
     * Sets additional classes to the Chip.
     */
    className?: string;
    /**
     * The React elements that will be rendered as custom content inside the Chip.
     */
    children?: React.ReactNode;
    /**
     * Sets the `tabIndex` attribute.
     */
    tabIndex?: number;
    /**
     * Sets additional CSS styles to the Chip.
     */
    style?: React.CSSProperties;
    /**
     * Sets the label text of the Chip.
     */
    text?: string;
    /**
     * Sets the `id` value of the Chip.
     */
    value?: any;
    /**
     * The Chip direction 'ltr' as default or 'rtl'.
     */
    dir?: string;
    /**
     * Determines if the Chip could be removed.
     */
    removable?: boolean;
    /**
     * Determines if the Chip has custom `removeIcon`.
     */
    removeIcon?: string;
    /**
     * Determines if the Chip is disabled.
     */
    disabled?: boolean;
    /**
     * Determines if the Chip has an `icon`.
     */
    icon?: string;
    /**
     * Determines if the Chip has custom selection `icon`.
     */
    selectedIcon?: string;
    /**
     * Triggered on Chip removing.
     */
    onRemove?: (event: ChipRemoveEvent) => void;
    /**
     * Triggered on `onClick` event.
     */
    onClick?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onMouseDown` event.
     */
    onMouseDown?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onMouseUp` event.
     */
    onMouseUp?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onDoubleClick` event.
     */
    onDoubleClick?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onMouseEnter` event.
     */
    onMouseEnter?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onMouseLeave` event.
     */
    onMouseLeave?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onMouseMove` event.
     */
    onMouseMove?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onMouseOut` event.
     */
    onMouseOut?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onMouseOver` event.
     */
    onMouseOver?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on `onKeyDown` event.
     */
    onKeyDown?: (event: ChipKeyboardEvent) => void;
    /**
     * Triggered on `onFocus` event.
     */
    onFocus?: (event: ChipFocusEvent) => void;
    /**
     * Triggered on `onBlur` event.
     */
    onBlur?: (event: ChipFocusEvent) => void;
    /**
     * Represents the item data, coming from the `ChipList` component.
     */
    dataItem?: any;
    /**
     * Determines if the Chip is selected.
     */
    selected?: boolean;
    /**
     * Identifies the element(s) which will describe the component, similar to an [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example, these elements could contain an error or a hint message.
     */
    ariaDescribedBy?: string;
    /**
     * @hidden
     */
    role?: string;
    /**
     * Configures the `size` of the Chip.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the Chip.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the Chip.
     *
     * The available options are:
     * - solid
     * - outline
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline';
    /**
     * Configures the `themeColor` of the Chip.
     *
     * The available options are:
     * - base
     * - info
     * - success
     * - warning
     * - error
     * - null&mdash;Does not set a themeColor `className`.
     *
     * @default `base`
     */
    themeColor?: null | 'base' | 'info' | 'success' | 'warning' | 'error';
}
/**
 * Represents the target(element and props) of the ChipRemoveEvent.
 */
export interface ChipHandle {
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the Chip.
     */
    props: ChipProps;
}
/**
 * Represents the Chip component.
 */
export declare const Chip: React.ForwardRefExoticComponent<ChipProps & React.RefAttributes<ChipHandle | null>>;
