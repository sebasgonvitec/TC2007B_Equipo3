var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { useDir, getter, getTabIndex, classNames, useMouse, kendoThemeMaps } from '@progress/kendo-react-common';
import { selectionReducer } from './selection-reducer';
import { focusReducer } from './focus-reducer';
import { dataReducer } from './data-reducer';
import { Chip } from './Chip';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
/**
 * @hidden
 */
export var ChipListSelectionContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
export var ChipListFocusContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
export var ChipListDataContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
var useSelection = function (defaultValue, args, callback) {
    var _a = React.useState(defaultValue), state = _a[0], setState = _a[1];
    var handleDispatchSelection = function (action) {
        var newState = selectionReducer(args.state || state, __assign(__assign({}, action), args));
        if (callback) {
            callback(newState, action.event);
        }
        setState(newState);
    };
    return [state, handleDispatchSelection];
};
/**
 * @hidden
 */
var useFocus = function (args) {
    var _a = React.useState(null), state = _a[0], setState = _a[1];
    var handleDispatchFocus = function (action) {
        var newState = focusReducer(action.payload, __assign(__assign({}, action), args));
        setState(newState);
    };
    return [state, handleDispatchFocus];
};
/**
 * @hidden
 */
var useData = function (defaultData, args, callback) {
    var _a = React.useState(defaultData), state = _a[0], setState = _a[1];
    var handleDispatchData = function (action) {
        var newState = dataReducer(args.state || state, __assign(__assign({}, action), args));
        if (callback) {
            callback(newState, action.event);
        }
        setState(newState);
    };
    return [state, handleDispatchData];
};
/**
 * Represents the ChipList component.
 */
export var ChipList = React.forwardRef(function (props, ref) {
    var _a;
    validatePackage(packageMetadata);
    var target = React.useRef(null);
    var chipListRef = React.useRef(null);
    var dir = useDir(chipListRef, props.dir);
    var chip = props.chip, id = props.id, style = props.style, tabIndex = props.tabIndex, disabled = props.disabled, size = props.size, className = props.className, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, _b = props.selection, selection = _b === void 0 ? defaultProps.selection : _b, _c = props.value, value = _c === void 0 ? defaultProps.defaultValue : _c, _d = props.defaultData, defaultData = _d === void 0 ? defaultProps.defaultData : _d, _e = props.valueField, valueField = _e === void 0 ? defaultProps.valueField : _e, _f = props.textField, textField = _f === void 0 ? defaultProps.textField : _f, onChange = props.onChange, onDataChange = props.onDataChange;
    var ChipComponent = React.useMemo(function () { return chip || Chip; }, [chip, Chip]);
    React.useImperativeHandle(target, function () { return ({
        element: chipListRef.current,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleChange = React.useCallback(function (newValue, event) {
        if (onChange && target.current) {
            onChange.call(undefined, {
                value: newValue,
                target: target.current,
                syntheticEvent: event
            });
        }
    }, [onChange]);
    var _g = useSelection(value, {
        selection: selection,
        state: value
    }, handleChange), stateValue = _g[0], dispatchStateValue = _g[1];
    var handleDataChange = React.useCallback(function (newData, event) {
        if (onDataChange && target.current) {
            onDataChange.call(undefined, {
                value: newData,
                target: target.current,
                syntheticEvent: event
            });
        }
    }, [onDataChange]);
    var _h = useData(props.data || defaultData, {
        state: props.data,
        valueField: valueField
    }, handleDataChange), stateData = _h[0], dispatchData = _h[1];
    var itemsReducer = React.useCallback(function (acc, current) {
        acc.push(current[valueField]);
        return acc;
    }, [valueField]);
    var data = React.useMemo(function () { return props.data || stateData; }, [props.data, stateData]);
    var chipValue = React.useMemo(function () { return value || stateValue; }, [value, stateValue]);
    var items = React.useMemo(function () { return data.reduce(itemsReducer, []); }, [data, itemsReducer]);
    var valueGetter = React.useCallback(function (item) { return getter(valueField)(item); }, [valueField]);
    var textGetter = React.useCallback(function (item) { return getter(textField)(item); }, [textField]);
    var _j = useFocus({ items: items }), focus = _j[0], dispatchFocus = _j[1];
    var mouseProps = useMouse(props, target);
    return (React.createElement(ChipListSelectionContext.Provider, { value: [chipValue, dispatchStateValue] },
        React.createElement(ChipListFocusContext.Provider, { value: [focus, dispatchFocus] },
            React.createElement(ChipListDataContext.Provider, { value: [data, dispatchData] },
                React.createElement("div", __assign({ ref: chipListRef }, mouseProps, { role: 'listbox', id: id, dir: dir, style: style, tabIndex: getTabIndex(tabIndex, disabled, undefined), className: classNames('k-chip-list', (_a = {
                            'k-rtl': dir === 'rtl',
                            'k-disabled': disabled
                        },
                        _a["k-chip-list-".concat(kendoThemeMaps.sizeMap[size] || size)] = size,
                        _a), className), "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }), data.map(function (item, index) {
                    return (React.createElement(ChipComponent, { role: 'option', dataItem: item, size: size, key: [valueGetter(item), index].join('-'), text: textGetter(item), value: valueGetter(item) }));
                }))))));
});
var propTypes = {
    id: PropTypes.string,
    className: PropTypes.string,
    tabIndex: PropTypes.number,
    data: PropTypes.any,
    defaultData: PropTypes.arrayOf(PropTypes.any),
    onDataChange: PropTypes.func,
    value: PropTypes.oneOfType([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),
    defaultValue: PropTypes.oneOfType([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),
    onChange: PropTypes.func,
    selection: PropTypes.oneOf(['single', 'none', 'multiple']),
    textField: PropTypes.string,
    valueField: PropTypes.string,
    disabled: PropTypes.bool,
    dir: PropTypes.oneOf(['ltr', 'rtl']),
    ariaLabelledBy: PropTypes.string,
    ariaDescribedBy: PropTypes.string,
    size: PropTypes.oneOf([null, 'small', 'medium', 'large'])
};
var defaultProps = {
    chip: Chip,
    size: 'medium',
    disabled: false,
    defaultValue: null,
    defaultData: [],
    dir: 'ltr',
    selection: 'none',
    textField: 'text',
    valueField: 'value',
    removable: 'removable'
};
ChipList.displayName = 'KendoReactChipList';
// TODO: delete casting when @types/react is updated!
ChipList.propTypes = propTypes;
ChipList.defaultProps = defaultProps;
