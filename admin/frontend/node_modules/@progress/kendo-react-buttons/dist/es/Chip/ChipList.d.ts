import * as React from 'react';
import { FormComponentProps, KendoMouse } from '@progress/kendo-react-common';
import { ChipProps } from './Chip';
import { ChipListChangeEvent, ChipListDataChangeEvent } from './../models/index';
/**
 * Represents the properties of [ChipList]({% slug api_buttons_chiplist %}) component.
 */
export interface ChipListProps extends FormComponentProps, KendoMouse<ChipListHandle, HTMLDivElement> {
    /**
     * Sets the `id` property of the top div element of the ChipList.
     */
    id?: string;
    /**
     * Sets additional classes to the ChipList.
     */
    className?: string;
    /**
     * Sets the `tabIndex` attribute.
     */
    tabIndex?: number;
    /**
     * Sets additional CSS styles to the ChipList.
     */
    style?: React.CSSProperties;
    /**
     * Represents Chip component.
     */
    chip?: React.ComponentType<ChipProps>;
    /**
     * Represents the data about the child Chips.
     */
    data?: any;
    /**
     * Represents the default data about the child Chips.
     */
    defaultData?: any[];
    /**
     * Triggered after Chip data change.
     */
    onDataChange?: (event: ChipListDataChangeEvent) => void;
    /**
     * Represents the selection state of Chip component.
     */
    value?: any | any[];
    /**
     * Represents the default value of the selection state of Chip component.
     */
    defaultValue?: any | any[];
    /**
     * Triggered after value change.
     */
    onChange?: (event: ChipListChangeEvent) => void;
    /**
     * Represents the selection state of Chip component.
     */
    selection?: string;
    /**
     * Represents the `text` field of Chip, used for the `label`.
     */
    textField?: string;
    /**
     * Represents the `value` field of Chip, used for setting the Chip `id`.
     */
    valueField?: string;
    /**
     * Determines of ChipList is disabled.
     */
    disabled?: boolean;
    /**
     * The ChipList direction 'ltr' as default or 'rtl'.
     */
    dir?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Configures the `size` of the ChipList.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
}
/**
 * Represents the target(element and props) of the ChipListChangeEvent.
 */
export interface ChipListHandle {
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the ChipList.
     */
    props: ChipListProps;
}
/**
 * @hidden
 */
export declare const ChipListSelectionContext: React.Context<[string | string[] | null, Function]>;
/**
 * @hidden
 */
export declare const ChipListFocusContext: React.Context<[string | string[] | null, Function]>;
/**
 * @hidden
 */
export declare const ChipListDataContext: React.Context<[string | null, Function]>;
/**
 * Represents the ChipList component.
 */
export declare const ChipList: React.ForwardRefExoticComponent<ChipListProps & React.RefAttributes<ChipListHandle | null>>;
