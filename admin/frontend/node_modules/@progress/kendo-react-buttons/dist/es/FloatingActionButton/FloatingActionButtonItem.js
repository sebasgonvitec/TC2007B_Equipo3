var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, getTabIndex } from '@progress/kendo-react-common';
/**
 * Represents the [KendoReact FloatingActionButtonItem component]({% slug overview_floatingactionbutton %}).
 *
 * @example
 * ```jsx
 *
 * const App = () => {
 *   return (
 *       <FloatingActionButton items={[{icon: 'pencil', text: 'Edit'}, {icon: 'close', text: 'Remove'}] icon: 'plus'} />
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var FloatingActionButtonItem = React.forwardRef(function (props, ref) {
    var className = props.className, disabled = props.disabled, text = props.text, icon = props.icon, style = props.style, id = props.id, focused = props.focused, tabIndex = props.tabIndex, index = props.index, dataItem = props.dataItem, item = props.item, onDown = props.onDown, onClick = props.onClick, others = __rest(props, ["className", "disabled", "text", "icon", "style", "id", "focused", "tabIndex", "index", "dataItem", "item", "onDown", "onClick"]);
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    var getImperativeHandle = React.useCallback(function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); }, [focusElement]);
    React.useImperativeHandle(ref, getImperativeHandle);
    var handleClick = React.useCallback(function (event) {
        if (onClick && index !== undefined && !disabled) {
            onClick(event, index);
        }
    }, [onClick, index]);
    var itemClassNames = React.useMemo(function () { return classNames('k-fab-item', {
        'k-focus': focused,
        'k-disabled': disabled
    }, className); }, [className, disabled, focused]);
    var ItemComp = item;
    return (React.createElement("li", __assign({ ref: elementRef, id: id, className: itemClassNames, style: style, role: 'menuitem', tabIndex: getTabIndex(tabIndex, disabled), "aria-disabled": disabled, "aria-label": "".concat(text || '', " floatingactionbutton item"), onClick: handleClick, onMouseDown: onDown, onPointerDown: onDown }, others), ItemComp ? React.createElement(ItemComp, { itemIndex: index, item: dataItem }) :
        (React.createElement(React.Fragment, null,
            text && React.createElement("span", { className: "k-fab-item-text" }, text),
            icon && React.createElement("span", { className: classNames("k-fab-item-icon k-icon k-i-".concat(icon)) })))));
});
FloatingActionButtonItem.propTypes = {
    className: PropTypes.string,
    style: PropTypes.object,
    children: PropTypes.any,
    disabled: PropTypes.bool,
    focused: PropTypes.bool,
    index: PropTypes.number,
    icon: PropTypes.string,
    text: PropTypes.string,
    tabIndex: PropTypes.number,
    customProp: PropTypes.any
};
FloatingActionButtonItem.displayName = 'KendoFloatingActionButtonItem';
