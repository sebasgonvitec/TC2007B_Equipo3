"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridHierarchyCell = void 0;
var React = require("react");
var utils_1 = require("./../utils");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var messages_1 = require("../messages");
/**
 * @hidden
 */
var GridHierarchyCell = function (props) {
    var defaultRendering = null;
    var expanded = (0, utils_1.getNestedValue)(props.field, props.dataItem);
    var navigationAttributes = (0, kendo_react_data_tools_1.useTableKeyboardNavigation)(props.id);
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var onKeyDownHandler = React.useCallback(function (event) {
        if (event.isDefaultPrevented()) {
            return;
        }
        if (event.keyCode === kendo_react_common_1.Keys.enter && props.onChange) {
            event.preventDefault();
            props.onChange({
                dataItem: props.dataItem,
                dataIndex: props.dataIndex,
                syntheticEvent: event,
                field: props.field,
                value: !expanded
            });
        }
    }, [props.dataItem, props.dataIndex, props.field, props.onChange, expanded]);
    if (props.rowType === 'groupFooter') {
        defaultRendering = React.createElement("td", __assign({ className: "k-hierarchy-cell" }, navigationAttributes));
    }
    else if (props.rowType !== 'groupHeader') {
        var className = expanded ? 'k-icon k-i-minus' : 'k-icon k-i-plus';
        var baseMessage = expanded ? messages_1.detailCollapse : messages_1.detailExpand;
        var message = localization.toLanguageString(baseMessage, messages_1.messages[baseMessage]);
        defaultRendering = (React.createElement("td", __assign({ className: "k-hierarchy-cell", onKeyDown: onKeyDownHandler, "aria-expanded": expanded ? 'true' : 'false', role: 'gridcell', "aria-colindex": props.ariaColumnIndex }, navigationAttributes),
            React.createElement("a", { onClick: function (e) {
                    e.preventDefault();
                    if (props.onChange) {
                        props.onChange({
                            dataItem: props.dataItem,
                            dataIndex: props.dataIndex,
                            syntheticEvent: e,
                            field: props.field,
                            value: !expanded
                        });
                    }
                }, "aria-label": message, className: className, href: "#", tabIndex: -1 })));
    }
    return props.render ?
        props.render.call(undefined, defaultRendering, props) :
        defaultRendering;
};
exports.GridHierarchyCell = GridHierarchyCell;
