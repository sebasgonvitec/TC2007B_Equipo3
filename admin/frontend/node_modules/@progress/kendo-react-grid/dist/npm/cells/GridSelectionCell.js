"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridSelectionCell = void 0;
var React = require("react");
var utils_1 = require("./../utils");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
/**
 * @hidden
 */
var GridSelectionCell = function (props) {
    var handleOnChange = React.useCallback(function (syntheticEvent) {
        if (props.selectionChange) {
            props.selectionChange({ syntheticEvent: syntheticEvent });
        }
    }, [props.selectionChange]);
    var inputId = React.useMemo(function () { return (0, kendo_react_common_1.guid)(); }, []);
    var selectedValue = (0, utils_1.getNestedValue)(props.field, props.dataItem);
    var navigationAttributes = (0, kendo_react_data_tools_1.useTableKeyboardNavigation)(props.id);
    var defaultRendering = props.rowType !== 'groupHeader' ? (React.createElement("td", __assign({ colSpan: props.colSpan, style: props.style, className: props.className, "aria-colindex": props.ariaColumnIndex, role: 'gridcell' }, navigationAttributes),
        React.createElement("input", { checked: typeof selectedValue === 'boolean' && selectedValue, id: inputId, type: "checkbox", className: "k-checkbox k-checkbox-md k-rounded-md", onChange: handleOnChange }),
        React.createElement("label", { className: "k-checkbox-label", htmlFor: inputId }))) : null;
    return props.render ?
        props.render.call(undefined, defaultRendering, props) :
        defaultRendering;
};
exports.GridSelectionCell = GridSelectionCell;
