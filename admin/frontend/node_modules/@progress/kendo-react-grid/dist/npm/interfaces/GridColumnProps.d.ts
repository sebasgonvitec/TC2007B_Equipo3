import { ComponentType, ReactElement } from 'react';
import { GridCellProps } from '../interfaces/GridCellProps';
import { GridFilterCellProps } from '../interfaces/GridFilterCellProps';
import { GridHeaderCellProps } from '../interfaces/GridHeaderCellProps';
import { GridColumnMenuProps } from '../interfaces/GridColumnMenuProps';
import { GridFooterCellProps } from './GridFooterCellProps';
import { GridColumnSortSettings } from './GridSortSettings';
import { ColumnBaseProps } from '@progress/kendo-react-data-tools';
/**
 * The props of the GridColumn component.
 */
export interface GridColumnProps extends Omit<ColumnBaseProps, 'cell'> {
    /**
     * Allows the column headers to be clicked and the `sortChange` event emitted.
     * You have to handle the `sortChange` event yourself and sort the data.
     * Defaults to `true`.
     */
    sortable?: boolean | GridColumnSortSettings;
    /**
     * Defines if the column is locked (frozen or sticky).
     * Locked columns are the columns that are visible at all times while the user scrolls the component horizontally.
     * Defaults to `false`.
     */
    locked?: boolean;
    /**
     * A collection of child columns.
     */
    children?: GridColumnProps[] | ReactElement<GridColumnProps>[];
    /**
     * Specifies a React element that will be cloned and rendered inside the column menu of the Grid ([see example]({% slug column_menu_grid %}#toc-basic-usage)).
     */
    columnMenu?: ComponentType<GridColumnMenuProps>;
    /**
     * Determines if the column can be dragged to the group panel. Defaults to `true`.
     */
    groupable?: boolean;
    /**
     * Defines whether the column is editable ([more information and examples]({% slug editing_inline_grid %})).
     */
    editable?: boolean;
    /**
     * Defines if a filter UI will be rendered for this column. Defaults to `true`.
     */
    filterable?: boolean;
    /**
     * Defines the title which will be set to the input element in the filter cell.
     */
    filterTitle?: string;
    /**
     * Defines the filter type that will be rendered inside the filter row. Defaults to `text`.
     */
    filter?: 'text' | 'numeric' | 'boolean' | 'date';
    /**
     * Defines the editor type. Used when the column enters the edit mode ([more information and examples]({% slug editing_inline_grid %})). Defaults to `text`.
     */
    editor?: 'text' | 'numeric' | 'boolean' | 'date';
    /**
     * Defines the component that will be rendered as a cell. If not set, a `GridCell` will be rendered by default.
     */
    cell?: ComponentType<GridCellProps>;
    /**
     * Defines the component that will be rendered as a filter cell. If not set, a `GridFilterCell` will be rendered by default.
     */
    filterCell?: ComponentType<GridFilterCellProps>;
    /**
     * Defines the component that will be rendered as a header cell. If not set, a `GridHeaderCell` will be rendered by default.
     */
    headerCell?: ComponentType<GridHeaderCellProps>;
    /**
     * Defines the component that will be rendered as a footer cell.
     * The footer has to render an HTML `<td>` element and applies the `style` and `colspan` values from its props.
     *
     * @example
     * ```jsx-no-run
     * <GridColumn
     *  footerCell={props => (
     *    <td colSpan={props.colSpan} style={props.style}>Sum: 50</td>
     *  )}
     * />
     * ```
     */
    footerCell?: ComponentType<GridFooterCellProps>;
}
