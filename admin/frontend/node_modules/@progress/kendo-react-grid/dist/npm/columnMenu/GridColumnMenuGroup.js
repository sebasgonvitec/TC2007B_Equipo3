"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridColumnMenuGroup = void 0;
var React = require("react");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var GridColumnMenuItemGroup_1 = require("./GridColumnMenuItemGroup");
var GridColumnMenuItem_1 = require("./GridColumnMenuItem");
var messages_1 = require("../messages");
/**
 * @example
 * ```jsx-no-run
 * class TextColumnMenu extends React.Component {
 *     render() {
 *         return (
 *         <div>
 *             <GridColumnMenuSort {...this.props} />
 *             <GridColumnMenuGroup {...this.props} />
 *         </div>);
 *     }
 * }
 *
 * class App extends React.PureComponent {
 *     constructor(props) {
 *         super(props);
 *
 *         this.state = this.createAppState({
 *             take: 10,
 *             skip: 0
 *         });
 *     }
 *
 *     createAppState(dataState) {
 *         return {
 *             result: process(products.slice(0), dataState),
 *             dataState: dataState
 *         };
 *     }
 *
 *     dataStateChange = (event) => {
 *         this.setState(this.createAppState(event.dataState));
 *     }
 *
 *     render() {
 *         return (
 *             <div>
 *                 <Grid
 *                     data={this.state.result}
 *                     {...this.state.dataState}
 *                     onDataStateChange={this.dataStateChange}
 *                     sortable={true}
 *                     pageable={true}
 *                 >
 *                     <Column field="ProductID" title="Product ID" />
 *                     <Column field="ProductName" columnMenu={TextColumnMenu} />
 *                 </Grid>
 *                 <br />
 *             </div>
 *         );
 *     }
 * }
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
var GridColumnMenuGroup = /** @class */ (function (_super) {
    __extends(GridColumnMenuGroup, _super);
    function GridColumnMenuGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.onGroupClick = function (event) {
            event.preventDefault();
            if (_this.props.onGroupChange) {
                var column_1 = _this.props.column;
                if (!column_1.field) {
                    return;
                }
                var newGroup = (_this.props.group || []).slice();
                var groupIndex = newGroup.findIndex(function (group) { return group.field === column_1.field; });
                if (groupIndex > -1) {
                    newGroup.splice(groupIndex, 1);
                }
                else {
                    newGroup.push({
                        field: column_1.field
                    });
                }
                _this.props.onGroupChange(newGroup, event);
            }
            if (_this.props.onCloseMenu) {
                _this.props.onCloseMenu();
            }
        };
        return _this;
    }
    /**
     * @hidden
     */
    GridColumnMenuGroup.prototype.render = function () {
        var _a = this.props, group = _a.group, column = _a.column;
        var localizationService = (0, kendo_react_intl_1.provideLocalizationService)(this);
        var isGrouped = Boolean(group && column.field && group.find(function (currentGroup) { return currentGroup.field === column.field; }));
        var message = !isGrouped ? messages_1.groupColumn : messages_1.ungroupColumn;
        var iconClass = !isGrouped ? 'k-i-group' : 'k-i-ungroup';
        return (React.createElement(GridColumnMenuItemGroup_1.GridColumnMenuItemGroup, null,
            React.createElement(GridColumnMenuItem_1.GridColumnMenuItem, { title: localizationService.toLanguageString(message, messages_1.messages[message]), iconClass: iconClass, onClick: this.onGroupClick })));
    };
    return GridColumnMenuGroup;
}(React.Component));
exports.GridColumnMenuGroup = GridColumnMenuGroup;
(0, kendo_react_intl_1.registerForIntl)(GridColumnMenuGroup);
(0, kendo_react_intl_1.registerForLocalization)(GridColumnMenuGroup);
