import * as React from 'react';
import * as PropTypes from 'prop-types';
import { BaseEvent } from '@progress/kendo-react-common';
import { ToggleBaseProps } from '../interfaces/ToggleBaseProps';
import { FormComponent, FormComponentProps, FormComponentValidity } from '@progress/kendo-react-common';
/**
 * The arguments for the `onChange` Switch event.
 */
export interface SwitchChangeEvent extends BaseEvent<Switch> {
    /**
     * The new value of the Switch.
     */
    value: boolean;
}
/**
 * Represents the props of the [KendoReact Switch component]({% slug overview_switch %}).
 */
export interface SwitchProps extends ToggleBaseProps, FormComponentProps {
    /**
     * Specifies the `accessKey` of the Switch.
     */
    accessKey?: string;
    /**
     * Sets the current value of the Switch ([see example]({% slug controlled_switch %})).
     */
    checked?: boolean;
    /**
     * Sets the `className` of the wrapping element of the Switch.
     */
    className?: string;
    /**
     * Sets the value of the Switch when it is initially displayed ([see example]({% slug default_state %})).
     */
    defaultChecked?: boolean;
    /**
     * Sets the default value of the Switch.
     */
    defaultValue?: any;
    /**
     * Disables the Switch when set to `true` ([see example]({% slug disabled_switch %})).
     */
    disabled?: boolean;
    /**
     * Sets the `dir` property of the wrapping element of the Switch.
     */
    dir?: string;
    /**
     * Sets the `id` of the Switch.
     */
    id?: string;
    /**
     * Configures the `size` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `trackRounded` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a trackRounded `className`.
     *
     * @default `full`
     */
    trackRounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `thumbRounded` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a thumbRounded `className`.
     *
     * @default `full`
     */
    thumbRounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Changes the **Off** label([see example]({% slug labels_switch %})).
     */
    offLabel?: string;
    /**
     * Fires each time the Switch gets blurred.
     */
    onBlur?: (event: React.FocusEvent<HTMLSpanElement>) => void;
    /**
     * Fires each time the user selects a new value ([see example]({% slug controlled_switch %})).
     */
    onChange?: (event: SwitchChangeEvent) => void;
    /**
     * Fires each time the Switch component gets focused.
     */
    onFocus?: (event: React.FocusEvent<HTMLSpanElement>) => void;
    /**
     * Changes the **On** label ([see example]({% slug labels_switch %})).
     */
    onLabel?: string;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex?: number;
    /**
     * Sets the value of the Switch. It can either be of the primitive (string, number, boolean) or of the complex (array) type.
     */
    value?: string | number | string[] | boolean | null;
}
/**
 * @hidden
 */
export interface SwitchState {
    checked: boolean;
    focused: boolean;
}
/** @hidden */
export declare class SwitchWithoutContext extends React.Component<SwitchProps, SwitchState> implements FormComponent {
    static displayName: string;
    /**
     * Gets the value of the Switch.
     */
    get value(): boolean;
    get element(): HTMLSpanElement | null;
    /**
     * @hidden
     */
    get actionElement(): HTMLSpanElement | null;
    /**
     * Gets the `name` property of the Switch.
     */
    get name(): string | undefined;
    /**
     * Represents the validity state into which the Switch is set.
     */
    get validity(): FormComponentValidity;
    /**
     * @hidden
     */
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    protected get required(): boolean;
    /**
     * @hidden
     */
    protected setValidity: () => void;
    protected limit: (offset: number, drag: HTMLSpanElement, wrapper: HTMLSpanElement) => number;
    protected toggle: (value: boolean, event: any) => void;
    /**
     * @hidden
     */
    static propTypes: {
        accessKey: PropTypes.Requireable<string>;
        checked: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        defaultChecked: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<"small" | "medium" | "large" | null | undefined>;
        trackRounded: PropTypes.Requireable<"small" | "medium" | "full" | "large" | null | undefined>;
        thumbRounded: PropTypes.Requireable<"small" | "medium" | "full" | "large" | null | undefined>;
        dir: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        offLabel: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        tabIndex: PropTypes.Requireable<number>;
        valid: PropTypes.Requireable<boolean>;
        validate: PropTypes.Requireable<boolean>;
        validationMessage: PropTypes.Requireable<string>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onLabel: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        disabled: boolean;
        defaultChecked: boolean;
        size: "small" | "medium" | "large" | null | undefined;
        trackRounded: "small" | "medium" | "full" | "large" | null | undefined;
        thumbRounded: "small" | "medium" | "full" | "large" | null | undefined;
        offLabel: string;
        onBlur: () => void;
        onFocus: () => void;
        onLabel: string;
        required: boolean;
        validityStyles: boolean;
    };
    /**
     * @hidden
     */
    readonly state: SwitchState;
    private _element;
    private _wrapper;
    private _input;
    private _id;
    private valueDuringOnChange;
    private dir?;
    private defaultValidationMessage;
    private eventTimeStamp?;
    /**
     * @hidden
     */
    constructor(props: SwitchProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private dummyInput;
    private handleClick;
    private handleKeyDown;
    private handleWrapperFocus;
    private handleWrapperBlur;
}
/**
 * Represents the PropsContext of the `Switch` component.
 * Used for global configuration of all `Switch` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const SwitchPropsContext: React.Context<(p: SwitchProps) => SwitchProps>;
/**
 * Represent the `ref` of the Switch component.
 */
export interface SwitchHandle extends Pick<SwitchWithoutContext, keyof SwitchWithoutContext> {
    /**
     * Returns the HTML element of the Switch component.
     */
    element: HTMLSpanElement | null;
    /**
     * Gets the `name` property of the Switch.
     */
    name: string | undefined;
    /**
     * Represents the validity state into which the Switch is set.
     */
    validity: FormComponentValidity;
    /**
     * Gets the value of the Switch.
     */
    value: boolean;
}
/** @hidden */
export declare type Switch = SwitchHandle;
/**
 * Represents the [KendoReact Switch component]({% slug overview_switch %}).
 *
 * Accepts properties of type [SwitchProps]({% slug api_inputs_switchprops %}).
 * Obtaining the `ref` returns an object of type [SwitchHandle]({% slug api_inputs_switchhandle %}).
 */
export declare const Switch: React.ForwardRefExoticComponent<SwitchProps & React.RefAttributes<any>>;
