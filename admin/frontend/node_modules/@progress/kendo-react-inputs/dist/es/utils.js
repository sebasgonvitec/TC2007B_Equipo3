var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// Polyfill for PropTypes.null
/**
 * @hidden
 */
export function nullable(subRequirement) {
    var check = function (required, props, key) {
        var rest = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            rest[_i - 3] = arguments[_i];
        }
        if (props[key] === null) {
            return null;
        }
        var sub = required ? subRequirement.isRequired : subRequirement;
        return sub.apply(void 0, __spreadArray([props, key], rest, false));
    };
    var fn = check.bind(null, false);
    fn.isRequired = check.bind(null, true);
    return fn;
}
