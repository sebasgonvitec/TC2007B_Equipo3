import * as React from 'react';
import { RatingItemMouseEvent, RatingItemFocusEvent, RatingItemKeyboardEvent } from './models';
/**
 * Represents the properties of [RatingItem](% slug api_inputs_ratingitem %) component.
 */
export interface RatingItemProps {
    /**
     * Sets the `id` property of the top div element of the RatingItem.
     */
    id?: string;
    /**
     * Sets additional classes to the RatingItem.
     */
    className?: string;
    /**
     * Sets the `tabIndex` attribute.
     */
    tabIndex?: number;
    /**
     * Determines if icon is partly selected.
     */
    half?: boolean;
    /**
     * Sets additional CSS styles to the RatingItem.
     */
    style?: React.CSSProperties;
    /**
     * Determines the children nodes.
     */
    children?: React.ReactNode;
    /**
     * Determines the RatingItem direction `ltr` - by default, or `rtl`.
     */
    dir?: string;
    /**
     * Sets the current value of the RatingItem, used in controlled mode.
     */
    value: number;
    /**
     * Sets the title of current RatingItem component. [See example]({% slug controlled_rating %})
     */
    title?: string;
    /**
     * Sets the icon of current RatingItem component. [See example]({% slug label_rating %})
     */
    icon?: any;
    /**
     * Determines if current RatingItem is selected. [See example]({% slug item_customization_ratingitem %})
     */
    selected?: boolean;
    /**
     * Determines if current RatingItem is hovered.
     */
    hovered?: boolean;
    /**
     * Triggered after `onClick` event. Gets outside access to the target element, the new value and the event type.
     */
    onClick?: (event: RatingItemMouseEvent) => void;
    /**
     * Triggered after `onKeyDown` event. Gets outside access to the target element, the new value and the event type.
     */
    onKeyDown?: (event: RatingItemKeyboardEvent) => void;
    /**
     * Triggered after `onFocus` event. Gets outside access to the target element and the event type.
     */
    onFocus?: (event: RatingItemFocusEvent) => void;
    /**
     * Triggered after `onBlur` event. Gets outside access to the target element and the event type.
     */
    onBlur?: (event: RatingItemFocusEvent) => void;
    /**
     * Triggered after `onMouseEnter` event. Gets outside access to the target element and the event type.
     */
    onMouseEnter?: (event: RatingItemMouseEvent) => void;
    /**
     * Triggered after `onMouseLeave` event. Gets outside access to the target element and the event type.
     */
    onMouseLeave?: (event: RatingItemMouseEvent) => void;
    /**
     * Triggered after `onMouseMove` event. Gets outside access to the target element and the event type.
     */
    onMouseMove?: (event: RatingItemMouseEvent) => void;
}
/**
 * Represents the target(value, element and props) of The RatingItem.
 */
export interface RatingItemHandle {
    /**
     * The current RatingItem value.
     */
    value: number;
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props value of the RatingItem.
     */
    props: RatingItemProps;
}
/**
 * Represents the RatingItem component.
 */
export declare const RatingItem: React.ForwardRefExoticComponent<RatingItemProps & React.RefAttributes<RatingItemHandle | null>>;
