var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, guid, noop, Keys, dispatchEvent, getTabIndex, createPropsContext, withPropsContext, kendoThemeMaps } from '@progress/kendo-react-common';
import { provideLocalizationService } from '@progress/kendo-react-intl';
import { messages, switchValidation } from './../messages';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
/** @hidden */
var SwitchWithoutContext = /** @class */ (function (_super) {
    __extends(SwitchWithoutContext, _super);
    /**
     * @hidden
     */
    function SwitchWithoutContext(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.setValidity = function () {
            if (_this._input && _this._input.setCustomValidity) {
                _this._input.setCustomValidity(_this.validity.valid
                    ? ''
                    : _this.props.validationMessage ||
                        _this.defaultValidationMessage.toLanguageString(switchValidation, messages[switchValidation]));
            }
        };
        _this.limit = function (offset, drag, wrapper) {
            var wrapperWidth = wrapper.offsetWidth;
            var margin = drag.offsetWidth;
            if (offset < 0) {
                return 0;
            }
            else if (offset > wrapperWidth - margin) {
                return wrapperWidth - margin;
            }
            return offset;
        };
        _this.toggle = function (value, event) {
            _this.setState({ checked: value });
            _this.valueDuringOnChange = value;
            dispatchEvent(_this.props.onChange, event, _this, { value: value });
            _this.valueDuringOnChange = undefined;
        };
        _this._element = null;
        _this._wrapper = null;
        _this._input = null;
        _this._id = guid();
        _this.defaultValidationMessage = provideLocalizationService(_this);
        /**
         * @hidden
         */
        _this.focus = function () {
            if (_this._element) {
                _this._element.focus();
            }
        };
        _this.dummyInput = function (value) {
            /* Dummy component to support forms */
            return (React.createElement("input", { type: "checkbox", checked: _this.props.checked, ref: function (el) {
                    _this._input = el;
                }, tabIndex: -1, "aria-hidden": true, value: value, style: { opacity: 0, width: 1, border: 0, zIndex: -1, position: 'absolute', left: '50%' }, onChange: noop }));
        };
        _this.handleClick = function (event) {
            if (_this.eventTimeStamp === event.timeStamp) {
                // This is guard against the case when wrapped in label, click event is emmited twice
                return;
            }
            _this.eventTimeStamp = event.timeStamp;
            _this.toggle(!_this.value, event);
        };
        _this.handleKeyDown = function (event) {
            if (_this.props.disabled) {
                return;
            }
            var keyCode = event.keyCode;
            if (keyCode === Keys.space || keyCode === Keys.enter) {
                _this.toggle(!_this.value, event);
                event.preventDefault();
            }
        };
        _this.handleWrapperFocus = function (event) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ focused: true });
            var onFocus = _this.props.onFocus;
            if (onFocus) {
                onFocus.call(undefined, event);
            }
        };
        _this.handleWrapperBlur = function (event) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ focused: false });
            var onBlur = _this.props.onBlur;
            if (onBlur) {
                onBlur.call(undefined, event);
            }
        };
        validatePackage(packageMetadata);
        _this.state = {
            checked: props.defaultChecked || SwitchWithoutContext.defaultProps.defaultChecked,
            focused: false
        };
        return _this;
    }
    Object.defineProperty(SwitchWithoutContext.prototype, "value", {
        /**
         * Gets the value of the Switch.
         */
        get: function () {
            return this.valueDuringOnChange !== undefined
                ? this.valueDuringOnChange
                : this.props.checked !== undefined
                    ? this.props.checked
                    : this.state.checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchWithoutContext.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchWithoutContext.prototype, "actionElement", {
        /**
         * @hidden
         */
        get: function () {
            return this._wrapper;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchWithoutContext.prototype, "name", {
        /**
         * Gets the `name` property of the Switch.
         */
        get: function () {
            return this.props.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchWithoutContext.prototype, "validity", {
        /**
         * Represents the validity state into which the Switch is set.
         */
        get: function () {
            var customError = this.props.validationMessage !== undefined;
            var isValid = this.props.valid !== undefined ?
                this.props.valid :
                !this.props.required ?
                    true :
                    this.value ? true : false;
            var valid = this.props.valid !== undefined ? this.props.valid : isValid;
            return {
                customError: customError,
                valid: valid,
                valueMissing: this.value === null
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchWithoutContext.prototype, "validityStyles", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.validityStyles !== undefined
                ? this.props.validityStyles
                : SwitchWithoutContext.defaultProps.validityStyles;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchWithoutContext.prototype, "required", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.required !== undefined
                ? this.props.required
                : SwitchWithoutContext.defaultProps.required;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    SwitchWithoutContext.prototype.componentDidMount = function () {
        this.setValidity();
        // Due to dynamic dir calculation
        this.forceUpdate();
    };
    /**
     * @hidden
     */
    SwitchWithoutContext.prototype.componentDidUpdate = function () {
        this.setValidity();
    };
    /**
     * @hidden
     */
    SwitchWithoutContext.prototype.render = function () {
        var _a, _b, _c;
        var _this = this;
        var focused = this.state.focused;
        var _d = this.props, dir = _d.dir, disabled = _d.disabled, trackRounded = _d.trackRounded, thumbRounded = _d.thumbRounded, size = _d.size, id = _d.id, offLabel = _d.offLabel, onLabel = _d.onLabel, tabIndex = _d.tabIndex;
        this.dir = dir || (this._wrapper && getComputedStyle(this._wrapper).direction) || undefined;
        var isValid = !this.validityStyles || this.validity.valid;
        var switchClassName = classNames('k-switch', (_a = {},
            _a["k-switch-".concat(kendoThemeMaps.sizeMap[size] || size)] = size,
            _a["k-rounded-".concat(kendoThemeMaps.roundedMap[trackRounded] || trackRounded)] = trackRounded,
            _a['k-switch-on'] = this.value,
            _a['k-switch-off'] = !this.value,
            _a['k-focus'] = focused,
            _a['k-disabled'] = disabled,
            _a['k-invalid'] = !isValid,
            _a), this.props.className);
        var ariaAttributes = {
            'aria-checked': this.value,
            'aria-disabled': disabled || undefined
        };
        return (React.createElement("span", { ref: function (span) {
                _this._wrapper = span;
            }, className: switchClassName, dir: this.dir, onKeyDown: this.handleKeyDown, onClick: this.handleClick, onBlur: this.handleWrapperBlur, onFocus: this.handleWrapperFocus },
            React.createElement("span", __assign({ className: classNames('k-switch-track', (_b = {},
                    _b["k-rounded-".concat(kendoThemeMaps.roundedMap[trackRounded] || trackRounded)] = trackRounded,
                    _b)), id: id || this._id, role: 'switch' }, ariaAttributes, { "aria-labelledby": this.props.ariaLabelledBy, "aria-describedby": this.props.ariaDescribedBy, ref: function (span) {
                    _this._element = span;
                }, tabIndex: getTabIndex(tabIndex, disabled, undefined), accessKey: this.props.accessKey }),
                this.dummyInput(this.value),
                React.createElement("span", { className: 'k-switch-label-on' }, onLabel),
                React.createElement("span", { className: 'k-switch-label-off' }, offLabel)),
            React.createElement("span", { className: 'k-switch-thumb-wrap' },
                React.createElement("span", { className: classNames('k-switch-thumb', (_c = {},
                        _c["k-rounded-".concat(thumbRounded)] = thumbRounded,
                        _c)) }))));
    };
    SwitchWithoutContext.displayName = 'Switch';
    /**
     * @hidden
     */
    SwitchWithoutContext.propTypes = {
        accessKey: PropTypes.string,
        checked: PropTypes.bool,
        className: PropTypes.string,
        disabled: PropTypes.bool,
        defaultChecked: PropTypes.bool,
        size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
        trackRounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
        thumbRounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
        dir: PropTypes.string,
        id: PropTypes.string,
        ariaLabelledBy: PropTypes.string,
        ariaDescribedBy: PropTypes.string,
        offLabel: PropTypes.string,
        required: PropTypes.bool,
        tabIndex: PropTypes.number,
        valid: PropTypes.bool,
        validate: PropTypes.bool,
        validationMessage: PropTypes.string,
        onBlur: PropTypes.any,
        onChange: PropTypes.any,
        onFocus: PropTypes.any,
        onLabel: PropTypes.string
    };
    /**
     * @hidden
     */
    SwitchWithoutContext.defaultProps = {
        disabled: false,
        defaultChecked: false,
        size: 'medium',
        trackRounded: 'full',
        thumbRounded: 'full',
        offLabel: 'OFF',
        onBlur: noop,
        onFocus: noop,
        onLabel: 'ON',
        required: false,
        validityStyles: true
    };
    return SwitchWithoutContext;
}(React.Component));
export { SwitchWithoutContext };
/**
 * Represents the PropsContext of the `Switch` component.
 * Used for global configuration of all `Switch` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export var SwitchPropsContext = createPropsContext();
/* eslint-disable @typescript-eslint/no-redeclare -- intentionally naming the component the same as the type */
/**
 * Represents the [KendoReact Switch component]({% slug overview_switch %}).
 *
 * Accepts properties of type [SwitchProps]({% slug api_inputs_switchprops %}).
 * Obtaining the `ref` returns an object of type [SwitchHandle]({% slug api_inputs_switchhandle %}).
 */
export var Switch = withPropsContext(SwitchPropsContext, SwitchWithoutContext);
Switch.displayName = 'KendoReactSwitch';
