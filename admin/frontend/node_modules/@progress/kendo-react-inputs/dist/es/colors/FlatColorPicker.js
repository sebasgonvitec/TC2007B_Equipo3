import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, validatePackage, getTabIndex } from '@progress/kendo-react-common';
import { ButtonGroup, Button } from '@progress/kendo-react-buttons';
import { ColorPalette, ColorGradient } from '../main';
import { packageMetadata } from '../package-metadata';
import { messages, flatColorPickerApplyBtn, flatColorPickerCancelBtn } from '../messages';
;
;
/**
 * Represents the FlatColorPicker component.
 */
export var FlatColorPicker = React.forwardRef(function (props, ref) {
    validatePackage(packageMetadata);
    var target = React.useRef(null);
    var flatColorPickerRef = React.useRef(null);
    var colorGradientRef = React.useRef(null);
    var _a = React.useState((props.view || 'ColorGradient') === 'ColorGradient'), colorGradientView = _a[0], setColorGradientView = _a[1];
    var _b = React.useState('rgba(255, 255, 255, 1)'), colorValue = _b[0], setColorValue = _b[1];
    var _c = React.useState('rgba(255, 255, 255, 1)'), prevColor = _c[0], setPrevColor = _c[1];
    var focus = React.useCallback(function () {
        if (target.current) {
            target.current.focus();
        }
    }, [target]);
    React.useImperativeHandle(target, function () { return ({
        element: flatColorPickerRef.current,
        focus: focus,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleViewChange = React.useCallback(function (viewType) {
        if ((viewType === 'ColorGradient' && !colorGradientView) || (viewType === 'ColorPalette' && colorGradientView)) {
            setColorGradientView(!colorGradientView);
        }
    }, [colorGradientView]);
    var handleResetColor = React.useCallback(function () {
        setColorValue('rgba(255, 255, 255, 1)');
    }, []);
    var handleColorChange = React.useCallback(function (event) {
        setColorValue(event.value);
    }, []);
    var handleApplyBtnClick = React.useCallback(function () {
        setPrevColor(colorValue);
    }, [colorValue]);
    var handleCancelBtnClick = React.useCallback(function () {
        setPrevColor('rgba(255, 255, 255, 1)');
    }, []);
    var handlePrevColorClick = React.useCallback(function () {
        setColorValue(prevColor);
    }, [prevColor]);
    var handleFocus = React.useCallback(function () {
        if (flatColorPickerRef.current) {
            flatColorPickerRef.current.focus();
        }
    }, [flatColorPickerRef]);
    var handleFlatColorPickerBlur = React.useCallback(function () {
        setPrevColor(colorValue);
    }, [colorValue]);
    return (React.createElement("div", { id: props.id, style: props.style, ref: flatColorPickerRef, tabIndex: getTabIndex(props.tabIndex, props.disabled), className: classNames('k-flatcolorpicker k-coloreditor', {
            'k-disabled': props.disabled
        }, props.className), onBlur: handleFlatColorPickerBlur },
        React.createElement(React.Fragment, null,
            props.header ||
                React.createElement("div", { className: "k-coloreditor-header k-hstack" },
                    React.createElement("div", { className: "k-coloreditor-header-actions k-hstack" },
                        React.createElement(ButtonGroup, null,
                            React.createElement(Button, { type: "button", togglable: true, fillMode: 'flat', selected: colorGradientView, onClick: function () { return handleViewChange('ColorGradient'); } },
                                React.createElement("span", { className: "k-icon k-i-color-canvas" })),
                            React.createElement(Button, { type: "button", togglable: true, fillMode: 'flat', selected: !colorGradientView, onClick: function () { return handleViewChange('ColorPalette'); } },
                                React.createElement("span", { className: "k-icon k-i-palette" })))),
                    React.createElement("div", { className: "k-spacer" }),
                    React.createElement("div", { className: "k-coloreditor-header-actions k-hstack" },
                        (props.showClearButton && defaultProps.showClearButton) &&
                            React.createElement(Button, { type: "button", fillMode: 'flat', onClick: handleResetColor },
                                React.createElement("span", { className: "k-icon k-i-droplet-slash" })),
                        (props.showPreview && defaultProps.showPreview) &&
                            React.createElement("div", { className: "k-coloreditor-preview k-vstack" },
                                React.createElement("span", { className: "k-coloreditor-preview-color k-color-preview", style: { background: colorValue } }),
                                React.createElement("span", { className: "k-coloreditor-current-color k-color-preview", style: { background: prevColor }, onClick: handlePrevColorClick })))),
            React.createElement("div", { className: "k-coloreditor-views k-vstack" }, colorGradientView
                ? React.createElement(ColorGradient, { ref: colorGradientRef, value: colorValue, onChange: handleColorChange, onFocus: handleFocus })
                : React.createElement(ColorPalette, { value: colorValue, onChange: handleColorChange, onFocus: handleFocus })),
            (props.showButtons && defaultProps.showButtons) &&
                React.createElement("div", { className: "k-coloreditor-footer k-actions k-actions-end" },
                    React.createElement(Button, { type: "button", className: "k-coloreditor-cancel", onClick: handleCancelBtnClick }, messages[flatColorPickerCancelBtn]),
                    React.createElement(Button, { type: "button", className: "k-coloreditor-apply k-primary", onClick: handleApplyBtnClick }, messages[flatColorPickerApplyBtn])))));
});
var propTypes = {
    id: PropTypes.string,
    value: PropTypes.string,
    view: PropTypes.string,
    header: PropTypes.elementType,
    showClearButton: PropTypes.bool,
    showPreview: PropTypes.bool,
    showButtons: PropTypes.bool
};
var defaultProps = {
    showClearButton: true,
    showPreview: true,
    showButtons: true
};
FlatColorPicker.displayName = 'KendoFlatColorPicker';
// TODO: delete casting when @types/react is updated!
FlatColorPicker.propTypes = propTypes;
FlatColorPicker.defaultProps = defaultProps;
