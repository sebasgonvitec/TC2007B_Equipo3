import * as React from 'react';
import * as PropTypes from 'prop-types';
import { DraggableDragEvent } from '@progress/kendo-react-common';
import { SliderChangeEvent, NumericTextBoxChangeEvent } from './../main';
import { HSVA } from './models/hsva';
import { RGBA } from './models/rgba';
import { ColorGradientProps } from './interfaces/ColorGradientProps';
/**
 * @hidden
 */
export interface ColorGradientState {
    hsva: HSVA;
    backgroundColor: string;
    rgba: RGBA;
    hex: string;
    isFirstRender: boolean;
    guid: string;
}
/** @hidden */
export declare class ColorGradientWithoutContext extends React.Component<ColorGradientProps, ColorGradientState> {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        defaultValue: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        opacity: PropTypes.Requireable<boolean>;
        backgroundColor: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        style: PropTypes.Requireable<any>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        opacity: boolean;
    };
    /**
     * @hidden
     */
    wrapper: HTMLDivElement | null;
    private gradientWrapper;
    private alphaSlider;
    constructor(props: ColorGradientProps);
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: ColorGradientProps, state: ColorGradientState): {
        hsva: any;
        backgroundColor: string;
        rgba: any;
        hex: any;
    } | null;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(_: ColorGradientProps, prevState: ColorGradientState): void;
    /**
     * @hidden
     */
    onHexChange: (hex: string, value: string, event: any) => void;
    /**
     * @hidden
     */
    onRgbaChange: (rgba: RGBA, event: NumericTextBoxChangeEvent) => void;
    /**
     * @hidden
     */
    onAlphaSliderChange: (event: SliderChangeEvent) => void;
    /**
     * @hidden
     */
    onHueSliderChange: (event: SliderChangeEvent) => void;
    /**
     * @hidden
     */
    onDrag: (e: DraggableDragEvent) => void;
    /**
     * @hidden
     */
    onRelease: () => void;
    /**
     * @hidden
     */
    onGradientWrapperClick: (event: React.MouseEvent<HTMLDivElement>) => void;
    /**
     * @hidden
     */
    renderRectangleDragHandle(): JSX.Element;
    /**
     * @hidden
     */
    changePosition: (event: any) => void;
    /**
     * @hidden
     */
    handleHsvaChange(hsva: HSVA, syntheticEvent: React.SyntheticEvent<any>, nativeEvent: any): void;
    /**
     * @hidden
     */
    dispatchChangeEvent(value: string, syntheticEvent: React.SyntheticEvent<any>, nativeEvent: any): void;
    /**
     * @hidden
     */
    onFocus: (nativeEvent: any) => void;
    /**
     * @hidden
     */
    static getStateFromValue(value: string, componentGuid?: string): {
        hsva: any;
        backgroundColor: string;
        rgba: any;
        hex: any;
    };
    /**
     * @hidden
     */
    setAlphaSliderBackground(backgroundColor: string): void;
    /**
     * @hidden
     */
    get isUncontrolled(): boolean;
    /**
     * @hidden
     */
    getGradientRectMetrics(): ClientRect;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
}
/**
 * Represents the PropsContext of the `ColorGradient` component.
 * Used for global configuration of all `ColorGradient` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const ColorGradientPropsContext: React.Context<(p: ColorGradientProps) => ColorGradientProps>;
/**
 * Represent the `ref` of the ColorGradient component.
 */
export interface ColorGradientHandle extends Pick<ColorGradientWithoutContext, keyof ColorGradientWithoutContext> {
}
/** @hidden */
export declare type ColorGradient = ColorGradientHandle;
/**
 * Represents the [KendoReact ColorGradient component]({% slug overview_colorgradient %}).
 *
 * Accepts properties of type [ColorGradientProps]({% slug api_inputs_colorgradientprops %}).
 * Obtaining the `ref` returns an object of type [ColorGradientHandle]({% slug api_inputs_colorgradienthandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <ColorGradient />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const ColorGradient: React.ForwardRefExoticComponent<ColorGradientProps & React.RefAttributes<any>>;
