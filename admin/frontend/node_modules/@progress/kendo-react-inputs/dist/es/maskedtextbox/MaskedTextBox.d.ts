import * as React from 'react';
import * as PropTypes from 'prop-types';
import { MaskedTextBoxProps } from './MaskedTextBoxProps';
import { FormComponent, FormComponentValidity } from '@progress/kendo-react-common';
/**
 * @hidden
 */
interface MaskedTextBoxState {
    focused?: boolean;
    value?: string;
}
/** @hidden */
export declare class MaskedTextBoxWithoutContext extends React.Component<MaskedTextBoxProps, MaskedTextBoxState> implements FormComponent {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        title: PropTypes.Requireable<string>;
        dir: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        width: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        tabIndex: PropTypes.Requireable<number>;
        accessKey: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        readonly: PropTypes.Requireable<boolean>;
        prompt: PropTypes.Requireable<string>;
        promptPlaceholder: PropTypes.Requireable<string>;
        includeLiterals: PropTypes.Requireable<boolean>;
        maskValidation: PropTypes.Requireable<boolean>;
        mask: PropTypes.Requireable<string>;
        rules: (props: MaskedTextBoxProps, propName: string, componentName: string) => Error | null;
        selection: PropTypes.Requireable<PropTypes.InferProps<{
            start: PropTypes.Validator<number>;
            end: PropTypes.Validator<number>;
        }>>;
        name: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        valid: PropTypes.Requireable<boolean>;
        validityStyles: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        size: PropTypes.Requireable<"small" | "medium" | "large" | null | undefined>;
        rounded: PropTypes.Requireable<"small" | "medium" | "full" | "large" | null | undefined>;
        fillMode: PropTypes.Requireable<"flat" | "outline" | "solid" | null | undefined>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        prompt: string;
        promptPlaceholder: string;
        includeLiterals: boolean;
        maskValidation: boolean;
        rules: {
            [key: string]: RegExp;
        };
        required: boolean;
        validityStyles: boolean;
        size: "small" | "medium" | "large" | null | undefined;
        rounded: "small" | "medium" | "full" | "large" | null | undefined;
        fillMode: "flat" | "outline" | "solid" | null | undefined;
    };
    /**
     * @hidden
     */
    state: MaskedTextBoxState;
    private _inputId;
    private _service;
    private _isPasted;
    private _selection;
    private _input;
    private _valueDuringOnChange?;
    constructor(props: MaskedTextBoxProps);
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * Gets the element of the MaskedTextBox.
     *
     * @return - An `HTMLInputElement`.
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *     constructor(props) {
     *         super(props);
     *     }
     *     element = null;
     *     render() {
     *         return (
     *             <div>
     *                 <MaskedTextBox
     *                     ref={(component) =>
     *                         this.element = component ? component.element : null}
     *                 />
     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>
     *             </div>
     *         );
     *     }
     * }
     *
     * ReactDOM.render(
     *     <App />,
     *     document.getElementsByTagName('my-app')[0]
     * );
     * ```
     */
    get element(): HTMLInputElement | null;
    /**
     * Gets the value with the mask of the MaskedTextBox.
     */
    get value(): string;
    /**
     * Gets the raw value without the mask of the MaskedTextBox.
     */
    get rawValue(): string;
    /**
     * Represents the validity state into which the MaskedTextBox is set.
     */
    get validity(): FormComponentValidity;
    /**
     * @hidden
     */
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    protected get required(): boolean;
    /**
     * Gets the `name` property of the MaskedTextBox.
     */
    get name(): string | undefined;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: MaskedTextBoxProps, prevState: MaskedTextBoxState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private pasteHandler;
    private onChangeHandler;
    private focusHandler;
    private blurHandler;
    private triggerOnChange;
    private updateService;
    private get rules();
    private setValidity;
}
/**
 * Represents the PropsContext of the `MaskedTextBox` component.
 * Used for global configuration of all `MaskedTextBox` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const MaskedTextBoxPropsContext: React.Context<(p: MaskedTextBoxProps) => MaskedTextBoxProps>;
/**
 * Represent the `ref` of the MaskedTextBox component.
 */
export interface MaskedTextBoxHandle extends Pick<MaskedTextBoxWithoutContext, keyof MaskedTextBoxWithoutContext> {
    /**
     * Gets the element of the MaskedTextBox.
     *
     * ```jsx
     * class App extends React.Component {
     * constructor(props) {
     *  super(props);
     * }
     * element = null;
     * render() {
     *  return (
     *      <div>
     *          <MaskedTextBox
     *              ref={(component) =>
     *                  this.element = component ? component.element : null}
     *          />
     *          <button onClick={() => console.log(this.element)}>console.log the element</button>
     *      </div>
     *  );
     * }
     * }
     *
     * ReactDOM.render(
     * <App />,
     * document.getElementsByTagName('my-app')[0]
     * );
     * ```
     */
    element: HTMLInputElement | null;
    /**
     * Gets the `name` property of the MaskedTextBox.
     */
    name: string | undefined;
    /**
     * Gets the raw value without the mask of the MaskedTextBox.
     */
    rawValue: string;
    /**
     * Represents the validity state into which the MaskedTextBox is set.
     */
    validity: FormComponentValidity;
    /**
     * Gets the value with the mask of the MaskedTextBox.
     */
    value: string;
}
/** @hidden */
export declare type MaskedTextBox = MaskedTextBoxHandle;
/**
 * Represents the props of the [KendoReact MaskedTextBox component]({% slug overview_maskedtextbox %}).
 *
 * Accepts properties of type [MaskedTextBoxProps]({% slug api_inputs_maskedtextboxprops %}).
 * Obtaining the `ref` returns an object of type [MaskedTextBoxHandle]({% slug api_inputs_maskedtextboxhandle %}).
 */
export declare const MaskedTextBox: React.ForwardRefExoticComponent<MaskedTextBoxProps & React.RefAttributes<any>>;
export {};
