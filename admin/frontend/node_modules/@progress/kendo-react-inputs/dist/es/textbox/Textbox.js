var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, kendoThemeMaps, useAsyncFocusBlur, useCustomComponent, validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
;
/**
 * Represents the [KendoReact TextBox component]({% slug overview_textbox %}).
 */
export var TextBox = React.forwardRef(function (props, ref) {
    var _a;
    validatePackage(packageMetadata);
    var element = React.useRef(null);
    var target = React.useRef(null);
    var valueDuringChangeRef = React.useRef();
    var valueGetter = React.useCallback(function () {
        var _a;
        if (valueDuringChangeRef.current !== undefined) {
            return valueDuringChangeRef.current;
        }
        else {
            return (_a = element.current) === null || _a === void 0 ? void 0 : _a.value;
        }
    }, []);
    React.useImperativeHandle(target, function () {
        var result = {
            element: element.current
        };
        Object.defineProperty(result, 'value', { get: valueGetter });
        return result;
    });
    React.useImperativeHandle(ref, function () { return target.current; });
    var _b = props, size = _b.size, fillMode = _b.fillMode, rounded = _b.rounded, className = _b.className, dir = _b.dir, style = _b.style, _c = _b.prefix, prefix = _c === void 0 ? defaultProps.prefix : _c, _d = _b.suffix, suffix = _d === void 0 ? defaultProps.suffix : _d, valid = _b.valid, 
    // Destruct to avoid warning when used inside a form field
    _modified = _b.modified, _touched = _b.touched, _visited = _b.visited, other = __rest(_b, ["size", "fillMode", "rounded", "className", "dir", "style", "prefix", "suffix", "valid", "modified", "touched", "visited"]);
    var Prefix = useCustomComponent(prefix)[0];
    var Suffix = useCustomComponent(suffix)[0];
    var _e = React.useState(false), focused = _e[0], setFocused = _e[1];
    var handleFocus = function (_) {
        setFocused(true);
    };
    var handleBlur = function (_) {
        setFocused(false);
    };
    var handleChange = React.useCallback(function (event) {
        valueDuringChangeRef.current = event.target.value;
        if (props.onChange) {
            props.onChange.call(undefined, {
                syntheticEvent: event,
                nativeEvent: event.nativeEvent,
                value: event.target.value,
                target: target.current
            });
        }
        valueDuringChangeRef.current = undefined;
    }, [props.onChange]);
    var _f = useAsyncFocusBlur({
        onFocus: handleFocus,
        onBlur: handleBlur,
        onSyncFocus: props.onFocus,
        onSyncBlur: props.onBlur
    }), onFocus = _f.onFocus, onBlur = _f.onBlur;
    return (React.createElement("span", { style: style, dir: dir, className: classNames('k-input', (_a = {},
            _a["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size,
            _a["k-input-".concat(fillMode)] = fillMode,
            _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded,
            _a), {
            'k-focus': focused,
            'k-required': props.required,
            'k-disabled': props.disabled,
            'k-invalid': props.valid === false
        }, className), onFocus: onFocus, onBlur: onBlur },
        React.createElement(Prefix, null),
        React.createElement("input", __assign({ ref: element, className: "k-input-inner" }, other, { onChange: handleChange })),
        React.createElement(Suffix, null)));
});
var defaultProps = {
    prefix: function (_) { return null; },
    suffix: function (_) { return null; },
    size: 'medium',
    rounded: 'medium',
    fillMode: 'solid'
};
TextBox.propTypes = {
    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
    fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])
};
TextBox.displayName = 'KendoReactTextBoxComponent';
TextBox.defaultProps = defaultProps;
