/// <reference types="react" />
import { FormComponentProps } from '@progress/kendo-react-common';
import { TextAreaBlurEvent } from './TextAreaBlurEvent';
import { TextAreaChangeEvent } from './TextAreaChangeEvent';
import { TextAreaFocusEvent } from './TextAreaFocusEvent';
/**
 * @hidden
 */
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/**
 * Represents the props of the [KendoReact TextArea component]({% slug overview_textarea %}).
 */
export interface TextAreaProps extends FormComponentProps, Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'defaultValue' | 'onChange' | 'onFocus' | 'onBlur'> {
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Specifies if the textarea element will resize its height automatically ([see example]({% slug sizing_textarea %})).
     * Defaults to `false`.
     */
    autoSize?: boolean;
    /**
     * Specifies a list of CSS classes that will be added to the TextArea.
     */
    className?: string;
    /**
     * The default value of the TextArea ([see example]({% slug default_textarea %})).
     */
    defaultValue?: string | string[] | number;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Specifies if the TextArea is disabled ([see example]({% slug disabled_textarea %})).
     */
    disabled?: boolean;
    /**
     * Sets the read-only state of the TextArea.
     */
    readOnly?: boolean;
    /**
     * Specifies an exact height size for the TextArea to take ([see example]({% slug sizing_textarea %})).
     */
    rows?: number;
    /**
     * Sets the `id` of the TextArea.
     */
    id?: string;
    /**
     * Specifies the `name` property of the `textarea` DOM element.
     *
     * This property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.
     */
    name?: string;
    /**
     * The hint that is displayed when the TextArea is empty.
     */
    placeholder?: string;
    /**
     * Sets additional CSS styles to the TextArea.
     */
    style?: React.CSSProperties;
    /**
     * Sets the `tabIndex` property of the TextArea.
     * Defaults to `0`.
     */
    tabIndex?: number;
    /**
     * Sets the value to be submitted ([see example]({% slug controlled_textarea %})).
     */
    value?: string | string[] | number;
    /**
     * The event handler that will be fired when the changes the selected value.
     */
    onChange?: (event: TextAreaChangeEvent) => void;
    /**
     * The event handler that will be fired when TextArea is focused.
     */
    onFocus?: (event: TextAreaFocusEvent) => void;
    /**
     * The event handler that will be fired when TextArea is blurred.
     */
    onBlur?: (event: TextAreaBlurEvent) => void;
    /**
     * Configures the `size` of the TextArea.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the TextArea.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the TextArea.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
}
export {};
