var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import DropDownBase from '../common/DropDownBase';
import { guid, classNames, Keys, createPropsContext, withPropsContext, kendoThemeMaps } from '@progress/kendo-react-common';
import { FloatingLabel } from '@progress/kendo-react-labels';
import { areSame, itemIndexStartsWith, getItemIndexByText, getItemValue, isPresent, suggestValue } from '../common/utils';
import SearchBar from '../common/SearchBar';
import ListContainer from '../common/ListContainer';
import List from '../common/List';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
import ClearButton from '../common/ClearButton';
import { Button } from '@progress/kendo-react-buttons';
var VALIDATION_MESSAGE = 'Please enter a valid value!';
var sizeMap = kendoThemeMaps.sizeMap, roundedMap = kendoThemeMaps.roundedMap;
/** @hidden */
var ComboBoxWithoutContext = /** @class */ (function (_super) {
    __extends(ComboBoxWithoutContext, _super);
    function ComboBoxWithoutContext(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.state = {};
        _this.base = new DropDownBase(_this);
        _this._element = null;
        _this._inputId = guid();
        _this._suggested = '';
        _this._input = null;
        _this.itemHeight = 0;
        /**
         * @hidden
         */
        _this.focus = function () {
            if (_this._input) {
                _this._input.focus();
            }
        };
        /**
         * @hidden
         */
        _this.handleItemSelect = function (index, state) {
            var _a = _this.props, _b = _a.data, data = _b === void 0 ? [] : _b, virtual = _a.virtual, dataItemKey = _a.dataItemKey;
            var skip = virtual ? virtual.skip : 0;
            var item = data[index - skip];
            var newSelected = !areSame(item, _this.value, dataItemKey);
            _this.triggerOnChange(item, state);
            if (_this.state.text !== undefined) {
                state.data.text = undefined;
            }
            if (newSelected) {
                _this.base.triggerPageChangeCornerItems(item, state);
            }
        };
        _this.componentRef = function (element) {
            _this._element = element;
            _this.base.wrapper = element;
        };
        _this.toggleBtnClick = function (event) {
            var state = _this.base.initState();
            state.syntheticEvent = event;
            _this.base.togglePopup(state);
            _this.applyState(state);
        };
        _this.onScroll = function (event) {
            var _a = _this.base, vs = _a.vs, list = _a.list;
            vs.scrollHandler(event);
            var _b = _this.props, _c = _b.data, data = _c === void 0 ? [] : _c, groupField = _b.groupField;
            if (!groupField || !data.length) {
                return;
            }
            var itemHeight = _this.itemHeight =
                _this.itemHeight || (vs.enabled ? vs.itemHeight : (list ? list.children[0].offsetHeight : 0));
            var target = event.target;
            var scrollTop = target.scrollTop - (vs.skip * itemHeight);
            var group = data[0][groupField];
            for (var i = 1; i < data.length; i++) {
                if (itemHeight * i > scrollTop) {
                    break;
                }
                if (data[i] && data[i][groupField]) {
                    group = data[i][groupField];
                }
            }
            if (group !== _this.state.group) {
                _this.setState({
                    group: group
                });
                if (_this.props.onGroupScroll) {
                    _this.props.onGroupScroll.call(undefined, { group: group });
                }
            }
        };
        _this.handleItemClick = function (index, event) {
            _this.base.handleItemClick(index, event);
            _this._valueDuringOnChange = undefined;
        };
        _this.handleBlur = function (event) {
            if (_this.state.focused) {
                var state = _this.base.initState();
                state.data.focused = false;
                state.events.push({ type: 'onBlur' });
                state.syntheticEvent = event;
                _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
            }
        };
        _this.onInputKeyDown = function (event) {
            var keyCode = event.keyCode;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var state = _this.base.initState();
            state.syntheticEvent = event;
            if (!event.altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
                event.preventDefault();
                _this.onNavigate(state, keyCode);
                _this.applyState(state);
                return;
            }
            var togglePopup = function () {
                event.preventDefault();
                _this.base.togglePopup(state);
                _this.applyState(state);
            };
            if (opened) {
                if (event.altKey && keyCode === Keys.up) {
                    togglePopup();
                }
                else if (keyCode === Keys.enter) {
                    event.preventDefault();
                    _this.applyValueOnEnter(event.currentTarget.value, state);
                }
                else if (keyCode === Keys.esc) {
                    _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
                }
            }
            else if (event.altKey && keyCode === Keys.down) {
                togglePopup();
            }
        };
        _this.inputOnChange = function (event) {
            var state = _this.base.initState();
            state.syntheticEvent = event;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var input = event.currentTarget;
            var value = input.value;
            if (_this.props.suggest) {
                var selectionAtEnd = input.selectionEnd === value.length;
                var prevText = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
                if (!isPresent(prevText)) {
                    prevText = getItemValue(_this.value, _this.props.textField) || '';
                }
                var deletedSuggestion = prevText && prevText === value;
                var deleting = prevText && prevText.length > value.length;
                if (deletedSuggestion || deleting || !selectionAtEnd) {
                    _this._suggested = '';
                }
                else {
                    _this.suggestValue(value);
                }
            }
            if (_this.props.filter === undefined) {
                state.data.text = value;
            }
            if (_this.state.focusedItem !== undefined) {
                state.data.focusedItem = undefined;
            }
            if (!opened) {
                _this.base.togglePopup(state);
            }
            _this.base.filterChanged(value, state);
            _this.applyState(state);
        };
        _this.clearButtonClick = function (event) {
            var state = _this.base.initState();
            state.syntheticEvent = event;
            event.stopPropagation();
            _this._suggested = '';
            _this.base.filterChanged('', state);
            if (_this.props.filter === undefined && _this.state.text !== undefined) {
                state.data.text = undefined;
            }
            _this.triggerOnChange(null, state);
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            if (opened) {
                _this.base.togglePopup(state);
            }
            _this.applyState(state);
        };
        _this.setValidity = function () {
            if (_this._input && _this._input.setCustomValidity) {
                _this._input.setCustomValidity(_this.validity.valid
                    ? ''
                    : _this.props.validationMessage || VALIDATION_MESSAGE);
            }
        };
        validatePackage(packageMetadata);
        return _this;
    }
    Object.defineProperty(ComboBoxWithoutContext.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext.prototype, "value", {
        /**
         * The value of the ComboBox.
         */
        get: function () {
            if (this._valueDuringOnChange !== undefined) {
                return this._valueDuringOnChange;
            }
            else if (this.props.value !== undefined) {
                return this.props.value;
            }
            else if (this.state.value !== undefined) {
                return this.state.value;
            }
            else if (this.props.defaultValue !== undefined) {
                return this.props.defaultValue;
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext.prototype, "index", {
        /**
         * The index of the selected item.
         */
        get: function () {
            var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey;
            var value = this.value;
            // TO DO: deprecate it!
            return data.findIndex(function (i) { return areSame(i, value, dataItemKey); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext.prototype, "name", {
        /**
         * Gets the `name` property of the ComboBox.
         */
        get: function () {
            return this.props.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext.prototype, "validity", {
        /**
         * Represents the validity state into which the component is set.
         */
        get: function () {
            // remove the undefined check when this is fixed:
            // https://github.com/telerik/kendo-react-private/issues/252
            var customError = this.props.validationMessage !== undefined;
            var isValid = (!this.required
                || (this.value !== null && this.value !== '' && this.value !== undefined));
            var valid = this.props.valid !== undefined ? this.props.valid : isValid;
            return {
                customError: customError,
                valid: valid,
                valueMissing: this.value === null
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext.prototype, "validityStyles", {
        get: function () {
            return this.props.validityStyles !== undefined
                ? this.props.validityStyles
                : ComboBoxWithoutContext.defaultProps.validityStyles;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext.prototype, "required", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.required !== undefined
                ? this.props.required
                : ComboBoxWithoutContext.defaultProps.required;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    ComboBoxWithoutContext.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey, virtual = _a.virtual;
        var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;
        var opening = !prevOpened && opened;
        var selectedItem = this.value;
        this._valueOnDidUpdate = selectedItem;
        if (virtual && virtual.total !== prevTotal) {
            this.base.vs.calcScrollElementHeight();
            this.base.vs.reset();
        }
        else {
            var prevSelectedItem = prevProps.value !== undefined ? prevProps.value : prevState.value;
            var selectedItemIndex = data.findIndex(function (i) { return areSame(i, selectedItem, dataItemKey); });
            var selectedItemChanged = !areSame(prevSelectedItem, selectedItem, dataItemKey);
            if (opening && virtual) {
                this.base.scrollToVirtualItem(virtual, selectedItemIndex);
            }
            else if (opening && !virtual) {
                this.base.scrollToItem(selectedItemIndex);
            }
            else if (opened && prevOpened && selectedItem && selectedItemChanged) {
                this.base.scrollToItem(selectedItemIndex);
            }
        }
        if (opening && this._input) {
            this._input.focus();
        }
        this.setValidity();
    };
    /**
     * @hidden
     */
    ComboBoxWithoutContext.prototype.componentDidMount = function () {
        this.base.didMount();
        this.setValidity();
    };
    /**
     * @hidden
     */
    ComboBoxWithoutContext.prototype.render = function () {
        var _a;
        var _b = this.props, dir = _b.dir, disabled = _b.disabled, _c = _b.clearButton, clearButton = _c === void 0 ? ComboBoxWithoutContext.defaultProps.clearButton : _c, label = _b.label, textField = _b.textField, className = _b.className, style = _b.style, loading = _b.loading, iconClassName = _b.iconClassName, virtual = _b.virtual, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode;
        var isValid = !this.validityStyles || this.validity.valid;
        var text = this.props.filter !== undefined ? this.props.filter : this.state.text;
        var selectedItemText = getItemValue(this.value, textField);
        var inputText = isPresent(text) ? text : selectedItemText;
        var renderClearButton = clearButton && (!!(inputText) || isPresent(this.value));
        var base = this.base;
        var vs = base.vs;
        var id = this.props.id || this._inputId;
        vs.enabled = virtual !== undefined;
        if (virtual !== undefined) {
            vs.skip = virtual.skip;
            vs.total = virtual.total;
            vs.pageSize = virtual.pageSize;
        }
        var combobox = (React.createElement("span", { className: classNames('k-combobox k-input', (_a = {},
                _a["k-input-".concat(sizeMap[size] || size)] = size,
                _a["k-rounded-".concat(roundedMap[rounded] || rounded)] = rounded,
                _a["k-input-".concat(fillMode)] = fillMode,
                _a['k-invalid'] = !isValid,
                _a['k-loading'] = loading,
                _a['k-required'] = this.required,
                _a['k-disabled'] = disabled,
                _a), className), ref: this.componentRef, style: !label ? style : __assign(__assign({}, style), { width: undefined }), dir: dir },
            this.renderSearchBar(inputText || '', id),
            renderClearButton && !loading && React.createElement(ClearButton, { onClick: this.clearButtonClick, key: "clearbutton" }),
            loading && React.createElement("span", { className: "k-icon k-i-loading k-input-loading-icon", key: "loading" }),
            React.createElement(Button, { tabIndex: -1, type: "button", icon: !iconClassName ? 'caret-alt-down' : undefined, iconClass: iconClassName, size: size, fillMode: fillMode, rounded: null, themeColor: 'base', className: "k-input-button", onClick: this.toggleBtnClick, onMouseDown: function (e) { return e.preventDefault(); } }),
            this.renderListContainer()));
        return label
            ? (React.createElement(FloatingLabel, { label: label, editorId: id, editorValue: inputText, editorValid: isValid, editorDisabled: disabled, style: { width: style ? style.width : undefined }, children: combobox }))
            : combobox;
    };
    /**
     * @hidden
     */
    ComboBoxWithoutContext.prototype.onNavigate = function (state, keyCode) {
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c;
        var text = this.props.filter ? this.props.filter : this.state.text;
        var focusedIndex = this.getFocusedIndex();
        var vs = this.base.vs;
        var value = this.value;
        this._suggested = '';
        if (focusedIndex !== -1 && !isPresent(value)) {
            this.handleItemSelect(focusedIndex, state);
        }
        else if (text === '') {
            this.handleItemSelect(0, state);
        }
        else {
            var currentIndex = virtual.skip + focusedIndex;
            var newIndex = this.base.navigation.navigate({
                keyCode: keyCode,
                current: currentIndex,
                max: (vs.enabled ? vs.total : data.length) - 1,
                min: 0
            });
            if (newIndex !== undefined) {
                this.handleItemSelect(newIndex, state);
            }
        }
    };
    ComboBoxWithoutContext.prototype.applyValueOnEnter = function (value, state) {
        var _a;
        var _b = this.props, _c = _b.data, data = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var currentValueText = getItemValue(this.value, textField);
        var valueIndex = currentValueText === value ?
            this.index : getItemIndexByText(data, value, textField);
        var itemSelected = valueIndex !== -1;
        var newSelected = undefined;
        this._suggested = '';
        if (itemSelected) { // typed text match item from list
            newSelected = data[valueIndex];
        }
        else {
            if (allowCustom) { // any custom text not in list
                newSelected = textField !== undefined ? (_a = {}, _a[textField] = value, _a) : value;
            }
            else {
                return this.selectFocusedItem(value, state);
            }
        }
        this.triggerOnChange(newSelected, state);
        if (opened) {
            this.base.togglePopup(state);
        }
        if (this.props.filter === undefined && this.state.text !== undefined) {
            state.data.text = undefined;
        }
        this.applyState(state);
    };
    ComboBoxWithoutContext.prototype.applyValueOnRejectSuggestions = function (text, state) {
        var _a;
        var _b = this.props, _c = _b.data, data = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var valueItemText = getItemValue(this.value, textField);
        this._suggested = '';
        if (text === valueItemText || (text === '' && !isPresent(valueItemText))) {
            if (opened) {
                this.base.togglePopup(state);
            }
            return this.applyState(state);
        }
        var valueIndex = getItemIndexByText(data, text, textField, true);
        var itemSelected = valueIndex !== -1;
        var newSelected = null;
        if (itemSelected) {
            newSelected = data[valueIndex];
        }
        else if (allowCustom) {
            newSelected = text ? (textField ? (_a = {}, _a[textField] = text, _a) : text) : null;
        }
        this.triggerOnChange(newSelected, state);
        if (this.state.text !== undefined) {
            state.data.text = undefined;
            this.base.filterChanged('', state);
        }
        if (opened) {
            this.base.togglePopup(state);
        }
        this.applyState(state);
    };
    ComboBoxWithoutContext.prototype.selectFocusedItem = function (text, state) {
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, _d = _a.focusedItemIndex, focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;
        var skip = virtual.skip;
        var focusedIndex = (text === '' && skip === 0) ? 0 :
            focusedItemIndex(data, text, textField);
        if (focusedIndex !== -1) {
            this.handleItemSelect(focusedIndex + skip, state);
        }
        else {
            this.triggerOnChange(null, state);
            if (this.state.text !== undefined) {
                state.data.text = undefined;
            }
        }
        if (opened) {
            this.base.togglePopup(state);
        }
        return this.applyState(state);
    };
    ComboBoxWithoutContext.prototype.renderListContainer = function () {
        var _a;
        var base = this.base;
        var _b = this.props, dir = _b.dir, header = _b.header, footer = _b.footer, _c = _b.data, data = _c === void 0 ? [] : _c, groupField = _b.groupField, size = _b.size, list = _b.list, virtual = _b.virtual;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var popupSettings = base.getPopupSettings();
        var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;
        var group = this.state.group;
        if (group === undefined && groupField !== undefined) {
            group = getItemValue(data[0], groupField);
        }
        return (React.createElement(ListContainer, { width: popupWidth, popupSettings: {
                animate: popupSettings.animate,
                anchor: this.element,
                show: opened,
                popupClass: classNames(popupSettings.popupClass, 'k-list-container'),
                className: popupSettings.className,
                appendTo: popupSettings.appendTo
            }, dir: dir !== undefined ? dir : this.base.dirCalculated, itemsCount: [data.length] },
            React.createElement("div", { className: classNames((_a = {},
                    _a['k-list'] = !list,
                    _a["k-list-".concat(sizeMap[size] || size)] = !list && size,
                    _a['k-virtual-list'] = virtual,
                    _a['k-data-table'] = list,
                    _a["k-table-".concat(sizeMap[size] || size)] = list && size,
                    _a)) },
                header && React.createElement("div", { className: "k-table-header" }, header),
                !list && group && React.createElement("div", { className: "k-list-group-sticky-header" }, group),
                this.renderList(),
                footer && React.createElement("div", { className: "k-list-footer" }, footer))));
    };
    ComboBoxWithoutContext.prototype.renderList = function () {
        var _a;
        var _this = this;
        var base = this.base;
        var _b = this.props, textField = _b.textField, dataItemKey = _b.dataItemKey, listNoDataRender = _b.listNoDataRender, itemRender = _b.itemRender, _c = _b.data, data = _c === void 0 ? [] : _c, _d = _b.virtual, virtual = _d === void 0 ? { skip: 0 } : _d;
        var popupSettings = base.getPopupSettings();
        var vs = base.vs;
        var skip = virtual.skip;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var translate = "translateY(".concat(vs.translate, "px)");
        var focusedIndex = opened ? this.getFocusedIndex() : undefined;
        var text = this.props.filter !== undefined ? this.props.filter : this.state.text;
        var selectedItemText = getItemValue(this.value, textField);
        var value = isPresent(text) && text !== selectedItemText ? null : this.value;
        var ListComponent = this.props.list || List;
        return (React.createElement(ListComponent, { id: base.listBoxId, virtual: Boolean(virtual), show: opened, data: data, focusedIndex: focusedIndex, value: value, textField: textField, valueField: dataItemKey, groupField: this.props.groupField, optionsGuid: base.guid, listRef: function (list) { vs.list = _this.base.list = list; _this.itemHeight = 0; }, wrapperStyle: { maxHeight: popupSettings.height }, wrapperCssClass: classNames('k-list-content', (_a = {},
                _a['k-list-scroller'] = !virtual,
                _a)), listStyle: vs.enabled ? { transform: translate } : undefined, key: "listkey", skip: skip, onClick: this.handleItemClick, itemRender: itemRender, noDataRender: listNoDataRender, onMouseDown: function (e) { return e.preventDefault(); }, onScroll: this.onScroll, wrapperRef: vs.scrollerRef, scroller: this.base.renderScrollElement() }));
    };
    ComboBoxWithoutContext.prototype.renderSearchBar = function (text, id) {
        var _this = this;
        var _a = this.props, placeholder = _a.placeholder, tabIndex = _a.tabIndex, disabled = _a.disabled, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var value = this.value;
        var selectedIndex = Math.max(0, data.findIndex(function (i) { return areSame(i, value, dataItemKey); }));
        if (this._suggested && !areSame(this._valueOnDidUpdate, value, dataItemKey)) {
            this._suggested = '';
        }
        return (React.createElement(SearchBar, { id: id, placeholder: placeholder, tabIndex: tabIndex || undefined, accessKey: this.props.accessKey, value: text + this._suggested, suggestedText: this._suggested, ref: function (el) { return _this._input = el && el.input; }, onKeyDown: this.onInputKeyDown, onChange: this.inputOnChange, onFocus: this.base.handleFocus, onBlur: this.handleBlur, disabled: disabled, expanded: opened, owns: this.base.listBoxId, activedescendant: "option-".concat(this.base.guid, "-").concat(selectedIndex + virtual.skip), role: "combobox", ariaLabelledBy: this.props.ariaLabelledBy, ariaDescribedBy: this.props.ariaDescribedBy, render: this.props.valueRender }));
    };
    ComboBoxWithoutContext.prototype.triggerOnChange = function (item, state) {
        var value = this.value;
        if ((!isPresent(value) && !isPresent(item)) || areSame(value, item, this.props.dataItemKey)) {
            return;
        }
        if (this.props.value === undefined) {
            state.data.value = item;
        }
        this._valueDuringOnChange = item;
        state.events.push({ type: 'onChange' });
    };
    ComboBoxWithoutContext.prototype.getFocusedIndex = function () {
        var value = this.value;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField, dataItemKey = _a.dataItemKey, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, _d = _a.focusedItemIndex, focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;
        var text = this.props.filter ? this.props.filter : this.state.text;
        if (isPresent(value) && text === undefined) {
            return data.findIndex(function (i) { return areSame(i, value, dataItemKey); });
        }
        else if (text) {
            return focusedItemIndex(data, text, textField);
        }
        else {
            return virtual.skip === 0 ? 0 : -1;
        }
    };
    ComboBoxWithoutContext.prototype.suggestValue = function (value) {
        var _a = this.props, data = _a.data, textField = _a.textField;
        this._suggested = suggestValue(value, data, textField);
    };
    ComboBoxWithoutContext.prototype.applyState = function (state) {
        this.base.applyState(state);
        this._valueDuringOnChange = undefined;
    };
    ComboBoxWithoutContext.displayName = 'ComboBox';
    /**
     * @hidden
     */
    ComboBoxWithoutContext.propTypes = __assign(__assign({}, DropDownBase.propTypes), { size: PropTypes.oneOf([null, 'small', 'medium', 'large']), rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']), fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline']), dataItemKey: PropTypes.string, groupField: PropTypes.string, suggest: PropTypes.bool, placeholder: PropTypes.string, allowCustom: PropTypes.bool, clearButton: PropTypes.bool, iconClassName: PropTypes.string, validationMessage: PropTypes.string, required: PropTypes.bool, id: PropTypes.string, ariaLabelledBy: PropTypes.string, ariaDescribedBy: PropTypes.string, list: PropTypes.any, valueRender: PropTypes.func });
    /**
     * @hidden
     */
    ComboBoxWithoutContext.defaultProps = __assign(__assign({}, DropDownBase.defaultProps), { size: 'medium', rounded: 'medium', fillMode: 'solid', allowCustom: false, clearButton: true, required: false });
    return ComboBoxWithoutContext;
}(React.Component));
export { ComboBoxWithoutContext };
/**
 * Represents the PropsContext of the `ComboBox` component.
 * Used for global configuration of all `ComboBox` instances.
 *
 * For more information, refer to the [Dropdowns Props Context]({% slug props-context_dropdowns %}) article.
 */
export var ComboBoxPropsContext = createPropsContext();
/* eslint-disable @typescript-eslint/no-redeclare -- intentionally naming the component the same as the type */
/**
 * Represents the [KendoReact ComboBox component]({% slug overview_combobox %}).
 *
 * Accepts properties of type [ComboBoxProps]({% slug api_dropdowns_comboboxprops %}).
 * Obtaining the `ref` returns an object of type [ComboBoxHandle]({% slug api_dropdowns_comboboxhandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    combobox = null;
 *    render() {
 *       return (
 *          <div>
 *              <ComboBox
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.combobox = component}
 *              />
 *              <button onClick={() => alert(this.combobox.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var ComboBox = withPropsContext(ComboBoxPropsContext, ComboBoxWithoutContext);
ComboBox.displayName = 'KendoReactComboBox';
