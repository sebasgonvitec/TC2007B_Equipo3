var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import SearchBar from './../common/SearchBar';
import ListContainer from './../common/ListContainer';
import List from './../common/List';
import DropDownBase from '../common/DropDownBase';
import { itemIndexStartsWith, getItemValue, areSame, getFocusedItem } from '../common/utils';
import { guid, Keys, classNames, createPropsContext, withPropsContext, kendoThemeMaps } from '@progress/kendo-react-common';
import { FloatingLabel } from '@progress/kendo-react-labels';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
import ClearButton from '../common/ClearButton';
var VALIDATION_MESSAGE = 'Please enter a valid value!';
var sizeMap = kendoThemeMaps.sizeMap, roundedMap = kendoThemeMaps.roundedMap;
/** @hidden */
var AutoCompleteWithoutContext = /** @class */ (function (_super) {
    __extends(AutoCompleteWithoutContext, _super);
    function AutoCompleteWithoutContext(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.state = {};
        _this.base = new DropDownBase(_this);
        _this._element = null;
        _this._inputId = guid();
        _this._suggested = '';
        _this._input = null;
        /**
         * @hidden
         */
        _this.focus = function () {
            if (_this._input) {
                _this._input.focus();
            }
        };
        /**
         * @hidden
         */
        _this.handleItemSelect = function (index, state) {
            var _a = _this.props.data, data = _a === void 0 ? [] : _a;
            var newText = getItemValue(data[index], _this.props.textField);
            _this.triggerOnChange(newText, state);
        };
        /**
         * @hidden
         */
        _this.itemFocus = function (index, state) {
            var _a = _this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField;
            var focusedItem = data[index];
            if (!areSame(_this.state.focusedItem, focusedItem, textField)) {
                state.data.focusedItem = focusedItem;
            }
        };
        /**
         * @hidden
         */
        _this.togglePopup = function (state) {
            _this.base.togglePopup(state);
        };
        _this.setValidity = function () {
            if (_this._input && _this._input.setCustomValidity) {
                _this._input.setCustomValidity(_this.validity.valid
                    ? ''
                    : _this.props.validationMessage || VALIDATION_MESSAGE);
            }
        };
        _this.handleItemClick = function (index, event) {
            _this.base.handleItemClick(index, event);
            _this._valueDuringOnChange = undefined;
        };
        _this.onChangeHandler = function (event) {
            var base = _this.base;
            var state = base.initState();
            var input = event.currentTarget;
            var value = input.value;
            var selectionAtEnd = input.selectionEnd === value.length;
            state.syntheticEvent = event;
            var prevSuggestion = _this._suggested;
            var prevValue = _this.value;
            var prevUserInput = prevValue &&
                prevValue.substring(0, prevValue.length - prevSuggestion.length);
            var deletedSuggestion = prevUserInput && prevUserInput === value;
            var deleting = prevUserInput && prevUserInput.length > value.length;
            var suggest = _this.props.suggest;
            var opened = _this.props.opened !== undefined ?
                _this.props.opened : _this.state.opened;
            if (suggest !== undefined && suggest !== false) {
                if (deletedSuggestion || deleting || !selectionAtEnd) {
                    _this._suggested = '';
                }
                else {
                    _this.suggestValue(value);
                }
                var newValue = value + _this._suggested;
                var suggestion = { userInput: value, value: _this._suggested };
                _this.triggerOnChange(newValue, state, { suggestion: suggestion });
            }
            else {
                _this._suggested = '';
                _this.triggerOnChange(value, state);
            }
            if ((!opened && value) || (opened && !value)) {
                _this.togglePopup(state);
            }
            state.data.focusedItem = undefined;
            _this.applyState(state);
        };
        _this.clearButtonClick = function (event) {
            var base = _this.base;
            var state = base.initState();
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            state.syntheticEvent = event;
            var newValue = '';
            _this._suggested = '';
            _this.triggerOnChange(newValue, state);
            if (_this.state.focusedItem !== undefined) {
                state.data.focusedItem = undefined;
            }
            if (opened) {
                _this.togglePopup(state);
            }
            _this.applyState(state);
        };
        _this.onInputKeyDown = function (event) {
            var keyCode = event.keyCode;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var state = _this.base.initState();
            state.syntheticEvent = event;
            var preventDefault = function () {
                if (opened) {
                    event.preventDefault();
                }
            };
            if (keyCode === Keys.enter || keyCode === Keys.esc) {
                preventDefault();
                _this.applyInputValue(event.currentTarget.value, state, event.keyCode);
            }
            else if (keyCode === Keys.up || keyCode === Keys.down) {
                preventDefault();
                _this.onNavigate(state, keyCode);
            }
        };
        _this.handleBlur = function (event) {
            if (_this.state.focused) {
                var state = _this.base.initState();
                state.data.focused = false;
                state.events.push({ type: 'onBlur' });
                state.syntheticEvent = event;
                _this.applyInputValue(event.currentTarget.value, state);
            }
        };
        validatePackage(packageMetadata);
        return _this;
    }
    Object.defineProperty(AutoCompleteWithoutContext.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext.prototype, "value", {
        /**
         * The value of the AutoComplete.
         */
        get: function () {
            if (this._valueDuringOnChange !== undefined) {
                return this._valueDuringOnChange;
            }
            else if (this.props.value !== undefined) {
                return this.props.value;
            }
            else if (this.state.value !== undefined) {
                return this.state.value;
            }
            else if (this.props.defaultValue !== undefined) {
                return this.props.defaultValue;
            }
            return '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext.prototype, "name", {
        /**
         * Gets the `name` property of the AutoComplete.
         */
        get: function () {
            return this.props.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext.prototype, "validity", {
        /**
         * Represents the validity state into which the AutoComplete is set.
         */
        get: function () {
            // The AutoComplete component is in a invalid state
            // only if it's required and the value is null!
            var customError = this.props.validationMessage !== undefined;
            var isValid = (!this.required || this.value !== '');
            var valid = this.props.valid !== undefined ? this.props.valid : isValid;
            return {
                customError: customError,
                valid: valid,
                valueMissing: this.value === null
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext.prototype, "validityStyles", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.validityStyles !== undefined
                ? this.props.validityStyles
                : AutoCompleteWithoutContext.defaultProps.validityStyles;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext.prototype, "required", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.required !== undefined
                ? this.props.required
                : AutoCompleteWithoutContext.defaultProps.required;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    AutoCompleteWithoutContext.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _a = this.props.data, data = _a === void 0 ? [] : _a;
        var _b = prevProps.data, prevData = _b === void 0 ? [] : _b;
        var focusedIndex = this.focusedIndex();
        var focusedItem = data[focusedIndex];
        var dataChanged = prevData !== data;
        var focusedItemChanged = focusedItem !== undefined && prevState.focusedItem !== focusedItem;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;
        var opening = !prevOpened && opened;
        if ((opened && (focusedItemChanged || dataChanged)) || opening) {
            this.base.scrollToItem(focusedIndex);
        }
        this.setValidity();
    };
    /**
     * @hidden
     */
    AutoCompleteWithoutContext.prototype.componentDidMount = function () {
        this.base.didMount();
        this.setValidity();
    };
    /**
     * @hidden
     */
    AutoCompleteWithoutContext.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, dir = _b.dir, disabled = _b.disabled, label = _b.label, className = _b.className, style = _b.style, loading = _b.loading, suggest = _b.suggest, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode;
        var isValid = !this.validityStyles || this.validity.valid;
        var base = this.base;
        var value = this.value;
        var renderClearButton = this.props.clearButton !== false && !loading && !!value;
        var id = this.props.id || this._inputId;
        if (typeof suggest === 'string') {
            this._suggested = suggest;
        }
        var autoComplete = (React.createElement("span", { className: classNames('k-autocomplete k-input', className, (_a = {},
                _a["k-input-".concat(sizeMap[size] || size)] = size,
                _a["k-rounded-".concat(roundedMap[rounded] || rounded)] = rounded,
                _a["k-input-".concat(fillMode)] = fillMode,
                _a['k-invalid'] = !isValid,
                _a['k-loading'] = loading,
                _a['k-required'] = this.required,
                _a['k-disabled'] = disabled,
                _a)), ref: function (element) {
                _this._element = element;
                base.wrapper = element;
            }, style: !label
                ? style
                : __assign(__assign({}, style), { width: undefined }), dir: dir },
            this.renderSearchBar(value || '', id),
            loading && React.createElement("span", { className: "k-icon k-i-loading k-input-loading-icon" }),
            renderClearButton && !loading && React.createElement(ClearButton, { onClick: this.clearButtonClick, key: "clearbutton" }),
            this.renderListContainer()));
        return label
            ? (React.createElement(FloatingLabel, { label: label, editorId: id, editorValue: value, editorValid: isValid, editorDisabled: disabled, style: { width: style ? style.width : undefined }, children: autoComplete }))
            : autoComplete;
    };
    /**
     * @hidden
     */
    AutoCompleteWithoutContext.prototype.onNavigate = function (state, keyCode) {
        var _this = this;
        var typedText = this.value;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField, focusedItemIndex = _a.focusedItemIndex;
        var focusedIndex = this.state.focusedItem !== undefined ?
            data.findIndex(function (i) { return areSame(i, _this.state.focusedItem, textField); }) :
            (focusedItemIndex ? focusedItemIndex(data, typedText, textField) :
                data.indexOf(getFocusedItem(data, typedText, textField)));
        var newFocused = this.base.navigation.navigate({
            keyCode: keyCode,
            current: focusedIndex,
            max: data.length - 1,
            min: 0
        });
        if (newFocused !== undefined) {
            this.itemFocus(newFocused, state);
        }
        this.applyState(state);
    };
    /**
     * @hidden
     */
    AutoCompleteWithoutContext.prototype.applyInputValue = function (value, state, eventKey) {
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField;
        this._suggested = '';
        if (opened && eventKey === Keys.enter) {
            var newValue = getItemValue(data[this.focusedIndex(value)], textField);
            this.triggerOnChange(newValue, state);
        }
        if (opened) {
            this.togglePopup(state);
        }
        this.applyState(state);
    };
    AutoCompleteWithoutContext.prototype.renderSearchBar = function (value, id) {
        var _this = this;
        var base = this.base;
        var _a = this.props, placeholder = _a.placeholder, tabIndex = _a.tabIndex, disabled = _a.disabled, readonly = _a.readonly;
        var focused = this.state.focused;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        return (React.createElement(SearchBar, { id: id, placeholder: placeholder, tabIndex: tabIndex || undefined, accessKey: this.props.accessKey, value: value, suggestedText: this._suggested, focused: focused, name: this.props.name, ref: function (searchbar) { return _this._input = searchbar && searchbar.input; }, onKeyDown: this.onInputKeyDown, onChange: this.onChangeHandler, onFocus: base.handleFocus, onBlur: this.handleBlur, disabled: disabled, readOnly: readonly, expanded: opened, owns: base.listBoxId, activedescendant: 'option-' + base.guid + '-' + this.focusedIndex(), role: "combobox", ariaLabelledBy: this.props.ariaLabelledBy, ariaDescribedBy: this.props.ariaDescribedBy, render: this.props.valueRender }));
    };
    AutoCompleteWithoutContext.prototype.renderListContainer = function () {
        var _a;
        var base = this.base;
        var _b = this.props, dir = _b.dir, header = _b.header, footer = _b.footer, _c = _b.data, data = _c === void 0 ? [] : _c, size = _b.size;
        var popupSettings = base.getPopupSettings();
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;
        return (React.createElement(ListContainer, { width: popupWidth, popupSettings: {
                animate: popupSettings.animate,
                anchor: this.element,
                show: opened,
                popupClass: classNames(popupSettings.popupClass, 'k-list-container'),
                className: popupSettings.className,
                appendTo: popupSettings.appendTo
            }, dir: dir !== undefined ? dir : this.base.dirCalculated, itemsCount: [data.length] },
            header && React.createElement("div", { className: "k-list-header" }, header),
            React.createElement("div", { className: classNames('k-list', (_a = {},
                    _a["k-list-".concat(sizeMap[size] || size)] = size,
                    _a)) }, this.renderList()),
            footer && React.createElement("div", { className: "k-list-footer" }, footer)));
    };
    AutoCompleteWithoutContext.prototype.renderList = function () {
        var base = this.base;
        var popupSettings = base.getPopupSettings();
        var _a = this.props, textField = _a.textField, _b = _a.data, data = _b === void 0 ? [] : _b, listNoDataRender = _a.listNoDataRender, itemRender = _a.itemRender;
        var value = this.value;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        return (React.createElement(List, { id: base.listBoxId, show: opened, data: data.slice(), focusedIndex: this.focusedIndex(), value: value, textField: textField, valueField: textField, highlightSelected: false, optionsGuid: base.guid, listRef: function (list) { return base.list = list; }, wrapperStyle: { maxHeight: popupSettings.height }, wrapperCssClass: "k-list-content", onClick: this.handleItemClick, itemRender: itemRender, noDataRender: listNoDataRender, onMouseDown: function (e) { return e.preventDefault(); } }));
    };
    AutoCompleteWithoutContext.prototype.triggerOnChange = function (newValue, state, eventArgs) {
        if (this.value === newValue && !eventArgs) {
            return;
        }
        state.data.value = newValue;
        this._valueDuringOnChange = newValue;
        state.events.push(__assign({ type: 'onChange' }, (eventArgs || {})));
    };
    AutoCompleteWithoutContext.prototype.applyState = function (state) {
        this.base.applyState(state);
        this._valueDuringOnChange = undefined;
    };
    AutoCompleteWithoutContext.prototype.suggestValue = function (value) {
        this._suggested = '';
        if (value) {
            var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField;
            var suggestedItem = data[itemIndexStartsWith(data, value, textField)];
            if (suggestedItem) {
                var suggestedText = getItemValue(suggestedItem, textField);
                if (value.toLowerCase() !== suggestedText.toLowerCase()) {
                    this._suggested = suggestedText.substring(value.length);
                }
            }
        }
    };
    AutoCompleteWithoutContext.prototype.focusedIndex = function (value) {
        var _this = this;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField, focusedItemIndex = _a.focusedItemIndex;
        var inputValue = value !== undefined ? value : this.value;
        return this.state.focusedItem !== undefined ?
            data.findIndex(function (i) { return areSame(i, _this.state.focusedItem, textField); }) :
            (focusedItemIndex ? focusedItemIndex(data, inputValue, textField) :
                Math.max(0, data.indexOf(getFocusedItem(data, inputValue, textField))));
    };
    AutoCompleteWithoutContext.displayName = 'AutoComplete';
    /**
     * @hidden
     */
    AutoCompleteWithoutContext.propTypes = __assign(__assign({}, DropDownBase.basicPropTypes), { size: PropTypes.oneOf([null, 'small', 'medium', 'large']), rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']), fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline']), suggest: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]), placeholder: PropTypes.string, value: PropTypes.string, defaultValue: PropTypes.string, validationMessage: PropTypes.string, required: PropTypes.bool, readonly: PropTypes.bool, clearButton: PropTypes.bool, valueRender: PropTypes.func, id: PropTypes.string, ariaLabelledBy: PropTypes.string, ariaDescribedBy: PropTypes.string });
    /**
     * @hidden
     */
    AutoCompleteWithoutContext.defaultProps = __assign(__assign({}, DropDownBase.defaultProps), { size: 'medium', rounded: 'medium', fillMode: 'solid' });
    return AutoCompleteWithoutContext;
}(React.Component));
export { AutoCompleteWithoutContext };
/**
 * Represents the PropsContext of the `AutoComplete` component.
 * Used for global configuration of all `AutoComplete` instances.
 *
 * For more information, refer to the [Dropdowns Props Context]({% slug props-context_dropdowns %}) article.
 */
export var AutoCompletePropsContext = createPropsContext();
/* eslint-disable @typescript-eslint/no-redeclare -- intentionally naming the component the same as the type */
/**
 * Represents the [KendoReact AutoComplete component]({% slug overview_autocomplete %}).
 *
 * Accepts properties of type [AutoCompleteProps]({% slug api_dropdowns_autocompleteprops %}).
 * Obtaining the `ref` returns an object of type [AutoCompleteHandle]({% slug api_dropdowns_autocompletehandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    autocomplete = null;
 *    render() {
 *       return (
 *          <div>
 *              <AutoComplete
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.autocomplete = component}
 *              />
 *              <button onClick={() => alert(this.autocomplete.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var AutoComplete = withPropsContext(AutoCompletePropsContext, AutoCompleteWithoutContext);
AutoComplete.displayName = 'KendoReactAutoComplete';
