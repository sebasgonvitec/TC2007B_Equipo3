var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, Keys, guid, createPropsContext, kendoThemeMaps, withPropsContext } from '@progress/kendo-react-common';
import { FloatingLabel } from '@progress/kendo-react-labels';
import ListContainer from '../common/ListContainer';
import List from '../common/List';
import TagList from './TagList';
import SearchBar from '../common/SearchBar';
import DropDownBase from '../common/DropDownBase';
import { ActiveDescendant } from './../common/settings';
import { itemIndexStartsWith, getItemValue, areSame, removeDataItems, isPresent, preventDefaultNonInputs, matchTags } from '../common/utils';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
import ClearButton from '../common/ClearButton';
var sizeMap = kendoThemeMaps.sizeMap, roundedMap = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE = 'Please enter a valid value!';
var preventDefault = function (event) { return event.preventDefault(); };
var isCustom = function (type) { return type === FocusedItemType.CustomItem; };
var FocusedItemType;
(function (FocusedItemType) {
    FocusedItemType[FocusedItemType["None"] = 0] = "None";
    FocusedItemType[FocusedItemType["ListItem"] = 1] = "ListItem";
    FocusedItemType[FocusedItemType["CustomItem"] = 2] = "CustomItem";
})(FocusedItemType || (FocusedItemType = {}));
/** @hidden */
var MultiSelectWithoutContext = /** @class */ (function (_super) {
    __extends(MultiSelectWithoutContext, _super);
    function MultiSelectWithoutContext(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.state = {
            activedescendant: ActiveDescendant.PopupList
        };
        _this._element = null;
        _this._valueItemsDuringOnChange = null;
        _this._inputId = guid();
        _this.base = new DropDownBase(_this);
        _this._tags = [];
        _this._input = null;
        _this._skipFocusEvent = false;
        _this.scrollToFocused = false;
        /**
         * @hidden
         */
        _this.focus = function () {
            if (_this._input) {
                _this._input.focus();
            }
        };
        /**
         * @hidden
         */
        _this.handleItemSelect = function (index, state) {
            var _a = _this.props, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey, virtual = _a.virtual;
            var skip = virtual ? virtual.skip : 0;
            var dataItem = data[index - skip];
            var indexInValue = _this.value.findIndex(function (i) { return areSame(i, dataItem, dataItemKey); });
            var newItems = [];
            if (indexInValue !== -1) { // item is already selected
                newItems = _this.value;
                newItems.splice(indexInValue, 1);
            }
            else {
                newItems = __spreadArray(__spreadArray([], _this.value, true), [dataItem], false);
            }
            var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
            if (text) {
                if (_this.state.text) {
                    state.data.text = '';
                }
                _this.base.filterChanged('', state);
            }
            if (_this.state.focusedIndex !== undefined) {
                state.data.focusedIndex = undefined;
            }
            _this.triggerOnChange(newItems, state);
            _this.base.triggerPageChangeCornerItems(dataItem, state);
        };
        /**
         * @hidden
         */
        _this.onTagDelete = function (itemsToRemove, event) {
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var state = _this.base.initState();
            state.syntheticEvent = event;
            if (opened) {
                _this.base.togglePopup(state);
            }
            if (!_this.state.focused) {
                state.data.focused = true;
                _this.focus();
            }
            var selected = _this.value;
            removeDataItems(selected, itemsToRemove, _this.props.dataItemKey);
            _this.triggerOnChange(selected, state);
            _this.applyState(state);
        };
        /**
         * @hidden
         */
        _this.itemFocus = function (index, state) {
            var _a = _this.props, _b = _a.data, data = _b === void 0 ? [] : _b, allowCustom = _a.allowCustom, virtual = _a.virtual;
            var skip = virtual ? virtual.skip : 0;
            var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
            var focusedIndex = _this.getFocusedState().focusedIndex;
            var customItem = allowCustom && text;
            var nextFocusedItem = data[index - skip];
            if (nextFocusedItem && focusedIndex !== index) {
                if (_this.state.focusedIndex !== index) {
                    state.data.focusedIndex = index;
                    state.data.activedescendant = ActiveDescendant.PopupList;
                }
            }
            else if (customItem && index === -1) {
                if (_this.state.focusedIndex !== undefined) {
                    state.data.focusedIndex = undefined;
                }
            }
            _this.base.triggerPageChangeCornerItems(nextFocusedItem, state);
        };
        _this.componentRef = function (element) {
            _this._element = element;
            _this.base.wrapper = element;
        };
        _this.searchbarRef = function (searchbar) {
            var input = _this._input = searchbar && searchbar.input;
            if (input && _this.state.focused) {
                window.setTimeout(function () { return input.focus(); }, 0);
            }
        };
        _this.onChangeHandler = function (event) {
            var state = _this.base.initState();
            var value = event.currentTarget.value;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            state.syntheticEvent = event;
            if (_this.props.filter === undefined) {
                state.data.text = value;
            }
            state.data.focusedIndex = undefined;
            if (!opened) {
                _this.base.togglePopup(state);
            }
            _this.base.filterChanged(value, state);
            _this.applyState(state);
        };
        _this.clearButtonClick = function (event) {
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var state = _this.base.initState();
            state.syntheticEvent = event;
            event.stopPropagation();
            if (_this.value.length > 0) {
                _this.triggerOnChange([], state);
            }
            if (_this.state.focusedIndex !== undefined) {
                state.data.focusedIndex = undefined;
            }
            if (opened) {
                _this.base.togglePopup(state);
            }
            var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
            if (isPresent(text) && text !== '') {
                _this.base.filterChanged('', state);
            }
            if (_this.state.text) {
                state.data.text = '';
            }
            _this.applyState(state);
        };
        _this.onInputKeyDown = function (event) {
            var keyCode = event.keyCode;
            var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var focusedItem = _this.getFocusedState().focusedItem;
            var state = _this.base.initState();
            state.syntheticEvent = event;
            if (!text && _this.value.length > 0 &&
                (keyCode === Keys.left || keyCode === Keys.right ||
                    keyCode === Keys.home || keyCode === Keys.end ||
                    keyCode === Keys.delete || keyCode === Keys.backspace)) {
                return _this.onTagsNavigate(event, state);
            }
            var togglePopup = function () {
                event.preventDefault();
                _this.base.togglePopup(state);
                _this.applyState(state);
            };
            if (opened) {
                if (event.altKey && keyCode === Keys.up) {
                    togglePopup();
                }
                else if (keyCode === Keys.up || keyCode === Keys.down) {
                    event.preventDefault();
                    _this.onNavigate(state, keyCode);
                }
                else if (keyCode === Keys.enter) {
                    event.preventDefault();
                    if (_this.props.allowCustom && text && focusedItem === null) {
                        _this.customItemSelect(event);
                    }
                    else {
                        _this.selectFocusedItem(event);
                    }
                }
                else if (keyCode === Keys.esc) {
                    togglePopup();
                }
            }
            else if (event.altKey && keyCode === Keys.down) {
                togglePopup();
            }
        };
        _this.renderListContainer = function () {
            var _a, _b;
            var base = _this.base;
            var _c = _this.props, header = _c.header, footer = _c.footer, allowCustom = _c.allowCustom, dir = _c.dir, _d = _c.data, data = _d === void 0 ? [] : _d, size = _c.size;
            var popupSettings = _this.base.getPopupSettings();
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var text = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
            var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;
            var listContainerProps = {
                dir: dir !== undefined ? dir : base.dirCalculated,
                width: popupWidth,
                popupSettings: {
                    popupClass: classNames(popupSettings.popupClass, 'k-list-container'),
                    className: popupSettings.className,
                    animate: popupSettings.animate,
                    anchor: _this.element,
                    show: opened,
                    onOpen: _this.onPopupOpened,
                    onClose: _this.onPopupClosed,
                    appendTo: popupSettings.appendTo
                },
                itemsCount: [data.length, _this.value.length]
            };
            var focusedType = _this.getFocusedState().focusedType;
            var customItem = allowCustom && text && (React.createElement("div", { className: classNames('k-list', (_a = {},
                    _a["k-list-".concat(sizeMap[size] || size)] = size,
                    _a)), key: "customitem", onClick: _this.customItemSelect, onMouseDown: preventDefault },
                React.createElement("div", { className: classNames('k-list-item k-custom-item', { 'k-focus': isCustom(focusedType) }), style: { fontStyle: 'italic' } },
                    text,
                    React.createElement("span", { className: "k-icon k-i-plus", style: { position: 'absolute', right: '0.5em' } }))));
            return (React.createElement(ListContainer, __assign({}, listContainerProps),
                header && React.createElement("div", { className: "k-list-header" }, header),
                customItem,
                React.createElement("div", { className: classNames('k-list', (_b = {},
                        _b["k-list-".concat(sizeMap[size] || size)] = size,
                        _b['k-virtual-list'] = _this.base.vs.enabled,
                        _b)) }, _this.renderList()),
                footer && React.createElement("div", { className: "k-list-footer" }, footer)));
        };
        _this.renderList = function () {
            var _a = _this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField, listNoDataRender = _a.listNoDataRender, itemRender = _a.itemRender, dataItemKey = _a.dataItemKey, virtual = _a.virtual;
            var vs = _this.base.vs;
            var skip = virtual ? virtual.skip : 0;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var focusedIndex = _this.getFocusedState().focusedIndex;
            var popupSettings = _this.base.getPopupSettings();
            var translate = "translateY(".concat(vs.translate, "px)");
            return (React.createElement(List, { id: _this.base.listBoxId, show: opened, data: data.slice(), focusedIndex: focusedIndex - skip, value: _this.value, textField: textField, valueField: dataItemKey, optionsGuid: _this.base.guid, listRef: function (list) { vs.list = _this.base.list = list; }, wrapperStyle: { maxHeight: popupSettings.height }, wrapperCssClass: "k-list-content", listStyle: vs.enabled ? { transform: translate } : undefined, key: "listKey", skip: skip, onClick: _this.handleItemClick, itemRender: itemRender, noDataRender: listNoDataRender, onMouseDown: preventDefault, onBlur: _this.handleBlur, onScroll: function (e) {
                    vs.scrollHandler(e);
                }, wrapperRef: vs.scrollerRef, scroller: _this.base.renderScrollElement() }));
        };
        _this.customItemSelect = function (event) {
            var _a;
            var itemText = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
            var textField = _this.props.textField;
            if (!itemText) {
                return;
            }
            var state = _this.base.initState();
            state.syntheticEvent = event;
            var item = textField ? (_a = {}, _a[textField] = itemText, _a) : itemText;
            if (_this.state.text !== undefined) {
                state.data.text = '';
            }
            state.data.focusedIndex = undefined;
            _this.base.filterChanged('', state);
            var newItems = __spreadArray(__spreadArray([], _this.value, true), [item], false);
            _this.triggerOnChange(newItems, state);
            _this.base.togglePopup(state);
            _this.applyState(state);
        };
        _this.handleWrapperClick = function (event) {
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var input = _this._input;
            if (!opened && input) {
                _this.focusElement(input);
            }
            var state = _this.base.initState();
            state.syntheticEvent = event;
            if (!_this.state.focused) {
                state.events.push({ type: 'onFocus' });
                state.data.focused = true;
            }
            _this.base.togglePopup(state);
            _this.applyState(state);
        };
        _this.handleItemClick = function (index, event) {
            var state = _this.base.initState();
            state.syntheticEvent = event;
            _this.handleItemSelect(index, state);
            if (_this.props.autoClose) {
                _this.base.togglePopup(state);
            }
            event.stopPropagation();
            _this.applyState(state);
        };
        _this.handleBlur = function (event) {
            if (!_this.state.focused || _this._skipFocusEvent) {
                return;
            }
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var state = _this.base.initState();
            var _a = _this.props, allowCustom = _a.allowCustom, filterable = _a.filterable;
            state.syntheticEvent = event;
            state.data.focused = false;
            state.events.push({ type: 'onBlur' });
            if (opened) {
                if (_this.state.opened) {
                    state.data.opened = false;
                }
                state.events.push({ type: 'onClose' });
            }
            if (!allowCustom && !filterable && _this.state.text) {
                state.data.text = '';
            }
            _this.applyState(state);
        };
        _this.handleFocus = function (event) {
            if (_this._skipFocusEvent) {
                return;
            }
            _this.base.handleFocus(event);
        };
        _this.onPopupOpened = function () {
            if (_this._input && _this.state.focused) {
                _this.focusElement(_this._input);
            }
        };
        _this.onPopupClosed = function () {
            if (_this.state.focused) {
                window.setTimeout(function () { if (_this.state.focused) {
                    _this.focusElement(_this._input);
                } }, 0);
            }
        };
        _this.setValidity = function () {
            if (_this._input && _this._input.setCustomValidity) {
                _this._input.setCustomValidity(_this.validity.valid
                    ? ''
                    : _this.props.validationMessage || VALIDATION_MESSAGE);
            }
        };
        validatePackage(packageMetadata);
        return _this;
    }
    Object.defineProperty(MultiSelectWithoutContext.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext.prototype, "value", {
        /**
         * Represents the value of the MultiSelect.
         */
        get: function () {
            var result = [];
            if (this._valueItemsDuringOnChange) {
                result.push.apply(result, this._valueItemsDuringOnChange);
            }
            else if (this.props.value) {
                result.push.apply(result, this.props.value);
            }
            else if (this.state.value) {
                result.push.apply(result, this.state.value);
            }
            else if (this.props.defaultValue) {
                result.push.apply(result, this.props.defaultValue);
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext.prototype, "name", {
        /**
         * Gets the `name` property of the MultiSelect.
         */
        get: function () {
            return this.props.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext.prototype, "validity", {
        /**
         * Represents the validity state into which the MultiSelect is set.
         */
        get: function () {
            var customError = this.props.validationMessage !== undefined;
            var isValid = (!this.required
                || (this.value !== null && this.value.length > 0 && this.value !== undefined));
            var valid = this.props.valid !== undefined ? this.props.valid : isValid;
            return {
                customError: customError,
                valid: valid,
                valueMissing: this.value === null
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext.prototype, "required", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.required !== undefined
                ? this.props.required
                : MultiSelectWithoutContext.defaultProps.required;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext.prototype, "validityStyles", {
        get: function () {
            return this.props.validityStyles !== undefined
                ? this.props.validityStyles
                : MultiSelectWithoutContext.defaultProps.validityStyles;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    MultiSelectWithoutContext.prototype.componentDidUpdate = function (prevProps, prevState) {
        var virtual = this.props.virtual;
        var skip = virtual ? virtual.skip : 0;
        var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;
        var opening = !prevOpened && opened;
        var closing = prevOpened && !opened;
        var popupSettings = this.base.getPopupSettings();
        if (!popupSettings.animate && closing) {
            this.onPopupClosed();
        }
        if (virtual && virtual.total !== prevTotal) {
            this.base.vs.calcScrollElementHeight();
            this.base.vs.reset();
        }
        else {
            var _a = this.getFocusedState(), focusedItem = _a.focusedItem, focusedIndex = _a.focusedIndex;
            if (opening && virtual) {
                this.base.scrollToVirtualItem(virtual, focusedIndex - skip);
            }
            else if (opening && !virtual) {
                this.base.scrollToItem(focusedIndex);
            }
            else if (opened && prevOpened && focusedItem && this.scrollToFocused) {
                this.base.scrollToItem(focusedIndex - skip);
            }
        }
        this.scrollToFocused = false;
        this.setValidity();
    };
    /**
     * @hidden
     */
    MultiSelectWithoutContext.prototype.componentDidMount = function () {
        this.base.didMount();
        this.setValidity();
    };
    /**
     * @hidden
     */
    MultiSelectWithoutContext.prototype.onNavigate = function (state, keyCode) {
        var _a = this.props, allowCustom = _a.allowCustom, _b = _a.data, data = _b === void 0 ? [] : _b;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var text = this.props.filter !== undefined ? this.props.filter : this.state.text;
        var _c = this.getFocusedState(), focusedType = _c.focusedType, focusedIndex = _c.focusedIndex;
        var customItem = allowCustom && text;
        var customItemFocused = isCustom(focusedType);
        var base = this.base;
        var vs = base.vs;
        if (opened && keyCode === Keys.up && customItemFocused) {
            if (this.state.focusedIndex !== undefined) {
                state.data.focusedIndex = undefined;
            }
        }
        else {
            var newFocused = base.navigation.navigate({
                keyCode: keyCode,
                current: focusedIndex,
                max: (vs.enabled ? vs.total : data.length) - 1,
                min: customItem ? -1 : 0
            });
            if (newFocused !== undefined) {
                this.itemFocus(newFocused, state);
                this.scrollToFocused = true;
            }
        }
        this.applyState(state);
    };
    /**
     * @hidden
     */
    MultiSelectWithoutContext.prototype.render = function () {
        var _a, _b;
        var _c = this.props, style = _c.style, className = _c.className, label = _c.label, dir = _c.dir, disabled = _c.disabled, tags = _c.tags, textField = _c.textField, dataItemKey = _c.dataItemKey, virtual = _c.virtual, size = _c.size, rounded = _c.rounded, fillMode = _c.fillMode, loading = _c.loading, filter = _c.filter;
        var _d = this.state, text = _d.text, focused = _d.focused, focusedTag = _d.focusedTag;
        var vs = this.base.vs;
        var id = this.props.id || this._inputId;
        vs.enabled = virtual !== undefined;
        if (virtual !== undefined) {
            vs.skip = virtual.skip;
            vs.total = virtual.total;
            vs.pageSize = virtual.pageSize;
        }
        var tagsToRender = [];
        if (tags === undefined) {
            this.value.forEach(function (item) {
                tagsToRender.push({ text: getItemValue(item, textField), data: [item] });
            });
        }
        else {
            tagsToRender.push.apply(tagsToRender, tags);
        }
        this.setItems(tagsToRender, this._tags);
        var isValid = !this.validityStyles || this.validity.valid;
        var clearButton = Boolean(filter !== undefined ? filter : text) || this.value.length > 0;
        var component = (React.createElement("div", { ref: this.componentRef, className: classNames('k-multiselect k-input', className, (_a = {},
                _a["k-input-".concat(sizeMap[size] || size)] = size,
                _a["k-rounded-".concat(roundedMap[rounded] || rounded)] = rounded,
                _a["k-input-".concat(fillMode)] = fillMode,
                _a['k-focus'] = focused && !disabled,
                _a['k-invalid'] = !isValid,
                _a['k-disabled'] = disabled,
                _a['k-loading'] = loading,
                _a['k-required'] = this.required,
                _a)), style: !label
                ? style
                : __assign(__assign({}, style), { width: undefined }), dir: dir, onFocus: this.handleFocus, onBlur: this.handleBlur, onClick: this.handleWrapperClick, onMouseDown: preventDefaultNonInputs },
            React.createElement("div", { className: classNames('k-input-values k-chip-list k-selection-multiple', (_b = {},
                    _b["k-chip-list-".concat(sizeMap[size] || size)] = size,
                    _b)), role: "listbox", id: 'tagslist-' + this.base.guid },
                tagsToRender.length > 0 && React.createElement(TagList, { tagRender: this.props.tagRender, onTagDelete: this.onTagDelete, data: tagsToRender, guid: this.base.guid, focused: focusedTag ? tagsToRender.find(function (t) { return matchTags(t, focusedTag, dataItemKey); }) : undefined, size: size }),
                this.renderSearchbar(id)),
            loading && React.createElement("span", { className: "k-icon k-i-loading k-input-loading-icon" }),
            clearButton && React.createElement(ClearButton, { onClick: this.clearButtonClick }),
            this.renderListContainer()));
        return label ? (React.createElement(FloatingLabel, { label: label, editorId: id, editorValue: text || getItemValue(this.value[0], textField), editorValid: isValid, editorDisabled: disabled, style: { width: style ? style.width : undefined }, children: component })) : component;
    };
    MultiSelectWithoutContext.prototype.renderSearchbar = function (id) {
        var _a = this.state, activedescendant = _a.activedescendant, focusedTag = _a.focusedTag;
        var _b = this.props, disabled = _b.disabled, placeholder = _b.placeholder, ariaDescribedBy = _b.ariaDescribedBy;
        var text = (this.props.filter !== undefined ? this.props.filter : this.state.text) || '';
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var focusedIndex = this.getFocusedState().focusedIndex;
        var placeholderToShow = this.value.length === 0 && !text ? placeholder : undefined;
        var ariaActivedescendant = activedescendant === ActiveDescendant.TagsList && focusedTag !== undefined ?
            "tag-".concat(this.base.guid, "-").concat(focusedTag.text.replace(/\s+/g, '-')) :
            "option-".concat(this.base.guid, "-").concat(focusedIndex);
        return (React.createElement(SearchBar, { id: id, size: Math.max((placeholderToShow || '').length, text.length, 1), tabIndex: this.props.tabIndex, accessKey: this.props.accessKey, placeholder: placeholderToShow, value: text, onChange: this.onChangeHandler, onKeyDown: this.onInputKeyDown, ref: this.searchbarRef, disabled: disabled, expanded: opened, owns: this.base.listBoxId, role: 'combobox', activedescendant: ariaActivedescendant, ariaDescribedBy: "tagslist-".concat(this.base.guid).concat(ariaDescribedBy ? (' ' + ariaDescribedBy) : ''), ariaLabelledBy: this.props.ariaLabelledBy }));
    };
    MultiSelectWithoutContext.prototype.onTagsNavigate = function (event, state) {
        var keyCode = event.keyCode;
        var focusedTag = this.state.focusedTag;
        var tags = this._tags;
        var itemsKey = this.props.dataItemKey;
        var focusedIndex = focusedTag ?
            tags.findIndex(function (t) { return matchTags(t, focusedTag, itemsKey); }) : -1;
        var newFocusedTag = undefined;
        var hasFocused = focusedIndex !== -1;
        if (keyCode === Keys.left) {
            if (hasFocused) {
                focusedIndex = Math.max(0, focusedIndex - 1);
            }
            else {
                focusedIndex = tags.length - 1;
            }
            newFocusedTag = tags[focusedIndex];
        }
        else if (keyCode === Keys.right) {
            if (focusedIndex === tags.length - 1) {
                newFocusedTag = undefined;
            }
            else if (hasFocused) {
                focusedIndex = Math.min(tags.length - 1, focusedIndex + 1);
                newFocusedTag = tags[focusedIndex];
            }
        }
        else if (keyCode === Keys.home) {
            newFocusedTag = tags[0];
        }
        else if (keyCode === Keys.end) {
            newFocusedTag = tags[tags.length - 1];
        }
        else if (keyCode === Keys.delete) {
            if (hasFocused) {
                var items = this.value;
                removeDataItems(items, tags[focusedIndex].data, itemsKey);
                this.triggerOnChange(items, state);
            }
        }
        else if (keyCode === Keys.backspace) {
            var items = this.value;
            if (hasFocused) {
                removeDataItems(items, tags[focusedIndex].data, itemsKey);
                this.triggerOnChange(items, state);
            }
            else if (!hasFocused && tags.length) {
                var removed = tags.pop();
                removeDataItems(items, removed.data, itemsKey);
                this.triggerOnChange(items, state);
            }
        }
        if (newFocusedTag !== focusedTag) {
            state.data.focusedTag = newFocusedTag;
            state.data.activedescendant = ActiveDescendant.TagsList;
        }
        this.applyState(state);
    };
    MultiSelectWithoutContext.prototype.triggerOnChange = function (items, state) {
        if (this.props.value === undefined) {
            state.data.value = __spreadArray([], items, true);
        }
        this._valueItemsDuringOnChange = [];
        this.setItems(items, this._valueItemsDuringOnChange);
        state.events.push({ type: 'onChange' });
    };
    MultiSelectWithoutContext.prototype.selectFocusedItem = function (event) {
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, virtual = _a.virtual;
        var focusedIndex = this.getFocusedState().focusedIndex;
        var skip = virtual ? virtual.skip : 0;
        if (data[focusedIndex - skip] !== undefined) {
            this.handleItemClick(focusedIndex, event);
        }
    };
    MultiSelectWithoutContext.prototype.setItems = function (srcItems, destItems) {
        destItems.length = 0;
        destItems.push.apply(destItems, srcItems);
    };
    MultiSelectWithoutContext.prototype.getFocusedState = function () {
        var focusedIndex = this.state.focusedIndex;
        var text = this.props.filter !== undefined ? this.props.filter : this.state.text;
        var _a = this.props, allowCustom = _a.allowCustom, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey, virtual = _a.virtual, textField = _a.textField, _c = _a.focusedItemIndex, focusedItemIndex = _c === void 0 ? itemIndexStartsWith : _c;
        var skip = (virtual && virtual.skip) || 0;
        var focusedInd;
        if (focusedIndex !== undefined) {
            return {
                focusedIndex: focusedIndex,
                focusedItem: data[focusedIndex - skip],
                focusedType: FocusedItemType.ListItem
            };
        }
        var selected = this.value;
        if (allowCustom && text) {
            return { focusedItem: null, focusedIndex: -1, focusedType: FocusedItemType.CustomItem };
        }
        else if (text) {
            focusedInd = focusedItemIndex(data, text, textField);
            return {
                focusedItem: data[focusedInd],
                focusedIndex: focusedInd + skip,
                focusedType: FocusedItemType.ListItem
            };
        }
        else if (selected.length) {
            var last_1 = selected[selected.length - 1];
            focusedInd = data.findIndex(function (i) { return areSame(i, last_1, dataItemKey); });
            if (data[focusedInd] !== undefined) {
                return {
                    focusedIndex: focusedInd + skip,
                    focusedItem: data[focusedInd],
                    focusedType: FocusedItemType.ListItem
                };
            }
            return { focusedType: FocusedItemType.None, focusedIndex: -1 };
        }
        return skip === 0 ?
            { focusedItem: data[0], focusedIndex: 0, focusedType: FocusedItemType.ListItem } :
            { focusedType: FocusedItemType.None, focusedIndex: -1 };
    };
    MultiSelectWithoutContext.prototype.focusElement = function (element) {
        var _this = this;
        this._skipFocusEvent = true;
        element.focus();
        window.setTimeout(function () { return _this._skipFocusEvent = false; }, 0);
    };
    MultiSelectWithoutContext.prototype.applyState = function (state) {
        this.base.applyState(state);
        this._valueItemsDuringOnChange = null;
    };
    MultiSelectWithoutContext.displayName = 'MultiSelect';
    /**
     * @hidden
     */
    MultiSelectWithoutContext.propTypes = __assign(__assign({}, DropDownBase.propTypes), { autoClose: PropTypes.bool, value: PropTypes.arrayOf(PropTypes.any), defaultValue: PropTypes.arrayOf(PropTypes.any), dataItemKey: PropTypes.string, placeholder: PropTypes.string, tags: PropTypes.arrayOf(PropTypes.shape({
            text: PropTypes.string,
            data: PropTypes.arrayOf(PropTypes.any)
        })), tagRender: PropTypes.func, id: PropTypes.string, ariaLabelledBy: PropTypes.string, ariaDescribedBy: PropTypes.string });
    /**
     * @hidden
     */
    MultiSelectWithoutContext.defaultProps = __assign(__assign({}, DropDownBase.defaultProps), { autoClose: true, required: false, size: 'medium', rounded: 'medium', fillMode: 'solid' });
    return MultiSelectWithoutContext;
}(React.Component));
export { MultiSelectWithoutContext };
/**
 * Represents the PropsContext of the `MultiSelect` component.
 * Used for global configuration of all `MultiSelect` instances.
 *
 * For more information, refer to the [Dropdowns Props Context]({% slug props-context_dropdowns %}) article.
 */
export var MultiSelectPropsContext = createPropsContext();
/* eslint-disable @typescript-eslint/no-redeclare -- intentionally naming the component the same as the type */
/**
 * Represents the [KendoReact MultiSelect component]({% slug overview_multiselect %}).
 *
 * Accepts properties of type [MultiSelectProps]({% slug api_dropdowns_multiselectprops %}).
 * Obtaining the `ref` returns an object of type [MultiSelectHandle]({% slug api_dropdowns_multiselecthandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    multiselect = null;
 *    render() {
 *       return (
 *          <div>
 *              <MultiSelect
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.multiselect = component}
 *              />
 *              <button onClick={() => alert(this.multiselect.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var MultiSelect = withPropsContext(MultiSelectPropsContext, MultiSelectWithoutContext);
MultiSelect.displayName = 'KendoReactMultiSelect';
