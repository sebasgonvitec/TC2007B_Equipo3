"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropDownTree = exports.DropDownTreePropsContext = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_popup_1 = require("@progress/kendo-react-popup");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_treeview_1 = require("@progress/kendo-react-treeview");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("./../package-metadata");
var utils_1 = require("../common/utils");
var useDropdownWidth_1 = require("./useDropdownWidth");
var ListNoData_1 = require("./ListNoData");
var messages_1 = require("./../messages");
var kendo_react_labels_1 = require("@progress/kendo-react-labels");
var ListFilter_1 = require("../common/ListFilter");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var sizeMap = kendo_react_common_1.kendoThemeMaps.sizeMap, roundedMap = kendo_react_common_1.kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE = 'Please select a value from the list!';
var ValueHolder = function (props) {
    return React.createElement("span", { className: "k-input-value-text" }, props.children);
};
var toLevel = function (hierarchicalIndex) {
    return hierarchicalIndex.split('_').map(function (i) { return parseInt(i, 10); });
};
var getValidity = function (parameters, hasValue) {
    var validationMessage = parameters.validationMessage, valid = parameters.valid, required = parameters.required;
    return ({
        customError: validationMessage !== undefined,
        valid: Boolean(valid !== undefined ? valid : (!required || hasValue)),
        valueMissing: !hasValue
    });
};
var defaultProps = {
    selectField: 'selected',
    subItemsField: 'items',
    popupSettings: {
        animate: true,
        width: '200px',
        height: '200px'
    },
    required: false,
    validityStyles: true,
    size: 'medium',
    rounded: 'medium',
    fillMode: 'solid'
};
/**
 * Represents the PropsContext of the `DropDownTree` component.
 * Used for global configuration of all `DropDownTree` instances.
 *
 * For more information, refer to the [Dropdowns Props Context]({% slug props-context_dropdowns %}) article.
 */
exports.DropDownTreePropsContext = (0, kendo_react_common_1.createPropsContext)();
/**
 * Represents the DropDownTree component.
 *
 * Accepts properties of type [DropDownTreeProps]({% slug api_dropdowns_dropdowntreeprops %}).
 * Obtaining the `ref` returns an object of type [DropDownTreeHandle]({% slug api_dropdowns_dropdowntreehandle %}).
 */
exports.DropDownTree = React.forwardRef(function (directProps, ref) {
    var _a;
    (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
    var props = (0, kendo_react_common_1.usePropsContext)(exports.DropDownTreePropsContext, directProps);
    var calculatedId = React.useMemo(function () { return (0, kendo_react_common_1.guid)(); }, []);
    var id = props.id || calculatedId;
    var _b = props.data, data = _b === void 0 ? [] : _b, dataItemKey = props.dataItemKey, _c = props.popupSettings, popupSettings = _c === void 0 ? {} : _c, _d = props.style, style = _d === void 0 ? {} : _d, opened = props.opened, disabled = props.disabled, _e = props.onOpen, onOpen = _e === void 0 ? kendo_react_common_1.noop : _e, _f = props.onClose, onClose = _f === void 0 ? kendo_react_common_1.noop : _f, placeholder = props.placeholder, label = props.label, name = props.name, _g = props.selectField, selectField = _g === void 0 ? defaultProps.selectField : _g, _h = props.subItemsField, subItemsField = _h === void 0 ? defaultProps.subItemsField : _h, validationMessage = props.validationMessage, valid = props.valid, required = props.required, validityStyles = props.validityStyles;
    var tabIndex = (0, kendo_react_common_1.getTabIndex)(props.tabIndex, disabled);
    var target = React.useRef(null);
    var elementRef = React.useRef(null);
    var inputRef = React.useRef(null);
    var selectRef = React.useRef(null);
    var treeViewRef = React.useRef(null);
    var skipFocusRef = React.useRef(false);
    var _j = React.useState(undefined), stateValue = _j[0], setStateValue = _j[1];
    var controlled = props.value !== undefined;
    var value = controlled ? props.value : (stateValue !== undefined ? stateValue : props.defaultValue);
    var hasValue = (0, utils_1.isPresent)(value);
    var currentValueText = hasValue ? (0, utils_1.getItemValue)(value, props.textField) : '';
    var validity = getValidity({ validationMessage: validationMessage, valid: valid, required: required }, hasValue);
    var focus = React.useCallback(function () { return elementRef.current && elementRef.current.focus(); }, []);
    React.useImperativeHandle(target, function () { return ({
        props: props,
        element: elementRef.current,
        focus: focus
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var dir = (0, kendo_react_common_1.useRtl)(elementRef, props.dir);
    var initialStyleWidth = popupSettings.width !== undefined ?
        popupSettings.width : (style.width !== undefined ? style.width : defaultProps.popupSettings.width);
    var popupWidth = (0, useDropdownWidth_1.useDropdownWidth)(elementRef, initialStyleWidth);
    var popupStyles = __assign({ width: popupWidth }, (dir !== undefined ? { direction: dir } : {}));
    var _k = React.useState(false), open = _k[0], setOpen = _k[1];
    var isOpen = opened !== undefined ? opened : open;
    var _l = React.useState(false), focused = _l[0], setFocused = _l[1];
    var _m = React.useState(''), filter = _m[0], setFilter = _m[1];
    var setValidity = React.useCallback(function () {
        if (selectRef.current && selectRef.current.setCustomValidity) {
            selectRef.current.setCustomValidity(validity.valid
                ? ''
                : validationMessage === undefined ? VALIDATION_MESSAGE : validationMessage);
        }
    }, [validationMessage, validity]);
    React.useEffect(setValidity);
    var openPopup = React.useCallback(function (event) {
        if (!isOpen) {
            if (onOpen) {
                var openEvent = __assign({}, event);
                onOpen.call(undefined, openEvent);
            }
            if (opened === undefined) {
                setOpen(true);
            }
        }
    }, [isOpen, opened, onOpen]);
    var closePopup = React.useCallback(function (event) {
        if (isOpen) {
            if (onClose) {
                var closeEvent = __assign({}, event);
                onClose.call(undefined, closeEvent);
            }
            if (opened === undefined) {
                setOpen(false);
            }
        }
    }, [isOpen, opened, onClose]);
    var onWrapperClick = React.useCallback(function (event) {
        if (!event.isDefaultPrevented() && target.current) {
            setFocused(true);
            var ev = {
                syntheticEvent: event,
                nativeEvent: event.nativeEvent,
                target: target.current
            };
            (isOpen ? closePopup : openPopup)(ev);
        }
    }, [isOpen, opened, onOpen, onClose]);
    var switchFocus = React.useCallback(function (focusFn) {
        skipFocusRef.current = true;
        focusFn();
        window.setTimeout(function () { return skipFocusRef.current = false; }, 0);
    }, []);
    var onWrapperKeyDown = React.useCallback(function (event) {
        var keyCode = event.keyCode, altKey = event.altKey;
        var treeview = treeViewRef.current && treeViewRef.current.element;
        if (!target.current || (event.isDefaultPrevented() && inputRef.current === event.target)) {
            return;
        }
        var ev = {
            syntheticEvent: event,
            nativeEvent: event.nativeEvent,
            target: target.current
        };
        if (isOpen) {
            if (keyCode === kendo_react_common_1.Keys.esc || (altKey && keyCode === kendo_react_common_1.Keys.up)) {
                event.preventDefault();
                closePopup(ev);
            }
            else if (treeview && treeview.querySelector('.k-focus') &&
                (keyCode === kendo_react_common_1.Keys.up || keyCode === kendo_react_common_1.Keys.down ||
                    keyCode === kendo_react_common_1.Keys.left || keyCode === kendo_react_common_1.Keys.right ||
                    keyCode === kendo_react_common_1.Keys.home || keyCode === kendo_react_common_1.Keys.end)) {
                if (keyCode === kendo_react_common_1.Keys.up && inputRef.current) {
                    var items = Array.from(treeview.querySelectorAll('.k-treeview-item'));
                    var focusedItem = __spreadArray([], items, true).reverse().find(function (i) { return Boolean(i && i.querySelector('.k-focus')); });
                    if (focusedItem && items.indexOf(focusedItem) === 0) {
                        return switchFocus(function () { focusElement(inputRef.current); });
                    }
                }
                switchFocus(kendo_react_common_1.noop);
            }
            else if (keyCode === kendo_react_common_1.Keys.down) {
                switchFocus(function () { focusElement(inputRef.current || treeview); });
            }
        }
        else {
            if (altKey && keyCode === kendo_react_common_1.Keys.down) {
                event.preventDefault();
                openPopup(ev);
            }
        }
    }, [isOpen, opened, onOpen, onClose]);
    var onInputKeyDown = React.useCallback(function (event) {
        var keyCode = event.keyCode, altKey = event.altKey;
        if (altKey || (keyCode !== kendo_react_common_1.Keys.up && keyCode !== kendo_react_common_1.Keys.down)) {
            return;
        }
        event.preventDefault();
        switchFocus(keyCode === kendo_react_common_1.Keys.up ?
            function () { focusElement(elementRef.current); } :
            function () { focusElement(treeViewRef.current && treeViewRef.current.element); });
    }, []);
    var focusElement = React.useCallback(function (element) {
        if (element) {
            switchFocus(function () { return element.focus(); });
        }
    }, []);
    var onPopupOpened = React.useCallback(function () {
        if (!focused && isOpen && !opened) {
            closePopup({ target: target.current });
        }
        else {
            if (props.filterable) {
                focusElement(inputRef.current);
            }
            else {
                focusElement(treeViewRef.current && treeViewRef.current.element);
            }
        }
    }, [onClose, props.filterable, focused, opened, isOpen]);
    var onPopupClosed = React.useCallback(function () {
        if (focused) {
            // Move the focus from treeview to dropdown without triggering Focus or Blur events.
            focusElement(elementRef.current);
        }
    }, [focused]);
    var onFocus = React.useCallback(function (event) {
        if (!focused && !skipFocusRef.current) {
            setFocused(true);
            if (props.onFocus && target.current) {
                var focusEvent = {
                    syntheticEvent: event,
                    nativeEvent: event.nativeEvent,
                    target: target.current
                };
                props.onFocus.call(undefined, focusEvent);
            }
        }
    }, [focused, props.onFocus]);
    var onBlur = React.useCallback(function (event) {
        if (focused && !skipFocusRef.current && target.current) {
            setFocused(false);
            var ev = {
                syntheticEvent: event,
                nativeEvent: event.nativeEvent,
                target: target.current
            };
            if (props.onBlur) {
                var focusEvent = __assign({}, ev);
                props.onBlur.call(undefined, focusEvent);
            }
            closePopup(ev);
        }
    }, [focused, props.onBlur, isOpen, opened, onClose]);
    var onWrapperMouseDown = React.useCallback(function () {
        if (focused) {
            // moving focus from treeview to dropdown triggers Focus and Blur events.
            switchFocus(kendo_react_common_1.noop);
        }
    }, [focused]);
    var changeValue = React.useCallback(function (event, newValue, hierarchicalIndex) {
        if (props.onChange) {
            var changeEvent = __assign({ value: newValue, level: hierarchicalIndex ? toLevel(hierarchicalIndex) : [] }, event);
            props.onChange.call(undefined, changeEvent);
        }
        if (!controlled) {
            setStateValue(newValue);
        }
    }, [props.onChange, controlled]);
    var onChange = React.useCallback(function (event) {
        if ((0, utils_1.areSame)(event.item, value, dataItemKey) || !target.current) {
            return;
        }
        var item = event.item, itemHierarchicalIndex = event.itemHierarchicalIndex, nativeEvent = event.nativeEvent, syntheticEvent = event.syntheticEvent;
        var ev = {
            syntheticEvent: syntheticEvent,
            nativeEvent: nativeEvent,
            target: target.current
        };
        changeValue(ev, item, itemHierarchicalIndex);
        closePopup(ev);
    }, [controlled, value, props.onChange, dataItemKey, isOpen, opened, onClose]);
    var onClear = React.useCallback(function (event) {
        if (!target.current) {
            return;
        }
        var ev = {
            syntheticEvent: event,
            nativeEvent: event.nativeEvent,
            target: target.current
        };
        changeValue(ev, null);
        closePopup(ev);
        event.preventDefault();
    }, [controlled, props.onChange, isOpen, opened, onClose]);
    var onExpand = React.useCallback(function (event) {
        event.syntheticEvent.stopPropagation();
        if (props.onExpandChange && target.current) {
            var item = event.item, itemHierarchicalIndex = event.itemHierarchicalIndex, nativeEvent = event.nativeEvent, syntheticEvent = event.syntheticEvent;
            var expandEvent = {
                level: toLevel(itemHierarchicalIndex),
                item: item,
                nativeEvent: nativeEvent,
                syntheticEvent: syntheticEvent,
                target: target.current
            };
            props.onExpandChange.call(undefined, expandEvent);
        }
    }, [props.onExpandChange]);
    var onFilterChange = React.useCallback(function (event) {
        if (props.onFilterChange && target.current) {
            var filterDesc = { field: props.textField, operator: 'contains', value: event.target.value };
            var ev = {
                filter: filterDesc,
                syntheticEvent: event,
                nativeEvent: event.nativeEvent,
                target: target.current
            };
            props.onFilterChange.call(undefined, ev);
            if (props.filter === undefined) {
                setFilter(event.target.value);
            }
        }
    }, [props.onFilterChange, props.filter, props.textField]);
    var treeViewData = React.useMemo(function () {
        return (controlled || !hasValue) ? data :
            (0, kendo_react_common_1.mapTree)(data, subItemsField, function (item) {
                var _a;
                return (0, kendo_react_common_1.extendDataItem)(item, subItemsField, (_a = {}, _a[selectField] = (0, utils_1.areSame)(item, value, dataItemKey), _a));
            });
    }, [data, value, controlled, hasValue, selectField, subItemsField]);
    var NoData = props.listNoData || ListNoData_1.ListNoData;
    var ValueComponent = props.valueHolder || ValueHolder;
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var isValid = !validityStyles || validity.valid;
    var size = props.size, rounded = props.rounded, fillMode = props.fillMode;
    var dropdowntree = (React.createElement("span", { className: (0, kendo_react_common_1.classNames)('k-dropdowntree k-picker', props.className, (_a = {},
            _a["k-picker-".concat(sizeMap[size] || size)] = size,
            _a["k-rounded-".concat(roundedMap[rounded] || rounded)] = rounded,
            _a["k-picker-".concat(fillMode)] = fillMode,
            _a['k-focus'] = focused,
            _a['k-invalid'] = !isValid,
            _a['k-loading'] = props.loading,
            _a['k-required'] = required,
            _a['k-disabled'] = props.disabled,
            _a)), tabIndex: tabIndex, accessKey: props.accessKey, id: id, style: label ? __assign(__assign({}, style), { width: undefined }) : style, dir: dir, ref: elementRef, onKeyDown: disabled ? undefined : onWrapperKeyDown, onMouseDown: onWrapperMouseDown, onClick: disabled ? undefined : onWrapperClick, onFocus: onFocus, onBlur: onBlur, role: "combobox", "aria-haspopup": "true", "aria-expanded": isOpen, "aria-disabled": disabled, "aria-label": label, "aria-labelledby": props.ariaLabelledBy, "aria-describedby": props.ariaDescribedBy },
        React.createElement("span", { className: "k-input-inner" },
            React.createElement(ValueComponent, { item: value }, currentValueText || placeholder)),
        props.loading && React.createElement("span", { className: "k-icon k-i-loading k-input-loading-icon" }),
        hasValue && !disabled && (React.createElement("span", { onClick: onClear, className: "k-clear-value", title: localization.toLanguageString(messages_1.clear, messages_1.messages[messages_1.clear]), role: "button", tabIndex: -1, onMouseDown: function (e) { return e.preventDefault(); } },
            React.createElement("span", { className: "k-icon k-i-x" }))),
        React.createElement(kendo_react_buttons_1.Button, { tabIndex: -1, type: "button", "aria-label": "select", className: "k-input-button", size: size, fillMode: fillMode, themeColor: "base", rounded: null, icon: "caret-alt-down" }),
        React.createElement("select", { name: name, ref: selectRef, tabIndex: -1, "aria-hidden": true, title: label, style: { opacity: 0, width: 1, border: 0, zIndex: -1, position: 'absolute', left: '50%' } },
            React.createElement("option", { value: props.valueMap ? props.valueMap.call(undefined, value) : value })),
        React.createElement(kendo_react_popup_1.Popup, { className: (0, kendo_react_common_1.classNames)(popupSettings.className, { 'k-rtl': dir === 'rtl' }), popupClass: (0, kendo_react_common_1.classNames)(popupSettings.popupClass, 'k-list-container'), style: popupStyles, animate: popupSettings.animate, anchor: elementRef.current, show: isOpen, onOpen: onPopupOpened, onClose: onPopupClosed, appendTo: popupSettings.appendTo },
            props.filterable && (React.createElement(ListFilter_1.default, { value: props.filter === undefined ? filter : props.filter, inputRef: inputRef, onChange: onFilterChange, onKeyDown: onInputKeyDown, size: size, rounded: rounded, fillMode: fillMode })),
            data.length > 0 ? (React.createElement(kendo_react_treeview_1.TreeView, { ref: treeViewRef, tabIndex: tabIndex, data: treeViewData, focusIdField: dataItemKey, textField: props.textField, selectField: selectField, expandField: props.expandField, childrenField: subItemsField, expandIcons: true, onItemClick: onChange, onExpandChange: onExpand, size: size, item: props.item })) : (React.createElement(NoData, null, localization.toLanguageString(messages_1.nodata, messages_1.messages[messages_1.nodata]))))));
    return label ? (React.createElement(kendo_react_labels_1.FloatingLabel, { label: label, editorValue: currentValueText, editorPlaceholder: placeholder, editorValid: isValid, editorDisabled: disabled, editorId: id, style: { width: style ? style.width : undefined }, children: dropdowntree, dir: dir })) : dropdowntree;
});
var propTypes = {
    opened: PropTypes.bool,
    disabled: PropTypes.bool,
    dir: PropTypes.string,
    tabIndex: PropTypes.number,
    accessKey: PropTypes.string,
    data: PropTypes.array,
    value: PropTypes.any,
    valueMap: PropTypes.func,
    placeholder: PropTypes.string,
    dataItemKey: PropTypes.string.isRequired,
    textField: PropTypes.string.isRequired,
    selectField: PropTypes.string,
    expandField: PropTypes.string,
    subItemsField: PropTypes.string,
    className: PropTypes.string,
    style: PropTypes.object,
    label: PropTypes.string,
    validationMessage: PropTypes.string,
    validityStyles: PropTypes.bool,
    valid: PropTypes.bool,
    required: PropTypes.bool,
    name: PropTypes.string,
    id: PropTypes.string,
    ariaLabelledBy: PropTypes.string,
    ariaDescribedBy: PropTypes.string,
    filterable: PropTypes.bool,
    filter: PropTypes.string,
    loading: PropTypes.bool,
    popupSettings: PropTypes.shape({
        animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({
                openDuration: PropTypes.number,
                closeDuration: PropTypes.number
            })]),
        popupClass: PropTypes.string,
        className: PropTypes.string,
        appendTo: PropTypes.any,
        width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        height: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
    }),
    onOpen: PropTypes.func,
    onClose: PropTypes.func,
    onFocus: PropTypes.func,
    onBlur: PropTypes.func,
    onChange: PropTypes.func,
    onFilterChange: PropTypes.func,
    onExpandChange: PropTypes.func,
    item: PropTypes.func,
    valueHolder: PropTypes.func,
    listNoData: PropTypes.func
};
exports.DropDownTree.displayName = 'KendoReactDropDownTree';
exports.DropDownTree.defaultProps = defaultProps;
exports.DropDownTree.propTypes = propTypes;
