import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormComponent, FormComponentValidity } from '@progress/kendo-react-common';
import DropDownBase from '../common/DropDownBase';
import { DropDownListProps } from './DropDownListProps';
import { DropDownStateBase, InternalState } from './../common/settings';
/**
 * @hidden
 */
export interface DropDownListState extends DropDownStateBase {
}
/**
 * @hidden
 */
export declare class DropDownListWithoutContext extends React.Component<DropDownListProps, DropDownListState> implements FormComponent {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<boolean>;
        filter: PropTypes.Requireable<string>;
        virtual: PropTypes.Requireable<PropTypes.InferProps<{
            pageSize: PropTypes.Validator<number>;
            skip: PropTypes.Validator<number>;
            /**
             * @hidden
             */
            total: PropTypes.Validator<number>;
        }>>;
        onFilterChange: PropTypes.Requireable<(...args: any[]) => any>;
        onPageChange: PropTypes.Requireable<(...args: any[]) => any>;
        opened: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        dir: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        accessKey: PropTypes.Requireable<string>;
        data: PropTypes.Requireable<any[]>;
        textField: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        loading: PropTypes.Requireable<boolean>;
        popupSettings: PropTypes.Requireable<PropTypes.InferProps<{
            animate: PropTypes.Requireable<NonNullable<boolean | PropTypes.InferProps<{
                openDuration: PropTypes.Requireable<number>;
                closeDuration: PropTypes.Requireable<number>;
            }> | null | undefined>>;
            popupClass: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            appendTo: PropTypes.Requireable<any>;
            width: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
            height: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        }>>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        itemRender: PropTypes.Requireable<(...args: any[]) => any>;
        listNoDataRender: PropTypes.Requireable<(...args: any[]) => any>;
        focusedItemIndex: PropTypes.Requireable<(...args: any[]) => any>;
        header: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        footer: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        delay: PropTypes.Requireable<number>;
        ignoreCase: PropTypes.Requireable<boolean>;
        iconClassName: PropTypes.Requireable<string>;
        defaultItem: PropTypes.Requireable<any>;
        valueRender: PropTypes.Requireable<(...args: any[]) => any>;
        valueMap: PropTypes.Requireable<(...args: any[]) => any>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        ariaLabel: PropTypes.Requireable<string>;
        leftRightKeysNavigation: PropTypes.Requireable<boolean>;
        title: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        required: boolean;
        size: "small" | "medium" | "large" | null | undefined;
        rounded: "small" | "medium" | "full" | "large" | null | undefined;
        fillMode: "flat" | "outline" | "solid" | null | undefined;
        popupSettings: {
            height: string;
        };
        validityStyles: boolean;
        delay: number;
        tabIndex: number;
        ignoreCase: boolean;
    };
    /**
     * @hidden
     */
    readonly state: DropDownListState;
    private _element;
    private _typingTimeout;
    protected readonly base: DropDownBase;
    private searchState;
    private _select;
    private _skipFocusEvent;
    private _filterInput;
    private _valueDuringOnChange;
    private _navigated;
    constructor(props: DropDownListProps);
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    get element(): HTMLSpanElement | null;
    /**
     * The value of the DropDownList.
     */
    get value(): any;
    /**
     * The index of the selected item.
     */
    get index(): number;
    /**
     * Gets the `name` property of the DropDownList.
     */
    get name(): string | undefined;
    /**
     * Represents the validity state into which the DropDownList is set.
     */
    get validity(): FormComponentValidity;
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    protected get required(): boolean;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: DropDownListProps, prevState: DropDownListState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    handleItemSelect: (index: number, state: InternalState) => void;
    /**
     * @hidden
     */
    onNavigate(state: InternalState, keyCode: number): void;
    private componentRef;
    private dummySelect;
    private renderListContainer;
    private renderList;
    private renderListFilter;
    private renderDefaultItem;
    private search;
    private selectNext;
    private handleKeyDown;
    private handleItemClick;
    private handleFocus;
    private handleBlur;
    private handleDefaultItemClick;
    private handleWrapperClick;
    private handleKeyPress;
    private handleListFilterChange;
    private onPopupOpened;
    private onPopupClosed;
    private focusedIndex;
    private focusElement;
    private setValidity;
    private triggerOnChange;
    private applyState;
}
/**
 * Represents the PropsContext of the `DropDownList` component.
 * Used for global configuration of all `DropDownList` instances.
 *
 * For more information, refer to the [Dropdowns Props Context]({% slug props-context_dropdowns %}) article.
 */
export declare const DropDownListPropsContext: React.Context<(p: DropDownListProps) => DropDownListProps>;
/**
 * Represent the `ref` of the DropDownList component.
 */
export interface DropDownListHandle extends Pick<DropDownListWithoutContext, keyof DropDownListWithoutContext> {
    /**
     * The index of the selected item.
     */
    index: number;
    /**
     * Gets the `name` property of the DropDownList.
     */
    name: string | undefined;
    /**
     * Represents the validity state into which the DropDownList is set.
     */
    validity: FormComponentValidity;
    /**
     * The value of the DropDownList.
     */
    value: any;
}
/** @hidden */
export declare type DropDownList = DropDownListHandle;
/**
 * Represents the [KendoReact DropDownList component]({% slug overview_dropdownlist %}).
 *
 * Accepts properties of type [DropDownListProps]({% slug api_dropdowns_dropdownlistprops %}).
 * Obtaining the `ref` returns an object of type [DropDownListHandle]({% slug api_dropdowns_dropdownlisthandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    dropdownlist = null;
 *    render() {
 *       return (
 *          <div>
 *              <DropDownList
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.dropdownlist = component}
 *              />
 *              <button onClick={() => alert(this.dropdownlist.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const DropDownList: React.ForwardRefExoticComponent<DropDownListProps & React.RefAttributes<any>>;
