"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tableKeyboardNavigationTools = exports.getFilterColumnId = exports.getNextNavigationIndex = exports.findId = exports.findNextIdByCellIndex = exports.findNextIdByRowIndex = exports.getIdPrefix = exports.focusElement = exports.filterNavigatableElements = exports.getNavigatableElements = exports.getFocusableElements = exports.getBodyElement = exports.getHeaderElement = exports.getClosestScope = exports.getActiveElement = exports.getClosestNavigatableElement = exports.getNavigatableElement = exports.isNavigatable = exports.getNavigatableId = exports.getNavigatableLevel = exports.generateNavigatableId = void 0;
var constants_1 = require("./constants");
/**
 * @hidden
 */
var generateNavigatableId = function (navigationId, idPrefix, type) {
    if (type === void 0) { type = 'cell'; }
    return "".concat(idPrefix, "_").concat(navigationId, "_").concat(type);
};
exports.generateNavigatableId = generateNavigatableId;
/**
 * @hidden
 */
var getNavigatableLevel = function (element) {
    if (!element) {
        return;
    }
    return parseInt(element.getAttribute(constants_1.KEYBOARD_NAV_DATA_LEVEL) || '', 10);
};
exports.getNavigatableLevel = getNavigatableLevel;
/**
 * @hidden
 */
var getNavigatableId = function (element) {
    if (!element) {
        return;
    }
    var dataId = element.getAttribute(constants_1.KEYBOARD_NAV_DATA_ID);
    return dataId ? dataId : undefined;
};
exports.getNavigatableId = getNavigatableId;
/**
 * @hidden
 */
var isNavigatable = function (element) {
    if (!element) {
        return false;
    }
    var dataId = element.getAttribute(constants_1.KEYBOARD_NAV_DATA_ID);
    return Boolean(dataId);
};
exports.isNavigatable = isNavigatable;
/**
 * @hidden
 */
var getNavigatableElement = function (scope, options) {
    if (options === void 0) { options = { level: 0 }; }
    return scope.querySelector("[".concat(constants_1.KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']"));
};
exports.getNavigatableElement = getNavigatableElement;
/**
 * @hidden
 */
var getClosestNavigatableElement = function (target) {
    return (target.parentElement &&
        target.parentElement.closest("[".concat(constants_1.KEYBOARD_NAV_DATA_LEVEL, "]")));
};
exports.getClosestNavigatableElement = getClosestNavigatableElement;
/**
 * @hidden
 */
var getActiveElement = function (scope, activeId) {
    return scope.querySelector("[".concat(constants_1.KEYBOARD_NAV_DATA_ID, "='").concat(activeId, "']"));
};
exports.getActiveElement = getActiveElement;
/**
 * @hidden
 */
var getClosestScope = function (target) {
    return (target.parentElement &&
        target.parentElement.closest("[".concat(constants_1.KEYBOARD_NAV_DATA_SCOPE, "]")));
};
exports.getClosestScope = getClosestScope;
/**
 * @hidden
 */
var getHeaderElement = function (scope) {
    return scope.querySelector("[".concat(constants_1.KEYBOARD_NAV_DATA_HEADER, "]"));
};
exports.getHeaderElement = getHeaderElement;
/**
 * @hidden
 */
var getBodyElement = function (scope) {
    return scope.querySelector("[".concat(constants_1.KEYBOARD_NAV_DATA_BODY, "]"));
};
exports.getBodyElement = getBodyElement;
/**
 * @hidden
 */
var getFocusableElements = function (scope, options) {
    if (options === void 0) { options = { focusable: false }; }
    var selectors = options.focusable ? constants_1.FOCUSABLE_ELEMENTS : constants_1.TABBABLE_ELEMENTS;
    return Array.from(scope.querySelectorAll(selectors.join(',')));
};
exports.getFocusableElements = getFocusableElements;
/**
 * @hidden
 */
var getNavigatableElements = function (scope, options) {
    if (options === void 0) { options = { level: 0 }; }
    if (!scope) {
        return [];
    }
    var selector = constants_1.FOCUSABLE_ELEMENTS.map(function (el) { return el + "[".concat(constants_1.KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']"); }).join(',');
    return Array.from(scope.querySelectorAll(selector));
};
exports.getNavigatableElements = getNavigatableElements;
/**
 * @hidden
 */
var filterNavigatableElements = function (options) {
    if (options === void 0) { options = { level: 0 }; }
    var selector = constants_1.FOCUSABLE_ELEMENTS.map(function (sel) { return sel + "[".concat(constants_1.KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']"); }).join(',');
    return function (element) { return element.matches(selector); };
};
exports.filterNavigatableElements = filterNavigatableElements;
/**
 * @hidden
 */
var focusElement = function (options) {
    var elementForFocus = options.elementForFocus, event = options.event, contextStateRef = options.contextStateRef, prevElement = options.prevElement;
    if (contextStateRef.current && elementForFocus && elementForFocus.focus) {
        event.preventDefault();
        elementForFocus.focus();
        if ((0, exports.isNavigatable)(elementForFocus)) {
            elementForFocus.setAttribute('tabIndex', '0');
            contextStateRef.current.activeId = (0, exports.getNavigatableId)(elementForFocus);
        }
        if (prevElement && (0, exports.isNavigatable)(prevElement)) {
            prevElement.setAttribute('tabIndex', '-1');
        }
    }
};
exports.focusElement = focusElement;
/**
 * @hidden
 */
var getIdPrefix = function (navigationStateRef) {
    return navigationStateRef.current ? navigationStateRef.current.idPrefix : '';
};
exports.getIdPrefix = getIdPrefix;
/**
 * @hidden
 */
var findNextIdByRowIndex = function (initialRowIndex, cellIndex, elementId, matrix, isReverse) {
    if (!elementId) {
        return [];
    }
    var currentRowIndex = initialRowIndex + (isReverse ? -1 : 1);
    while (currentRowIndex >= 0 && currentRowIndex < matrix.length) {
        var currentId = matrix[currentRowIndex][cellIndex];
        if (currentId !== elementId) {
            return [currentId, [currentRowIndex, cellIndex]];
        }
        currentRowIndex = currentRowIndex + (isReverse ? -1 : 1);
    }
    return [];
};
exports.findNextIdByRowIndex = findNextIdByRowIndex;
/**
 * @hidden
 */
var findNextIdByCellIndex = function (rowIndex, initialCellIndex, elementId, matrix, isReverse) {
    if (!elementId) {
        return [];
    }
    var currentCellIndex = initialCellIndex + (isReverse ? -1 : 1);
    while (currentCellIndex >= 0 && currentCellIndex < matrix[rowIndex].length) {
        var currentId = matrix[rowIndex][currentCellIndex];
        if (currentId !== elementId) {
            return [currentId, [rowIndex, currentCellIndex]];
        }
        currentCellIndex = currentCellIndex + (isReverse ? -1 : 1);
    }
    return [];
};
exports.findNextIdByCellIndex = findNextIdByCellIndex;
/**
 * @hidden
 */
var findId = function (navigationMatrix, cellId) {
    if (!cellId) {
        return;
    }
    for (var rowIndex = 0; rowIndex < navigationMatrix.length; rowIndex++) {
        for (var cellIndex = 0; cellIndex < navigationMatrix[rowIndex].length; cellIndex++) {
            if (navigationMatrix[rowIndex][cellIndex] === cellId) {
                return [rowIndex, cellIndex];
            }
        }
    }
};
exports.findId = findId;
/**
 * @hidden
 */
var getNextNavigationIndex = function (navigationStateRef) {
    return navigationStateRef.current ? navigationStateRef.current.navigationMatrix.length : 0;
};
exports.getNextNavigationIndex = getNextNavigationIndex;
/**
 * @hidden
 */
var getFilterColumnId = function (columnId) {
    return columnId ? "".concat(columnId).concat(constants_1.KEYBOARD_NAV_FILTER_COL_SUFFIX) : '';
};
exports.getFilterColumnId = getFilterColumnId;
/**
 * @hidden
 */
exports.tableKeyboardNavigationTools = {
    generateNavigatableId: exports.generateNavigatableId,
    getNavigatableId: exports.getNavigatableId,
    getNavigatableLevel: exports.getNavigatableLevel,
    getNavigatableElement: exports.getNavigatableElement,
    getClosestNavigatableElement: exports.getClosestNavigatableElement,
    getActiveElement: exports.getActiveElement,
    getClosestScope: exports.getClosestScope,
    getHeaderElement: exports.getHeaderElement,
    getBodyElement: exports.getBodyElement,
    getFocusableElements: exports.getFocusableElements,
    getNavigatableElements: exports.getNavigatableElements,
    filterNavigatableElements: exports.filterNavigatableElements,
    focusElement: exports.focusElement,
    getIdPrefix: exports.getIdPrefix,
    isNavigatable: exports.isNavigatable,
    findNextIdByRowIndex: exports.findNextIdByRowIndex,
    findNextIdByCellIndex: exports.findNextIdByCellIndex,
    findId: exports.findId,
    getNextNavigationIndex: exports.getNextNavigationIndex,
    getFilterColumnId: exports.getFilterColumnId
};
