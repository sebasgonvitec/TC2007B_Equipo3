import * as React from 'react';
import { SortDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { TreeColumnBaseProps, ExtendedColumnProps } from './ColumnProps';
import { HeaderCellProps } from './HeaderCell';
import { SortSettings } from './SortSettings';
import { ColumnResize } from '../drag/ColumnResize';
import { ColumnDraggableProps } from '../drag/ColumnDraggable';
import { ColumnMenuProps } from '../columnmenu';
import { CellProps } from './CellProps';
import { FilterCellProps } from '../filteringCells';
/**
 * @hidden
 */
export interface HeaderRowProps<C = CellProps, H = HeaderCellProps, F = FilterCellProps> extends ColumnDraggableProps {
    sortable?: SortSettings;
    sortChange?: (e: React.SyntheticEvent<any>, descriptors: SortDescriptor[], field?: string) => void;
    sort?: SortDescriptor[];
    columns: ExtendedColumnProps<C, H, F>[];
    columnsMap: number[][];
    selectionChange: (e: any) => void;
    cellRender?: (defaultRendering: React.ReactNode | null, props: HeaderCellProps) => React.ReactNode;
    columnResize?: ColumnResize<C, H, F>;
    columnMenu?: React.ComponentType<ColumnMenuProps>;
    columnMenuFilter?: CompositeFilterDescriptor[];
    columnMenuFilterChange?: (e: React.SyntheticEvent<any>, filter: CompositeFilterDescriptor[], field?: string) => void;
}
/**
 * @hidden
 */
export declare class HeaderRow<C = CellProps, H = HeaderCellProps, F = FilterCellProps> extends React.Component<HeaderRowProps<C, H, F>, {}> {
    cellClick: (e: React.MouseEvent<HTMLSpanElement> | React.KeyboardEvent<HTMLElement>, column: TreeColumnBaseProps<C, H, F>) => void;
    cellKeyDown: (event: React.KeyboardEvent<HTMLElement>, column: TreeColumnBaseProps<C, H, F>) => void;
    sortIcon(sortIndex: number): false | (false | JSX.Element)[] | null;
    render(): JSX.Element[];
    private cells;
}
