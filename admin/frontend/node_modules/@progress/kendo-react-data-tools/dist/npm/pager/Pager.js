"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pager = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var PagerNumericButtons_1 = require("./PagerNumericButtons");
var PagerInput_1 = require("./PagerInput");
var PagerPageSizes_1 = require("./PagerPageSizes");
var messages_1 = require("../messages");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("../package-metadata");
/**
 * @hidden
 */
var RESPONSIVE_BREAKPOINT_MEDIUM = 600;
/**
 * @hidden
 */
var RESPONSIVE_BREAKPOINT_LARGE = 768;
var Pager = /** @class */ (function (_super) {
    __extends(Pager, _super);
    function Pager(props) {
        var _this = _super.call(this, props) || this;
        _this._element = null;
        _this.onPageChange = function (eventData, syntheticEvent) {
            var event = __assign({ target: _this, syntheticEvent: syntheticEvent, nativeEvent: syntheticEvent.nativeEvent }, eventData);
            if (_this.props.onPageChange) {
                _this.props.onPageChange.call(undefined, event);
            }
        };
        _this.changePage = function (page, event) {
            if (_this.props.onPageChange && page > 0 && page <= _this.totalPages) {
                _this.props.onPageChange({
                    target: _this,
                    skip: (page - 1) * _this.props.take,
                    take: _this.props.take,
                    syntheticEvent: event,
                    nativeEvent: event.nativeEvent
                });
            }
        };
        _this.onWindowResize = function () {
            var element = _this.element;
            if (!element || !_this.props.responsive) {
                return;
            }
            var width = element.offsetWidth;
            if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                element.classList.remove('k-pager-md');
                element.classList.add('k-pager-sm');
            }
            else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {
                element.classList.add('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
            else {
                element.classList.remove('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
        };
        (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
        return _this;
    }
    Object.defineProperty(Pager.prototype, "element", {
        /**
         * Returns the HTML element of the Pager component.
         */
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    Pager.prototype.componentDidMount = function () {
        window.addEventListener('resize', this.onWindowResize);
        this.onWindowResize();
    };
    /**
     * @hidden
     */
    Pager.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this.onWindowResize);
    };
    /**
     * @hidden
     */
    Pager.prototype.render = function () {
        var _this = this;
        var _a = this.props, skip = _a.skip, take = _a.take, total = _a.total, pageSizes = _a.pageSizes, messagesMap = _a.messagesMap;
        var localizationService = (0, kendo_react_intl_1.provideLocalizationService)(this);
        var intlService = (0, kendo_react_intl_1.provideIntlService)(this);
        var currentPage = Math.floor(skip / take) + 1;
        var changer = this.props.type === 'numeric' ?
            (React.createElement(PagerNumericButtons_1.PagerNumericButtons, { buttonCount: this.props.buttonCount || 0, totalPages: this.totalPages, currentPage: currentPage, pageChange: this.changePage, messagesMap: this.props.messagesMap })) : (React.createElement(PagerInput_1.PagerInput, { currentPage: currentPage, totalPages: this.totalPages, pageChange: this.changePage, messagesMap: messagesMap }));
        var firstPageMessage = messagesMap ? messagesMap(messages_1.pagerFirstPage) :
            ({ messageKey: messages_1.pagerFirstPage, defaultMessage: messages_1.messages[messages_1.pagerFirstPage] });
        var previousPageMessage = messagesMap ? messagesMap(messages_1.pagerPreviousPage) :
            ({ messageKey: messages_1.pagerPreviousPage, defaultMessage: messages_1.messages[messages_1.pagerPreviousPage] });
        var nextPageMessage = messagesMap ? messagesMap(messages_1.pagerNextPage) :
            ({ messageKey: messages_1.pagerNextPage, defaultMessage: messages_1.messages[messages_1.pagerNextPage] });
        var lastPageMessage = messagesMap ? messagesMap(messages_1.pagerLastPage) :
            ({ messageKey: messages_1.pagerLastPage, defaultMessage: messages_1.messages[messages_1.pagerLastPage] });
        var infoMessage = messagesMap ? messagesMap(messages_1.pagerInfo) :
            ({ messageKey: messages_1.pagerInfo, defaultMessage: messages_1.messages[messages_1.pagerInfo] });
        var ariaKeyshortcutsMessage = messagesMap ? messagesMap(messages_1.pagerAriaKeyshortcuts) :
            ({ messageKey: messages_1.pagerAriaKeyshortcuts, defaultMessage: messages_1.messages[messages_1.pagerAriaKeyshortcuts] });
        var ariaLabelMessage = messagesMap ? messagesMap(messages_1.pagerAriaLabel) :
            ({ messageKey: messages_1.pagerAriaLabel, defaultMessage: messages_1.messages[messages_1.pagerAriaLabel] });
        var first, prev, next, last;
        if (this.props.previousNext) {
            first = this.renderButton(1, 'k-link k-pager-nav k-pager-first' + (currentPage === 1 ? ' k-disabled' : ''), localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage), 'caret-alt-to-left', (currentPage === 1 ? true : undefined));
            prev = this.renderButton(currentPage - 1, 'k-link k-pager-nav' + (currentPage === 1 ? ' k-disabled' : ''), localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage), 'caret-alt-left', (currentPage === 1 ? true : undefined));
            next = this.renderButton(currentPage + 1, 'k-link k-pager-nav' + (currentPage >= this.totalPages ? ' k-disabled' : ''), localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage), 'caret-alt-right', (currentPage >= this.totalPages ? true : undefined));
            last = this.renderButton(this.totalPages, 'k-link k-pager-nav k-pager-last' + (currentPage >= this.totalPages ? ' k-disabled' : ''), localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage), 'caret-alt-to-right', (currentPage >= this.totalPages ? true : undefined));
        }
        var pagerPageSizes = pageSizes && (React.createElement(PagerPageSizes_1.PagerPageSizes, { pageChange: this.onPageChange, pageSize: take, pageSizes: pageSizes, messagesMap: messagesMap }));
        var info = this.props.info && (React.createElement("div", { className: "k-pager-info k-label" }, intlService
            .format(localizationService.toLanguageString(infoMessage.messageKey, infoMessage.defaultMessage), [
            Math.min(skip + 1, total),
            Math.min(skip + take, total),
            total
        ])));
        return (React.createElement("div", { className: (0, kendo_react_common_1.classNames)('k-pager k-widget', this.props.className), style: this.props.style, role: "application", "aria-roledescription": "pager", "aria-keyshortcuts": localizationService.toLanguageString(ariaKeyshortcutsMessage.messageKey, ariaKeyshortcutsMessage.defaultMessage), "aria-label": localizationService.toLanguageString(ariaLabelMessage.messageKey, ariaLabelMessage.defaultMessage), ref: function (element) { return _this._element = element; } },
            first,
            prev,
            changer,
            next,
            last,
            pagerPageSizes,
            info));
    };
    Pager.prototype.renderButton = function (page, className, title, icon, isDisabled) {
        var _this = this;
        return (React.createElement("a", { onClick: function (e) {
                e.preventDefault();
                _this.changePage(page, e);
            }, href: "#", className: className, title: title, role: "button", "aria-disabled": isDisabled },
            React.createElement(kendo_react_common_1.Icon, { name: icon })));
    };
    Object.defineProperty(Pager.prototype, "totalPages", {
        get: function () {
            return Math.ceil((this.props.total || 0) / this.props.take);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    Pager.propTypes = {
        className: PropTypes.string,
        style: PropTypes.object,
        total: PropTypes.number.isRequired,
        skip: PropTypes.number.isRequired,
        take: PropTypes.number.isRequired,
        buttonCount: PropTypes.number,
        info: PropTypes.bool,
        type: PropTypes.oneOf(['numeric', 'input']),
        pageSizes: PropTypes.arrayOf(PropTypes.number),
        previousNext: PropTypes.bool,
        onPageChange: PropTypes.func,
        messagesMap: PropTypes.func
    };
    /**
     * @hidden
     */
    Pager.defaultProps = {
        buttonCount: 10,
        info: true,
        type: 'numeric'
    };
    return Pager;
}(React.Component));
exports.Pager = Pager;
(0, kendo_react_intl_1.registerForIntl)(Pager);
(0, kendo_react_intl_1.registerForLocalization)(Pager);
