"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.throttle = exports.debounce = exports.domContainerFactory = exports.dateInRange = exports.shiftWeekNames = exports.intersects = exports.range = exports.isInSelectionRange = exports.isInDateRange = exports.isInRange = exports.getToday = exports.setTime = exports.isValidRange = exports.MAX_TIME = exports.MIN_TIME = exports.MAX_DATE = exports.MIN_DATE = exports.MIDNIGHT_DATE = exports.viewInRange = exports.nullable = exports.isEqualRange = void 0;
var kendo_date_math_1 = require("@progress/kendo-date-math");
var kendo_date_math_2 = require("@progress/kendo-date-math");
var SelectionRange_1 = require("./calendar/models/SelectionRange");
/**
 * @hidden
 */
var isEqualRange = function (initial, updated) {
    var _a = initial || SelectionRange_1.EMPTY_SELECTIONRANGE, initialStart = _a.start, initialEnd = _a.end;
    var _b = updated || SelectionRange_1.EMPTY_SELECTIONRANGE, updatedStart = _b.start, updatedEnd = _b.end;
    if (initialStart === null || initialEnd === null || updatedStart === null || updatedEnd === null) {
        return false;
    }
    return (0, kendo_date_math_1.isEqual)(initialStart, updatedStart) && (0, kendo_date_math_1.isEqual)(initialEnd, updatedEnd);
};
exports.isEqualRange = isEqualRange;
// Polyfill for PropTypes.null
/**
 * @hidden
 */
function nullable(subRequirement) {
    var check = function (required, props, key) {
        var rest = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            rest[_i - 3] = arguments[_i];
        }
        if (props[key] === null) {
            return null;
        }
        var sub = required ? subRequirement.isRequired : subRequirement;
        return sub.apply(void 0, __spreadArray([props, key], rest, false));
    };
    var fn = check.bind(null, false);
    fn.isRequired = check.bind(null, true);
    return fn;
}
exports.nullable = nullable;
/**
 * @hidden
 */
var viewInRange = function (candidate, min, max) {
    if (min === undefined || max === undefined) {
        return candidate;
    }
    return min <= candidate && candidate <= max
        ? candidate
        : candidate < min
            ? min
            : max;
};
exports.viewInRange = viewInRange;
/**
 * @hidden
 */
exports.MIDNIGHT_DATE = new Date(1980, 0, 1);
/**
 * @hidden
 */
exports.MIN_DATE = new Date(1900, 0, 1);
/**
 * @hidden
 */
exports.MAX_DATE = new Date(2099, 11, 31);
/**
 * @hidden
 */
exports.MIN_TIME = new Date(1980, 0, 1);
/**
 * @hidden
 */
exports.MAX_TIME = new Date(1980, 0, 1, 23, 59, 59);
var isSet = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
var isValidRange = function (min, max) { return (!isSet(min) || !isSet(max) || min <= max); };
exports.isValidRange = isValidRange;
/**
 * @hidden
 */
var setTime = function (origin, candidate) {
    var date = (0, kendo_date_math_1.cloneDate)(origin);
    date.setHours(candidate.getHours(), candidate.getMinutes(), candidate.getSeconds(), candidate.getMilliseconds());
    return date;
};
exports.setTime = setTime;
/**
 * @hidden
 */
var getToday = function () { return (0, kendo_date_math_2.getDate)(new Date()); };
exports.getToday = getToday;
/**
 * @hidden
 */
var isInRange = function (candidate, min, max) { return (!candidate || !((min && min > candidate) || (max && max < candidate))); };
exports.isInRange = isInRange;
/**
 * @hidden
 */
var isInDateRange = function (candidate, min, max) { return (candidate === null
    || !((min && (0, kendo_date_math_2.getDate)(min) > (0, kendo_date_math_2.getDate)(candidate))
        || (max && (0, kendo_date_math_2.getDate)(max) < (0, kendo_date_math_2.getDate)(candidate)))); };
exports.isInDateRange = isInDateRange;
/**
 * @hidden
 */
var isInSelectionRange = function (value, selectionRange) {
    var _a = selectionRange || SelectionRange_1.EMPTY_SELECTIONRANGE, start = _a.start, end = _a.end;
    if (!start || !end) {
        return false;
    }
    return start < value && value < end;
};
exports.isInSelectionRange = isInSelectionRange;
/**
 * @hidden
 */
var range = function (start, end, step) {
    if (step === void 0) { step = 1; }
    var result = [];
    for (var i = start; i < end; i = i + step) {
        result.push(i);
    }
    return result;
};
exports.range = range;
/**
 * @hidden
 */
var intersects = function (date, min, max) {
    return min.getTime() <= date.getTime() && date.getTime() <= max.getTime();
};
exports.intersects = intersects;
/**
 * @hidden
 */
var shiftWeekNames = function (names, offset) { return (names.slice(offset).concat(names.slice(0, offset))); };
exports.shiftWeekNames = shiftWeekNames;
/**
 * @hidden
 */
var dateInRange = function (candidate, min, max) {
    if (!candidate) {
        return candidate;
    }
    if (min && candidate < min) {
        return (0, kendo_date_math_1.cloneDate)(min);
    }
    if (max && candidate > max) {
        return (0, kendo_date_math_1.cloneDate)(max);
    }
    return candidate;
};
exports.dateInRange = dateInRange;
/**
 * @hidden
 */
var domContainerFactory = function (type) { return function (children, classes, styles) {
    if (classes === void 0) { classes = ''; }
    if (styles === void 0) { styles = {}; }
    var container = document.createElement(type);
    container.className = classes;
    Object.keys(styles).map(function (key) { return container.style[key] = styles[key]; });
    if (typeof children === 'string') {
        container.innerHTML = children || '';
    }
    else {
        (children || []).forEach(function (child) { return child && container.appendChild(child); });
    }
    return container;
}; };
exports.domContainerFactory = domContainerFactory;
/**
 * @hidden
 */
function debounce(func, wait, options) {
    if (options === void 0) { options = {}; }
    var lastArgs;
    var lastThis;
    var maxWait = options.maxWait;
    var result;
    var timerId;
    var lastCallTime;
    var root = window;
    var lastInvokeTime = 0;
    var leading = false;
    var maxing = false;
    var trailing = true;
    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.
    var useRAF = (!wait && wait !== 0 && typeof root.requestAnimationFrame === 'function');
    if (typeof func !== 'function') {
        throw new TypeError('Expected a function');
    }
    wait = +wait || 0;
    function invokeFunc(time) {
        var args = lastArgs;
        var thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function startTimer(pendingFunc, tmr) {
        if (useRAF) {
            root.cancelAnimationFrame(timerId);
            return root.requestAnimationFrame(pendingFunc);
        }
        return setTimeout(pendingFunc, tmr);
    }
    function cancelTimer(id) {
        if (useRAF) {
            return root.cancelAnimationFrame(id);
        }
        clearTimeout(id);
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = startTimer(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime;
        var timeSinceLastInvoke = time - lastInvokeTime;
        var timeWaiting = wait - timeSinceLastCall;
        return maxing
            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime;
        var timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }
    function timerExpired() {
        var time = Date.now();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        // Restart the timer.
        timerId = startTimer(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) {
            cancelTimer(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(Date.now());
    }
    function pending() {
        return timerId !== undefined;
    }
    function debounced() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var time = Date.now();
        var isInvoking = shouldInvoke(time);
        lastArgs = args;
        /* @ts-ignore */
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                // Handle invocations in a tight loop.
                timerId = startTimer(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = startTimer(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    debounced.pending = pending;
    return debounced;
}
exports.debounce = debounce;
/**
 * @hidden
 */
function throttle(func, wait) {
    return debounce(func, wait, {
        leading: true,
        trailing: true,
        'maxWait': wait
    });
}
exports.throttle = throttle;
