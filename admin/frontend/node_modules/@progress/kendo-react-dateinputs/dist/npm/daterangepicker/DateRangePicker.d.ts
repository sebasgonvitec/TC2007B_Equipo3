import * as React from 'react';
import * as PropTypes from 'prop-types';
import { DateInput } from '../dateinput/DateInput';
import { MultiViewCalendar, MultiViewCalendarHandle } from '../calendar/components/MultiViewCalendar';
import { SelectionRange } from '../calendar/models';
import { DateRangePickerSettings } from './models';
/**
 * @hidden
 */
export interface ReverseClickEvent {
    syntheticEvent: React.SyntheticEvent<any>;
    nativeEvent?: any;
}
/**
 * The arguments for the `onChange` event of the DateRangePicker.
 */
export interface DateRangePickerChangeEvent {
    syntheticEvent: React.SyntheticEvent<any>;
    nativeEvent?: any;
    value: SelectionRange;
    show?: boolean;
    target: DateRangePicker;
}
/**
 * Represents the props of the [KendoReact DateRangePicker component]({% slug overview_daterangepicker %}).
 */
export interface DateRangePickerProps extends DateRangePickerSettings {
    /**
     * Overrides the validity state of the component.
     * If `valid` is set, the `required` property will be ignored.
     *
     * This property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.
     */
    valid?: boolean;
    /**
     * Sets the default value of the DateRangePicker ([see example]({% slug default_value_daterangepicker %})).
     */
    defaultValue?: SelectionRange;
    /**
     * Fires each time the user selects a part of a date range ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).
     */
    onChange?: (event: DateRangePickerChangeEvent) => void;
    /**
     * Specifies the selected date range of the DateRangePicker ([see example]({% slug controlled_daterangepicker %}#toc-controlling-the-value)).
     *
     * > The `value` has to be an object with `start` and `end` valid JavaScript [`Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instances or `null`.
     */
    value?: SelectionRange;
}
/**
 * @hidden
 */
export interface DateRangePickerState {
    show: boolean;
    value: SelectionRange;
}
/** @hidden */
export declare class DateRangePickerWithoutContext extends React.Component<DateRangePickerProps, DateRangePickerState> {
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        allowReverse: PropTypes.Requireable<boolean>;
        calendarSettings: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<string>;
        defaultShow: PropTypes.Requireable<boolean>;
        defaultValue: PropTypes.Validator<SelectionRange>;
        disabled: PropTypes.Requireable<boolean>;
        endDateInputSettings: PropTypes.Requireable<PropTypes.InferProps<{
            value: PropTypes.Requireable<Date>;
            format: PropTypes.Requireable<NonNullable<string | PropTypes.InferProps<{
                skeleton: PropTypes.Requireable<string>;
                pattern: PropTypes.Requireable<string>;
                date: PropTypes.Requireable<string>;
                time: PropTypes.Requireable<string>;
                datetime: PropTypes.Requireable<string>;
                era: PropTypes.Requireable<string>;
                year: PropTypes.Requireable<string>;
                month: PropTypes.Requireable<string>;
                day: PropTypes.Requireable<string>;
                weekday: PropTypes.Requireable<string>;
                hour: PropTypes.Requireable<string>;
                hour12: PropTypes.Requireable<boolean>;
                minute: PropTypes.Requireable<string>;
                second: PropTypes.Requireable<string>;
                timeZoneName: PropTypes.Requireable<string>;
            }> | null | undefined>>;
            formatPlaceholder: PropTypes.Requireable<NonNullable<"short" | "narrow" | "wide" | "formatPattern" | PropTypes.InferProps<{
                year: PropTypes.Requireable<string>;
                month: PropTypes.Requireable<string>;
                day: PropTypes.Requireable<string>;
                hour: PropTypes.Requireable<string>;
                minute: PropTypes.Requireable<string>;
                second: PropTypes.Requireable<string>;
            }> | null | undefined>>;
            width: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
            tabIndex: PropTypes.Requireable<number>;
            title: PropTypes.Requireable<string>;
            steps: PropTypes.Requireable<PropTypes.InferProps<{
                year: PropTypes.Requireable<number>;
                month: PropTypes.Requireable<number>;
                day: PropTypes.Requireable<number>;
                hour: PropTypes.Requireable<number>;
                minute: PropTypes.Requireable<number>;
                second: PropTypes.Requireable<number>;
            }>>;
            min: PropTypes.Requireable<Date>;
            max: PropTypes.Requireable<Date>;
            disabled: PropTypes.Requireable<boolean>;
            spinners: PropTypes.Requireable<boolean>;
            name: PropTypes.Requireable<string>;
            dir: PropTypes.Requireable<string>;
            label: PropTypes.Requireable<string>;
            id: PropTypes.Requireable<string>;
            ariaLabelledBy: PropTypes.Requireable<string>;
            ariaDescribedBy: PropTypes.Requireable<string>;
            ariaLabel: PropTypes.Requireable<string>;
            ariaRole: PropTypes.Requireable<string>;
            ariaExpanded: PropTypes.Requireable<NonNullable<boolean | null | undefined>>;
            onChange: PropTypes.Requireable<(...args: any[]) => any>;
            validationMessage: PropTypes.Requireable<string>;
            required: PropTypes.Requireable<boolean>;
            validate: PropTypes.Requireable<boolean>;
            valid: PropTypes.Requireable<boolean>;
            size: PropTypes.Requireable<"small" | "medium" | "large" | null | undefined>;
            rounded: PropTypes.Requireable<"small" | "medium" | "full" | "large" | null | undefined>; /**
             * Gets the start DateInput component inside the DatePicker component.
             */
            fillMode: PropTypes.Requireable<"flat" | "outline" | "solid" | null | undefined>;
        }>>;
        focusedDate: PropTypes.Requireable<Date>;
        format: PropTypes.Requireable<NonNullable<string | PropTypes.InferProps<{
            skeleton: PropTypes.Requireable<string>;
            pattern: PropTypes.Requireable<string>;
            date: PropTypes.Requireable<string>;
            time: PropTypes.Requireable<string>;
            datetime: PropTypes.Requireable<string>;
            era: PropTypes.Requireable<string>;
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            weekday: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            hour12: PropTypes.Requireable<boolean>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
            timeZoneName: PropTypes.Requireable<string>;
        }> | null | undefined>>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        max: PropTypes.Requireable<Date>;
        min: PropTypes.Requireable<Date>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        popupSettings: PropTypes.Requireable<any>;
        show: PropTypes.Requireable<boolean>;
        startDateInputSettings: PropTypes.Requireable<any>;
        style: PropTypes.Requireable<any>;
        swapButton: PropTypes.Requireable<any>;
        tabIndex: PropTypes.Requireable<number>;
        value: PropTypes.Validator<SelectionRange>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        allowReverse: boolean;
        defaultShow: boolean;
        defaultValue: SelectionRange;
        disabled: boolean;
        format: string;
        max: Date;
        min: Date;
        swapButton: boolean;
    };
    private _element;
    private _calendar;
    private _startDateInput;
    private _endDateInput;
    private valueDuringOnChange?;
    private showDuringOnChange?;
    private nextTickId;
    private _popupId;
    private _startInputId;
    private _endInputId;
    private shouldFocusDateInput;
    private shouldFocusCalendar;
    constructor(props: DateRangePickerProps);
    /**
     * Gets the wrapping element of the DateRangePicker.
     */
    get element(): HTMLSpanElement | null;
    /**
     * Gets the start DateInput component inside the DatePicker component.
     */
    get startDateInput(): DateInput | null;
    /**
     * Gets the end DateInput component inside the DatePicker component.
     */
    get endDateInput(): DateInput | null;
    /**
     * Gets the MultiVieCalendar inside the DateRangePicker.
     */
    get calendar(): MultiViewCalendar | null;
    /**
     * Gets the value of the DateRangePicker.
     */
    get value(): SelectionRange;
    /**
     * Gets the popup state of the DateRangePicker.
     */
    get show(): boolean;
    protected get min(): Date;
    protected get max(): Date;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    protected setCalendarRef: (calendar: MultiViewCalendarHandle | null) => void;
    protected focusCalendarElement: () => void;
    protected focusDateInputElement(): void;
    protected calculateValue: (props: DateRangePickerProps, state: DateRangePickerState) => SelectionRange;
    protected calculateShow: (nextProps: DateRangePickerProps, nextState: DateRangePickerState) => boolean;
    protected nextTick(f: () => any): void;
    protected setShow(show: boolean): void;
    private handleReverseClick;
    private handleReverseMouseDown;
    private handleFocus;
    private handleBlur;
    private handleEndChange;
    private handleStartChange;
    private extractRangeFromValue;
    private handleCalendarChange;
    private handleKeyDown;
    private handleChange;
}
/**
 * Represents the PropsContext of the `DateRangePicker` component.
 * Used for global configuration of all `DateRangePicker` instances.
 *
 * For more information, refer to the [DateInputs Props Context]({% slug props-context_dateinputs %}) article.
 */
export declare const DateRangePickerPropsContext: React.Context<(p: DateRangePickerProps) => DateRangePickerProps>;
/**
 * Represent the `ref` of the DateRangePicker component.
 */
export interface DateRangePickerHandle extends Pick<DateRangePickerWithoutContext, keyof DateRangePickerWithoutContext> {
    /**
     * Gets the MultiVieCalendar inside the DateRangePicker.
     */
    calendar: MultiViewCalendar | null;
    /**
     * Returns the HTML element of the DateRangePicker component.
     */
    element: HTMLSpanElement | null;
    /**
     * Gets the end DateInput component inside the DateRangePicker component.
     */
    endDateInput: DateInput | null;
    /**
     * Gets the start DateInput component inside the DateRangePicker component.
     */
    startDateInput: DateInput | null;
    /**
     * Gets the value of the DateRangePicker.
     */
    value: SelectionRange;
}
/** @hidden */
export declare type DateRangePicker = DateRangePickerHandle;
/**
 * Represents the KendoReact DateRangePicker Component.
 *
 * Accepts properties of type [DateRangePickerProps]({% slug api_dateinputs_daterangepickerprops %}).
 * Obtaining the `ref` returns an object of type [DateRangePickerHandle]({% slug api_dateinputs_daterangepickerhandle %}).
 */
export declare const DateRangePicker: React.ForwardRefExoticComponent<DateRangePickerProps & React.RefAttributes<any>>;
