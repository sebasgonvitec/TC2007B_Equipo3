import * as React from 'react';
import { DateFormatOptions } from '@progress/kendo-react-intl';
import { Calendar, CalendarProps } from '../calendar/components/Calendar';
import { TimePart } from '../timepicker/TimePart';
import { DateInputIncrementalSteps } from '../dateinput/models';
/**
 * @hidden
 */
export interface DateTimeSelectorChangeEvent<T = DateTimeSelector> {
    nativeEvent?: any;
    syntheticEvent: React.SyntheticEvent<any>;
    value: Date | null;
    target: T;
    cancelButton?: boolean;
}
/**
 * @hidden
 */
export interface DateTimeSelectorRejectEvent<T = DateTimeSelector> {
    nativeEvent?: any;
    syntheticEvent: React.SyntheticEvent<any>;
    value: Date | null;
    target: T;
    cancelButton?: boolean;
}
/**
 * @hidden
 */
export interface DateTimeSelectorProps<T = DateTimeSelector> {
    value: Date | null;
    onChange: (event: DateTimeSelectorChangeEvent<T>) => void;
    onReject: (event: DateTimeSelectorRejectEvent<T>) => void;
    disabled?: boolean;
    cancelButton?: boolean;
    min: Date;
    max: Date;
    minTime?: Date;
    maxTime?: Date;
    weekNumber?: boolean;
    focusedDate?: Date;
    format?: string | DateFormatOptions;
    calendar?: React.ComponentType<CalendarProps<any>>;
    steps?: DateInputIncrementalSteps;
}
/**
 * @hidden
 */
export interface DateTimeSelectorState {
    tab: 'date' | 'time';
    dateValue: Date | null;
    timeValue: Date;
}
/**
 * @hidden
 */
export declare class DateTimeSelector extends React.Component<DateTimeSelectorProps, DateTimeSelectorState> {
    private _calendar;
    private _timePart;
    private _cancelButton;
    private _acceptButton;
    private _calendarWrap;
    private shouldFocusPart;
    get calendar(): Calendar | null;
    get timePart(): TimePart | null;
    protected get hasDateValue(): boolean;
    constructor(props: DateTimeSelectorProps);
    componentDidUpdate(): void;
    render(): JSX.Element;
    focus: (args?: any) => void;
    private calendarElement;
    protected get minTime(): Date | null;
    protected get maxTime(): Date | null;
    protected normalizeRange(candidate: Date, value: Date | null): Date | null;
    protected hasActiveButton(): boolean | null;
    protected mergeTime(current: Date | null, candidate: Date | null): Date | null;
    protected mergeDate(candidate: Date | null, value: Date): Date | null;
    protected move: (direction: 'left' | 'right') => void;
    private handleReject;
    private handleAccept;
    private handleNowClick;
    private handleCalendarValueChange;
    private handleTimeListContainerChange;
    private handleDateClick;
    private handleTimeClick;
    private handleKeyDown;
    private handleTimePartMount;
}
