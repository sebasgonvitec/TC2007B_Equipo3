"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HorizontalViewList = void 0;
var React = require("react");
var View_1 = require("./View");
var models_1 = require("../models");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var defaults_1 = require("../../defaults");
var DEFAULT_FETCH_MONTHS_COUNT = 2;
/**
 * @hidden
 */
var HorizontalViewList = /** @class */ (function (_super) {
    __extends(HorizontalViewList, _super);
    function HorizontalViewList(props) {
        var _this = _super.call(this, props) || this;
        _this._element = null;
        _this.isActive = false;
        _this.focusActiveDate = function () {
            if (!_this._element) {
                return;
            }
            var focusedCell = _this._element.querySelector('td.k-focus');
            var nextActiveCell = _this._element.querySelector('.k-state-pending-focus');
            if (focusedCell && focusedCell[0]) {
                focusedCell[0].classList.remove('k-focus');
            }
            if (nextActiveCell) {
                nextActiveCell.classList.add('k-focus');
            }
            _this.isActive = true;
        };
        _this.blurActiveDate = function () {
            if (!_this._element) {
                return;
            }
            var focusedCell = _this._element.querySelector('td.k-focus');
            if (focusedCell) {
                focusedCell.classList.remove('k-focus');
            }
            _this.isActive = false;
        };
        _this.rotateSelectionRange = function (selectionRange) {
            if (selectionRange.start === null || selectionRange.end === null) {
                return selectionRange;
            }
            var needRotate = selectionRange.end < selectionRange.start;
            return {
                start: needRotate ? selectionRange.end : selectionRange.start,
                end: needRotate ? selectionRange.start : selectionRange.end
            };
        };
        _this.handleDateChange = function (event, isTodayClick) {
            if (isTodayClick === void 0) { isTodayClick = false; }
            var onChange = _this.props.onChange;
            if (onChange) {
                var args = {
                    syntheticEvent: event.syntheticEvent,
                    nativeEvent: event.nativeEvent,
                    value: (0, kendo_date_math_1.cloneDate)(event.value),
                    target: _this,
                    isTodayClick: isTodayClick
                };
                onChange.call(undefined, args);
            }
        };
        return _this;
    }
    Object.defineProperty(HorizontalViewList.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HorizontalViewList.prototype, "weekNumber", {
        get: function () {
            return Boolean(this.props.showWeekNumbers && this.props.activeView === models_1.CalendarViewEnum.month);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HorizontalViewList.prototype, "min", {
        get: function () {
            return this.props.min !== undefined
                ? this.props.min
                : HorizontalViewList.defaultProps.min;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HorizontalViewList.prototype, "max", {
        get: function () {
            return this.props.max !== undefined
                ? this.props.max
                : HorizontalViewList.defaultProps.max;
        },
        enumerable: false,
        configurable: true
    });
    HorizontalViewList.prototype.componentDidUpdate = function () {
        if (this.isActive) {
            this.focusActiveDate();
        }
    };
    HorizontalViewList.prototype.render = function () {
        var _this = this;
        var selectionRange = this.props.allowReverse
            ? this.rotateSelectionRange(this.props.selectionRange)
            : this.props.selectionRange;
        var rootClassNames = (0, kendo_react_common_1.classNames)('k-calendar-view k-hstack k-align-items-start k-justify-content-center', {
            'k-calendar-monthview': this.props.activeView === models_1.CalendarViewEnum.month,
            'k-calendar-yearview': this.props.activeView === models_1.CalendarViewEnum.year,
            'k-calendar-decadeview': this.props.activeView === models_1.CalendarViewEnum.decade,
            'k-calendar-centuryview': this.props.activeView === models_1.CalendarViewEnum.century
        });
        return (React.createElement("div", { ref: function (el) { _this._element = el; }, className: rootClassNames }, this.props.dates.map(function (date) { return (React.createElement("table", { className: "k-calendar-table k-content", key: date.getTime(), role: "grid" },
            React.createElement(View_1.View, { bus: _this.props.bus, service: _this.props.service, key: date.getTime(), direction: "horizontal", activeView: _this.props.activeView, cellUID: _this.props.cellUID, viewDate: date, min: _this.min, max: _this.max, focusedDate: _this.props.focusedDate, selectionRange: selectionRange, selectedDate: _this.props.value, showWeekNumbers: _this.weekNumber, onChange: _this.handleDateChange, onCellEnter: _this.props.onCellEnter, cell: _this.props.cell, weekCell: _this.props.weekCell }))); })));
    };
    HorizontalViewList.defaultProps = {
        showWeekNumbers: false,
        views: DEFAULT_FETCH_MONTHS_COUNT,
        take: DEFAULT_FETCH_MONTHS_COUNT,
        allowReverse: true,
        min: defaults_1.MIN_DATE,
        max: defaults_1.MAX_DATE
    };
    return HorizontalViewList;
}(React.Component));
exports.HorizontalViewList = HorizontalViewList;
