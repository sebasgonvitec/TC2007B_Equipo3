import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Virtualization } from '../../virtualization/Virtualization';
import { BusViewService, DOMService } from '../services';
import { CalendarCellProps } from './CalendarCell';
import { ViewService, CalendarViewEnum } from '../models';
import { CalendarWeekCellProps } from './CalendarWeekCell';
import { CalendarHeaderTitleProps } from './CalendarHeaderTitle';
/**
 * @hidden
 */
export interface ViewListEventArguments {
    syntheticEvent: React.SyntheticEvent<any>;
    nativeEvent?: any;
    value: Date;
    target: ViewList;
    isTodayClick?: boolean;
}
/**
 * @hidden
 */
export interface ViewListProps {
    activeView: CalendarViewEnum;
    bottomOffset?: number;
    bus: BusViewService;
    cellUID: string;
    dom: DOMService;
    focusedDate: Date;
    max: Date;
    min: Date;
    cell?: React.ComponentType<CalendarCellProps>;
    onScroll?: (event: React.SyntheticEvent) => void;
    onChange?: (event: ViewListEventArguments) => void;
    service: ViewService;
    showWeekNumbers?: boolean;
    smoothScroll?: boolean;
    take?: number;
    value: Date | null;
    viewHeight?: number;
    viewOffset?: number;
    weekCell?: React.ComponentType<CalendarWeekCellProps>;
    headerTitle?: React.ComponentType<CalendarHeaderTitleProps>;
    shouldScroll?: () => boolean;
    tabIndex?: number;
}
/**
 * @hidden
 */
export interface ViewListState {
    skip: number;
    index: number;
}
/**
 * @hidden
 */
export declare class ViewList extends React.Component<ViewListProps, ViewListState> {
    static propTypes: {
        activeView: PropTypes.Validator<number>;
        bottomOffset: PropTypes.Requireable<number>;
        cellUID: PropTypes.Validator<string>;
        focusedDate: PropTypes.Validator<Date>;
        max: PropTypes.Validator<Date>;
        min: PropTypes.Validator<Date>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        showWeekNumbers: PropTypes.Requireable<boolean>;
        smoothScroll: PropTypes.Requireable<boolean>;
        take: PropTypes.Requireable<number>;
        value: PropTypes.Requireable<Date>;
        viewHeight: PropTypes.Requireable<number>;
        viewOffset: PropTypes.Requireable<number>;
        tabIndex: PropTypes.Requireable<number>;
    };
    static defaultProps: {
        take: number;
        showWeekNumbers: boolean;
        smoothScroll: boolean;
    };
    virtualization: Virtualization | null;
    private calendarView;
    private table;
    private intl;
    private bottomOffset;
    private viewOffset;
    private viewHeight;
    private _element;
    private lastView;
    private isActive;
    private animateToIndex;
    private shouldScroll;
    private indexToScroll?;
    private lastFocus;
    get element(): HTMLDivElement | null;
    protected get weekNames(): string[];
    protected get weekNumber(): boolean;
    protected get take(): number;
    protected get animate(): boolean;
    protected get todayIsInRange(): boolean;
    constructor(props: ViewListProps);
    componentDidUpdate(_prevProps: ViewListProps, _prevState: ViewListState): void;
    focusActiveDate: () => void;
    blurActiveDate: () => void;
    render(): JSX.Element;
    protected handleVirtualizationMount: (virtualization: Virtualization) => void;
    protected buildMonthView: (cols: any[], weekNames: any[]) => JSX.Element;
    protected buildDates: (cols: any[], dates: Date[]) => JSX.Element;
    protected calculateHeights: () => void;
    protected getTake: (skip: number, total: number) => number;
    private handleScrollAction;
    private handleTodayClick;
    private handleDateChange;
}
