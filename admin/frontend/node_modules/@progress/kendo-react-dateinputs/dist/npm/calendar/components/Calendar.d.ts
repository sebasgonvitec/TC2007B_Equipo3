import * as React from 'react';
import * as PropTypes from 'prop-types';
import { CalendarViewEnum, ActiveView, CalendarSettings } from '../models';
import { DOMService, ScrollSyncService } from '../services';
/**
 * The arguments for the `change` event of the Calendar. The generic argument sets the target type of the event. Defaults to `Calendar`.
 */
export interface CalendarChangeEvent<T = Calendar> {
    /**
     * A native DOM event.
     */
    nativeEvent?: any;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.SyntheticEvent<any>;
    /**
     * The new value.
     */
    value: Date;
    /**
     * The Calendar element.
     */
    target: T;
}
/**
 * Represents the props of the [KendoReact Calendar component]({% slug overview_calendar %}). The generic argument is passed to the `onChange` property and is used as a target in the [`CalendarChangeEvent`]({% slug api_dateinputs_calendarchangeevent %}) interface.
 */
export interface CalendarProps<T = any> extends CalendarSettings {
    /** @hidden */
    _ref?: (instance: {
        element: HTMLDivElement | null;
    }) => void;
    /**
     * Sets the default value of the Calendar.
     */
    defaultValue?: Date | null;
    /**
     * An event that is called after the value of the Calendar has changed.
     */
    onChange?: (event: CalendarChangeEvent<T>) => void;
    /**
     * Sets the value of the Calendar.
     */
    value?: Date | null;
}
/**
 * @hidden
 */
export interface CalendarState {
    value: Date | null;
    activeView: CalendarViewEnum;
    focusedDate: Date;
}
/** @hidden */
export declare class CalendarWithoutContext extends React.Component<CalendarProps, CalendarState> {
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        className: PropTypes.Requireable<string>;
        defaultActiveView: PropTypes.Requireable<ActiveView>;
        defaultValue: PropTypes.Requireable<Date>;
        disabled: PropTypes.Requireable<boolean>;
        focusedDate: PropTypes.Requireable<Date>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        max: PropTypes.Requireable<Date>;
        min: PropTypes.Requireable<Date>;
        navigation: PropTypes.Requireable<boolean>;
        smoothScroll: PropTypes.Requireable<boolean>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        tabIndex: PropTypes.Requireable<number>;
        value: PropTypes.Requireable<Date>;
        weekNumber: PropTypes.Requireable<boolean>;
        topView: (props: CalendarProps, propName: keyof CalendarProps<any>, componentName: string) => Error | null;
        bottomView: (props: CalendarProps, propName: keyof CalendarProps<any>, componentName: string) => Error | null;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        disabled: boolean;
        min: Date;
        max: Date;
        navigation: boolean;
        defaultActiveView: ActiveView;
        defaultValue: null;
        smoothScroll: boolean;
        topView: ActiveView;
        bottomView: ActiveView;
    };
    protected dom: DOMService;
    protected scrollSyncService: ScrollSyncService | null;
    private valueDuringOnChange?;
    private focusedDate;
    private cellUID;
    private id;
    private Navigation;
    private calendarViewList;
    private _element;
    private intl;
    private bus;
    private service;
    private navigation;
    private isActive;
    private oldValue;
    private didNavigationChange;
    /**
     * Gets the wrapping element of the Calendar.
     */
    get element(): HTMLDivElement | null;
    /**
     * Gets the value of the Calendar.
     */
    get value(): Date | null;
    protected get min(): Date;
    protected get max(): Date;
    protected get bottomView(): CalendarViewEnum;
    protected get topView(): CalendarViewEnum;
    constructor(props: CalendarProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(_: CalendarProps, prevState: CalendarState): void;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private shouldScroll;
    private handleScroll;
    private handleNavigationChange;
    private handleViewChange;
    private handleDateChange;
    private handleFocus;
    private handleBlur;
    private handleKeyDown;
    private handleMouseDown;
    private handleClick;
}
/**
 * Represents the PropsContext of the `Calendar` component.
 * Used for global configuration of all `Calendar` instances.
 *
 * For more information, refer to the [DateInputs Props Context]({% slug props-context_dateinputs %}) article.
 */
export declare const CalendarPropsContext: React.Context<(p: CalendarProps<any>) => CalendarProps<any>>;
/**
 * Represent the `ref` of the Calendar component.
 */
export interface CalendarHandle extends Pick<CalendarWithoutContext, keyof CalendarWithoutContext> {
    /**
     * Returns the HTML element of the Calendar component.
     */
    element: HTMLDivElement | null;
    /**
     * Returns the `value` of the Calendar component.
     */
    value: Date | null;
}
/** @hidden */
export declare type Calendar = CalendarHandle;
/**
 * Represents the KendoReact Calendar Component.
 *
 * Accepts properties of type [CalendarProps]({% slug api_dateinputs_calendarprops %}).
 * Obtaining the `ref` returns an object of type [CalendarHandle]({% slug api_dateinputs_calendarhandle %}).
 */
export declare const Calendar: React.ForwardRefExoticComponent<CalendarProps<any> & React.RefAttributes<any>>;
