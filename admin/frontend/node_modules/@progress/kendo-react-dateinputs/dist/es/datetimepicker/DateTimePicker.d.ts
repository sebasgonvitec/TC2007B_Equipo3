import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormComponent, FormComponentProps, FormComponentValidity } from '@progress/kendo-react-common';
import { DateInput, DateInputProps } from '../dateinput/DateInput';
import { DateTimePickerSettings } from './models';
/**
 * The arguments for the `onChange` event of the DateTimePicker.
 */
export interface DateTimePickerChangeEvent {
    nativeEvent: any;
    syntheticEvent: React.SyntheticEvent<any>;
    value: Date | null;
    show: boolean;
    target: DateTimePicker;
}
/**
 * Represents the props of the [KendoReact DateTimePicker component]({% slug overview_datetimepicker %}).
 */
export interface DateTimePickerProps extends DateTimePickerSettings, FormComponentProps {
    /**
     * Sets the default value of the DateTimePicker
     * ([see example]({% slug default_value_datetimepicker %})).
     *  For more information, refer to the article on
     * [uncontrolled components in React](https://reactjs.org/docs/uncontrolled-components.html).
     */
    defaultValue?: Date | null;
    /**
     * Fires each time the user selects a new value
     * ([see example]({% slug controlled_datetimepicker %}#toc-controlling-the-date-value)).
     */
    onChange?: (event: DateTimePickerChangeEvent) => void;
    /**
     * Specifies the value of the DateTimePicker
     * ([see example]({% slug controlled_datetimepicker %}#toc-controlling-the-date-value)).
     *
     * > The `value` has to be a valid
     * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.
     */
    value?: Date | null;
    /**
     * Configures the `size` of the DateTimePicker.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the DateTimePicker.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the DateTimePicker.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
}
/**
 * @hidden
 */
export interface DateTimePickerState {
    value: Date | null;
    show: boolean;
    focused: boolean;
}
/** @hidden */
export declare class DateTimePickerWithoutContext extends React.Component<DateTimePickerProps, DateTimePickerState> implements FormComponent {
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        className: PropTypes.Requireable<string>;
        defaultShow: PropTypes.Requireable<boolean>;
        defaultValue: PropTypes.Requireable<Date>;
        disabled: PropTypes.Requireable<boolean>;
        focusedDate: PropTypes.Requireable<Date>;
        format: PropTypes.Requireable<NonNullable<string | PropTypes.InferProps<{
            skeleton: PropTypes.Requireable<string>;
            pattern: PropTypes.Requireable<string>;
            date: PropTypes.Requireable<string>;
            time: PropTypes.Requireable<string>;
            datetime: PropTypes.Requireable<string>;
            era: PropTypes.Requireable<string>;
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            weekday: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            hour12: PropTypes.Requireable<boolean>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
            timeZoneName: PropTypes.Requireable<string>;
        }> | null | undefined>>;
        formatPlaceholder: PropTypes.Requireable<NonNullable<"short" | "narrow" | "wide" | "formatPattern" | PropTypes.InferProps<{
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
        }> | null | undefined>>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        min: PropTypes.Requireable<Date>;
        max: PropTypes.Requireable<Date>;
        name: PropTypes.Requireable<string>;
        popupSettings: PropTypes.Requireable<PropTypes.InferProps<{
            animate: PropTypes.Requireable<boolean>;
            appendTo: PropTypes.Requireable<any>;
            popupClass: PropTypes.Requireable<string>;
        }>>;
        show: PropTypes.Requireable<boolean>;
        tabIndex: PropTypes.Requireable<number>;
        title: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<Date>;
        weekNumber: PropTypes.Requireable<boolean>;
        width: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        validate: PropTypes.Requireable<boolean>;
        valid: PropTypes.Requireable<boolean>;
        cancelButton: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<"small" | "medium" | "large" | null | undefined>;
        rounded: PropTypes.Requireable<"small" | "medium" | "full" | "large" | null | undefined>;
        fillMode: PropTypes.Requireable<"flat" | "outline" | "solid" | null | undefined>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        defaultShow: boolean;
        defaultValue: null;
        disabled: boolean;
        format: string;
        max: Date;
        min: Date;
        popupSettings: {};
        tabIndex: number;
        weekNumber: boolean;
        required: boolean;
        validityStyles: boolean;
        cancelButton: boolean;
        dateInput: React.ComponentType<DateInputProps<any>>;
        size: "small" | "medium" | "large" | null | undefined;
        rounded: "small" | "medium" | "full" | "large" | null | undefined;
        fillMode: "flat" | "outline" | "solid" | null | undefined;
    };
    /**
     * @hidden
     */
    readonly state: DateTimePickerState;
    private _popupId;
    private _element;
    private _dateInput;
    private _dateTimeSelector;
    private valueDuringOnChange?;
    private showDuringOnChange?;
    private nextTickId;
    private shouldFocusDateInput;
    private prevShow;
    constructor(props: DateTimePickerProps);
    /**
     * Gets the wrapping element of the DateTimePicker.
     */
    get element(): HTMLSpanElement | null;
    /**
     * Gets the DateInput component inside the DateTimePicker component.
     */
    get dateInput(): DateInput | null;
    /**
     * Gets the value of the DateTimePicker.
     */
    get value(): Date | null;
    /**
     * Gets the popup state of the DateTimePicker.
     */
    get show(): boolean;
    /**
     * Gets the `name` property of the DateTimePicker.
     */
    get name(): string | undefined;
    protected get min(): Date;
    protected get max(): Date;
    /**
     * Represents the validity state into which the DateTimePicker is set.
     */
    get validity(): FormComponentValidity;
    /**
     * @hidden
     */
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    protected get required(): boolean;
    /**
     * @hidden
     */
    protected get dateInputComp(): React.ComponentType<DateInputProps<any>>;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    protected setShow(show: boolean): void;
    protected nextTick(f: () => any): void;
    private handleReject;
    private handleValueChange;
    private handleFocus;
    private handleBlur;
    private handleDateIconClick;
    private handleIconMouseDown;
    private handleKeyDown;
    private dateInputElement;
}
/**
 * Represents the PropsContext of the `DateTimePicker` component.
 * Used for global configuration of all `DateTimePicker` instances.
 *
 * For more information, refer to the [DateInputs Props Context]({% slug props-context_dateinputs %}) article.
 */
export declare const DateTimePickerPropsContext: React.Context<(p: DateTimePickerProps) => DateTimePickerProps>;
/**
 * Represent the `ref` of the DateTimePicker component.
 */
export interface DateTimePickerHandle extends Pick<DateTimePickerWithoutContext, keyof DateTimePickerWithoutContext> {
    /**
     * Gets the DateInput component inside the DateTimePicker component.
     */
    dateInput: DateInput | null;
    /**
     * Returns the HTML element of the DateTimePicker component.
     */
    element: HTMLSpanElement | null;
    /**
     * Gets the `name` property of the DateTimePicker.
     */
    name: string | undefined;
    /**
     * Gets the popup state of the DateTimePicker.
     */
    show: boolean;
    /**
     * Represents the validity state into which the DateTimePicker is set.
     */
    validity: FormComponentValidity;
    /**
     * Gets the value of the DateTimePicker.
     */
    value: Date | null;
}
/** @hidden */
export declare type DateTimePicker = DateTimePickerHandle;
/**
 * Represents the KendoReact DateTimePicker Component.
 *
 * Accepts properties of type [DateTimePickerProps]({% slug api_dateinputs_datetimepickerprops %}).
 * Obtaining the `ref` returns an object of type [DateTimePickerHandle]({% slug api_dateinputs_datetimepickerhandle %}).
 */
export declare const DateTimePicker: React.ForwardRefExoticComponent<DateTimePickerProps & React.RefAttributes<any>>;
