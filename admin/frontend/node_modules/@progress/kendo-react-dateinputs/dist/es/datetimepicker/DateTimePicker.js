var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Popup } from '@progress/kendo-react-popup';
import { cloneDate } from '@progress/kendo-date-math';
import { classNames, guid, Keys, AsyncFocusBlur, createPropsContext, withPropsContext, kendoThemeMaps } from '@progress/kendo-react-common';
import { DateInput } from '../dateinput/DateInput';
import { validatePackage } from '@progress/kendo-react-common';
import { Button } from '@progress/kendo-react-buttons';
import { packageMetadata } from '../package-metadata';
import { MIN_DATE, MAX_DATE, isInDateRange, MAX_TIME } from '../utils';
import { messages, toggleDateTimeSelector } from '../messages';
import { registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';
import { DateTimeSelector } from './DateTimeSelector';
import { isInTimeRange } from '../timepicker/utils';
import { MIN_TIME } from '../defaults';
import { PickerFloatingLabel } from '../hooks/usePickerFloatingLabel';
/** @hidden */
var DateTimePickerWithoutContext = /** @class */ (function (_super) {
    __extends(DateTimePickerWithoutContext, _super);
    function DateTimePickerWithoutContext(props) {
        var _this = _super.call(this, props) || this;
        _this._popupId = guid();
        _this._element = null;
        _this._dateInput = React.createRef();
        _this._dateTimeSelector = null;
        _this.shouldFocusDateInput = false;
        _this.prevShow = false;
        /**
         * @hidden
         */
        _this.focus = function () {
            var dateInputElement = _this.dateInputElement();
            if (dateInputElement) {
                dateInputElement.focus();
            }
        };
        _this.handleReject = function () {
            _this.shouldFocusDateInput = true;
            _this.setShow(false);
        };
        _this.handleValueChange = function (event) {
            _this.setState({
                value: cloneDate(event.value || undefined),
                show: false
            });
            _this.valueDuringOnChange = event.value;
            _this.showDuringOnChange = false;
            _this.shouldFocusDateInput = true;
            var onChange = _this.props.onChange;
            if (onChange) {
                onChange.call(undefined, {
                    syntheticEvent: event.syntheticEvent,
                    nativeEvent: event.nativeEvent,
                    value: _this.value,
                    show: _this.show,
                    target: _this
                });
            }
            _this.valueDuringOnChange = undefined;
            _this.showDuringOnChange = undefined;
        };
        _this.handleFocus = function () {
            _this.setState({ focused: true });
        };
        _this.handleBlur = function () {
            _this.setState({ focused: false });
            _this.setShow(false);
        };
        _this.handleDateIconClick = function () {
            if (_this.props.disabled) {
                return;
            }
            _this.shouldFocusDateInput = true;
            _this.setShow(!_this.show);
        };
        _this.handleIconMouseDown = function (event) {
            event.preventDefault();
        };
        _this.handleKeyDown = function (event) {
            var altKey = event.altKey, keyCode = event.keyCode;
            if (keyCode === Keys.esc) {
                _this.shouldFocusDateInput = true;
                _this.setShow(false);
                return;
            }
            if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
                event.preventDefault();
                event.stopPropagation();
                _this.shouldFocusDateInput = keyCode === Keys.up;
                _this.setShow(keyCode === Keys.down);
            }
        };
        _this.dateInputElement = function () {
            return (_this.dateInput && _this.dateInput.element) ||
                (_this.element && _this.element.querySelector('.k-dateinput > input.k-input-inner'));
        };
        validatePackage(packageMetadata);
        _this.state = {
            value: _this.props.defaultValue || DateTimePickerWithoutContext.defaultProps.defaultValue,
            show: _this.props.defaultShow || DateTimePickerWithoutContext.defaultProps.defaultShow,
            focused: false
        };
        return _this;
    }
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "element", {
        /**
         * Gets the wrapping element of the DateTimePicker.
         */
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "dateInput", {
        /**
         * Gets the DateInput component inside the DateTimePicker component.
         */
        get: function () {
            return this._dateInput.current;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "value", {
        /**
         * Gets the value of the DateTimePicker.
         */
        get: function () {
            var value = this.valueDuringOnChange !== undefined
                ? this.valueDuringOnChange
                : this.props.value !== undefined
                    ? this.props.value
                    : this.state.value;
            return (value !== null) ? cloneDate(value) : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "show", {
        /**
         * Gets the popup state of the DateTimePicker.
         */
        get: function () {
            return this.showDuringOnChange !== undefined
                ? this.showDuringOnChange
                : this.props.show !== undefined
                    ? this.props.show
                    : this.state.show;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "name", {
        /**
         * Gets the `name` property of the DateTimePicker.
         */
        get: function () {
            return this.props.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "min", {
        get: function () {
            return this.props.min !== undefined
                ? this.props.min
                : DateTimePickerWithoutContext.defaultProps.min;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "max", {
        get: function () {
            return this.props.max !== undefined
                ? this.props.max
                : DateTimePickerWithoutContext.defaultProps.max;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "validity", {
        /**
         * Represents the validity state into which the DateTimePicker is set.
         */
        get: function () {
            var inRange = isInDateRange(this.value, this.min, this.max)
                && isInTimeRange(this.value, this.props.minTime || MIN_TIME, this.props.maxTime || MAX_TIME);
            var customError = this.props.validationMessage !== undefined;
            var isValid = (!this.required || this.value !== null) && inRange;
            var valid = this.props.valid !== undefined ? this.props.valid : isValid;
            return {
                customError: customError,
                rangeOverflow: (this.value && this.max.getTime() < this.value.getTime()) || false,
                rangeUnderflow: (this.value && this.value.getTime() < this.min.getTime()) || false,
                valid: valid,
                valueMissing: this.value === null
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "validityStyles", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.validityStyles !== undefined
                ? this.props.validityStyles
                : DateTimePickerWithoutContext.defaultProps.validityStyles;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "required", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.required !== undefined
                ? this.props.required
                : DateTimePickerWithoutContext.defaultProps.required;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext.prototype, "dateInputComp", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.dateInput || DateTimePickerWithoutContext.defaultProps.dateInput;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    DateTimePickerWithoutContext.prototype.componentDidMount = function () {
        if (this.show) {
            // If defaultShow is true during the initial render, the popup is not aligned.
            this.forceUpdate();
        }
    };
    /**
     * @hidden
     */
    DateTimePickerWithoutContext.prototype.componentDidUpdate = function () {
        var dateInputElement = this.dateInputElement();
        if (this._dateTimeSelector && this.show && !this.prevShow) {
            this._dateTimeSelector.focus({ preventScroll: true });
        }
        if (dateInputElement
            && !this.show
            && this.shouldFocusDateInput) {
            dateInputElement.focus({ preventScroll: true });
        }
        this.prevShow = this.show;
        this.shouldFocusDateInput = false;
    };
    /**
     * @hidden
     */
    DateTimePickerWithoutContext.prototype.componentWillUnmount = function () {
        clearTimeout(this.nextTickId);
    };
    /**
     * @hidden
     */
    DateTimePickerWithoutContext.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.size, size = _b === void 0 ? DateTimePickerWithoutContext.defaultProps.size : _b, _c = _a.rounded, rounded = _c === void 0 ? DateTimePickerWithoutContext.defaultProps.rounded : _c, _d = _a.fillMode, fillMode = _d === void 0 ? DateTimePickerWithoutContext.defaultProps.fillMode : _d, disabled = _a.disabled, tabIndex = _a.tabIndex, title = _a.title, id = _a.id, format = _a.format, formatPlaceholder = _a.formatPlaceholder, min = _a.min, max = _a.max, weekNumber = _a.weekNumber, focusedDate = _a.focusedDate, className = _a.className, width = _a.width, name = _a.name, validationMessage = _a.validationMessage, required = _a.required, validityStyles = _a.validityStyles, cancelButton = _a.cancelButton, minTime = _a.minTime, maxTime = _a.maxTime, ariaLabelledBy = _a.ariaLabelledBy, ariaDescribedBy = _a.ariaDescribedBy, _e = _a.popup, PopupComponent = _e === void 0 ? Popup : _e, calendar = _a.calendar;
        var isValid = !this.validityStyles || this.validity.valid;
        var dataInputProps = {
            id: id,
            ariaLabelledBy: ariaLabelledBy,
            ariaDescribedBy: ariaDescribedBy,
            format: format,
            formatPlaceholder: formatPlaceholder,
            disabled: disabled,
            title: title,
            validityStyles: validityStyles,
            validationMessage: validationMessage,
            required: required,
            min: min,
            max: max,
            minTime: minTime,
            maxTime: maxTime,
            name: name,
            tabIndex: !this.show ? tabIndex : -1,
            valid: this.validity.valid,
            value: this.value,
            onChange: this.handleValueChange,
            steps: this.props.steps,
            label: undefined,
            placeholder: !this.state.focused ? this.props.placeholder : null,
            ariaHasPopup: true,
            ariaExpanded: this.show,
            size: null,
            fillMode: null,
            rounded: null
        };
        var dateTimePicker = (React.createElement(AsyncFocusBlur, { onFocus: this.handleFocus, onBlur: this.handleBlur, onSyncFocus: this.props.onFocus, onSyncBlur: this.props.onBlur }, function (_a) {
            var _b;
            var onFocus = _a.onFocus, onBlur = _a.onBlur;
            return (React.createElement("div", { ref: function (div) {
                    _this._element = div;
                }, className: classNames('k-input', 'k-datetimepicker', (_b = {},
                    _b["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size,
                    _b["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded,
                    _b["k-input-".concat(fillMode)] = fillMode,
                    _b['k-invalid'] = !isValid,
                    _b['k-required'] = _this.required,
                    _b['k-disabled'] = _this.props.disabled,
                    _b), className), onKeyDown: _this.handleKeyDown, style: { width: width }, onFocus: onFocus, onBlur: onBlur },
                React.createElement(_this.dateInputComp, __assign({ _ref: _this._dateInput, ariaRole: "combobox", ariaControls: _this._popupId }, dataInputProps)),
                React.createElement(Button, __assign({ tabIndex: -1, type: "button", icon: 'calendar', onMouseDown: _this.handleIconMouseDown, onClick: _this.handleDateIconClick, title: provideLocalizationService(_this)
                        .toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector]), className: "k-input-button", rounded: null }, {
                    'aria-label': provideLocalizationService(_this)
                        .toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector])
                })),
                React.createElement(PopupComponent, { show: _this.show, animate: _this.element !== null, anchor: _this.element, popupClass: "k-datetime-container k-reset", id: _this._popupId, anchorAlign: {
                        horizontal: 'left',
                        vertical: 'bottom'
                    }, popupAlign: {
                        horizontal: 'left',
                        vertical: 'top'
                    } },
                    React.createElement(DateTimeSelector, { ref: function (dateTimeSelector) { _this._dateTimeSelector = dateTimeSelector; }, cancelButton: cancelButton, steps: _this.props.steps, value: _this.value, onChange: _this.handleValueChange, onReject: _this.handleReject, disabled: disabled, weekNumber: weekNumber, min: _this.min, max: _this.max, minTime: minTime, maxTime: maxTime, focusedDate: focusedDate, format: format, calendar: calendar }))));
        }));
        return this.props.label
            ? (React.createElement(PickerFloatingLabel, { dateInput: this._dateInput, label: this.props.label, editorId: id, editorValid: isValid, editorDisabled: this.props.disabled, children: dateTimePicker, style: { width: this.props.width } }))
            : dateTimePicker;
    };
    DateTimePickerWithoutContext.prototype.setShow = function (show) {
        if (this.show === show) {
            return;
        }
        this.setState({ show: show });
    };
    DateTimePickerWithoutContext.prototype.nextTick = function (f) {
        // XXX: use window.setTimeout due to async focus/blur events in IE, and missing relatedTarget prop.
        // XXX: https://github.com/facebook/react/issues/3751
        // Handles multiple focus events happening at the same time.
        clearTimeout(this.nextTickId);
        this.nextTickId = window.setTimeout(function () { return f(); });
    };
    /**
     * @hidden
     */
    DateTimePickerWithoutContext.displayName = 'DateTimePicker';
    /**
     * @hidden
     */
    DateTimePickerWithoutContext.propTypes = {
        className: PropTypes.string,
        defaultShow: PropTypes.bool,
        defaultValue: PropTypes.instanceOf(Date),
        disabled: PropTypes.bool,
        focusedDate: PropTypes.instanceOf(Date),
        format: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.shape({
                skeleton: PropTypes.string,
                pattern: PropTypes.string,
                date: PropTypes.oneOf(['short', 'medium', 'long', 'full']),
                time: PropTypes.oneOf(['short', 'medium', 'long', 'full']),
                datetime: PropTypes.oneOf(['short', 'medium', 'long', 'full']),
                era: PropTypes.oneOf(['narrow', 'short', 'long']),
                year: PropTypes.oneOf(['numeric', '2-digit']),
                month: PropTypes.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long']),
                day: PropTypes.oneOf(['numeric', '2-digit']),
                weekday: PropTypes.oneOf(['narrow', 'short', 'long']),
                hour: PropTypes.oneOf(['numeric', '2-digit']),
                hour12: PropTypes.bool,
                minute: PropTypes.oneOf(['numeric', '2-digit']),
                second: PropTypes.oneOf(['numeric', '2-digit']),
                timeZoneName: PropTypes.oneOf(['short', 'long'])
            })
        ]),
        formatPlaceholder: PropTypes.oneOfType([
            PropTypes.oneOf(['wide', 'narrow', 'short', 'formatPattern']),
            PropTypes.shape({
                year: PropTypes.string,
                month: PropTypes.string,
                day: PropTypes.string,
                hour: PropTypes.string,
                minute: PropTypes.string,
                second: PropTypes.string
            })
        ]),
        id: PropTypes.string,
        ariaLabelledBy: PropTypes.string,
        ariaDescribedBy: PropTypes.string,
        min: PropTypes.instanceOf(Date),
        max: PropTypes.instanceOf(Date),
        name: PropTypes.string,
        popupSettings: PropTypes.shape({
            animate: PropTypes.bool,
            appendTo: PropTypes.any,
            popupClass: PropTypes.string
        }),
        show: PropTypes.bool,
        tabIndex: PropTypes.number,
        title: PropTypes.string,
        value: PropTypes.instanceOf(Date),
        weekNumber: PropTypes.bool,
        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        validationMessage: PropTypes.string,
        required: PropTypes.bool,
        validate: PropTypes.bool,
        valid: PropTypes.bool,
        cancelButton: PropTypes.bool,
        size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
        rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
        fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])
    };
    /**
     * @hidden
     */
    DateTimePickerWithoutContext.defaultProps = {
        defaultShow: false,
        defaultValue: null,
        disabled: false,
        format: 'g',
        max: MAX_DATE,
        min: MIN_DATE,
        popupSettings: {},
        tabIndex: 0,
        weekNumber: false,
        required: false,
        validityStyles: true,
        cancelButton: true,
        dateInput: DateInput,
        size: 'medium',
        rounded: 'medium',
        fillMode: 'solid'
    };
    return DateTimePickerWithoutContext;
}(React.Component));
export { DateTimePickerWithoutContext };
/**
 * Represents the PropsContext of the `DateTimePicker` component.
 * Used for global configuration of all `DateTimePicker` instances.
 *
 * For more information, refer to the [DateInputs Props Context]({% slug props-context_dateinputs %}) article.
 */
export var DateTimePickerPropsContext = createPropsContext();
/* eslint-disable @typescript-eslint/no-redeclare */
/**
 * Represents the KendoReact DateTimePicker Component.
 *
 * Accepts properties of type [DateTimePickerProps]({% slug api_dateinputs_datetimepickerprops %}).
 * Obtaining the `ref` returns an object of type [DateTimePickerHandle]({% slug api_dateinputs_datetimepickerhandle %}).
 */
export var DateTimePicker = withPropsContext(DateTimePickerPropsContext, DateTimePickerWithoutContext);
DateTimePicker.displayName = 'KendoReactDateTimePicker';
registerForLocalization(DateTimePickerWithoutContext);
