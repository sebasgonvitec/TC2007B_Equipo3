import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormComponent, FormComponentProps, FormComponentValidity } from '@progress/kendo-react-common';
import { DateInput, DateInputProps } from '../dateinput/DateInput';
import { TimeSelector } from './TimeSelector';
import { TimePickerSettings } from './models';
/**
 * The arguments for the `onChange` event of the TimePicker.
 */
export interface TimePickerChangeEvent {
    nativeEvent?: any;
    syntheticEvent: React.SyntheticEvent<any>;
    value: Date | null;
    show: boolean;
    target: TimePicker;
}
/**
 * Represents the props of the [KendoReact TimePicker component]({% slug overview_timepicker %}).
 */
export interface TimePickerProps extends TimePickerSettings, FormComponentProps {
    /**
     * Sets the default value of the TimePicker ([see example]({% slug default_value_timepicker %}#toc-setting-the-default-value)).
     */
    defaultValue?: Date | null;
    /**
     * Fires each time the user selects a new value ([see example]({% slug controlled_timepicker %}#toc-controlling-the-date-value)).
     */
    onChange?: (event: TimePickerChangeEvent) => void;
    /**
     * Specifies the value of the TimePicker ([see example]({% slug controlled_timepicker %}#toc-controlling-the-date-value)).
     *
     * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.
     */
    value?: Date | null;
    /**
     * Configures the `size` of the TimePicker.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the TimePicker.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the TimePicker.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
}
/**
 * @hidden
 */
export interface TimePickerState {
    value: Date | null;
    show: boolean;
    focused: boolean;
}
/** @hidden */
export declare class TimePickerWithoutContext extends React.Component<TimePickerProps, TimePickerState> implements FormComponent {
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        className: PropTypes.Requireable<string>;
        cancelButton: PropTypes.Requireable<boolean>;
        nowButton: PropTypes.Requireable<boolean>;
        defaultShow: PropTypes.Requireable<boolean>;
        defaultValue: PropTypes.Requireable<Date>;
        disabled: PropTypes.Requireable<boolean>;
        format: PropTypes.Requireable<NonNullable<string | PropTypes.InferProps<{
            skeleton: PropTypes.Requireable<string>;
            pattern: PropTypes.Requireable<string>;
            date: PropTypes.Requireable<string>;
            time: PropTypes.Requireable<string>;
            datetime: PropTypes.Requireable<string>;
            era: PropTypes.Requireable<string>;
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            weekday: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            hour12: PropTypes.Requireable<boolean>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
            timeZoneName: PropTypes.Requireable<string>;
        }> | null | undefined>>;
        formatPlaceholder: PropTypes.Requireable<NonNullable<"short" | "narrow" | "wide" | "formatPattern" | PropTypes.InferProps<{
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
        }> | null | undefined>>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        min: PropTypes.Requireable<Date>;
        max: PropTypes.Requireable<Date>;
        name: PropTypes.Requireable<string>;
        popupSettings: PropTypes.Requireable<PropTypes.InferProps<{
            animate: PropTypes.Requireable<boolean>;
            appendTo: PropTypes.Requireable<any>;
            popupClass: PropTypes.Requireable<string>;
        }>>;
        show: PropTypes.Requireable<boolean>;
        steps: PropTypes.Requireable<PropTypes.InferProps<{
            hour: PropTypes.Requireable<number>;
            minute: PropTypes.Requireable<number>;
            second: PropTypes.Requireable<number>;
        }>>;
        smoothScroll: PropTypes.Requireable<boolean>;
        tabIndex: PropTypes.Requireable<number>;
        title: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<Date>;
        width: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        validate: PropTypes.Requireable<boolean>;
        valid: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<"small" | "medium" | "large" | null | undefined>;
        rounded: PropTypes.Requireable<"small" | "medium" | "full" | "large" | null | undefined>;
        fillMode: PropTypes.Requireable<"flat" | "outline" | "solid" | null | undefined>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        defaultShow: boolean;
        defaultValue: null;
        disabled: boolean;
        format: string;
        max: Date;
        min: Date;
        popupSettings: {};
        tabIndex: number;
        steps: {};
        required: boolean;
        validityStyles: boolean;
        dateInput: React.ComponentType<DateInputProps<any>>;
        size: "small" | "medium" | "large" | null | undefined;
        rounded: "small" | "medium" | "full" | "large" | null | undefined;
        fillMode: "flat" | "outline" | "solid" | null | undefined;
    };
    /**
     * @hidden
     */
    readonly state: TimePickerState;
    private _popupId;
    private _element;
    private _dateInput;
    private _timeSelector;
    private valueDuringOnChange?;
    private showDuringOnChange?;
    private shouldFocusDateInput;
    private prevShow;
    constructor(props: TimePickerProps);
    /**
     * Gets the wrapping element of the TimePicker.
     */
    get element(): HTMLSpanElement | null;
    /**
     * Gets the DateInput component inside the TimePicker component.
     */
    get dateInput(): DateInput | null;
    /**
     * Gets the TimeSelector component inside the TimePicker component.
     */
    get timeSelector(): TimeSelector | null;
    /**
     * Gets the value of the TimePicker.
     */
    get value(): Date | null;
    /**
     * Gets the popup state of the TimeSelector.
     */
    get show(): boolean;
    /**
     * Gets the `name` property of the TimePicker.
     */
    get name(): string | undefined;
    /**
     * Represents the validity state into which the TimePicker is set.
     */
    get validity(): FormComponentValidity;
    /**
     * @hidden
     */
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    protected get required(): boolean;
    private get popupSettings();
    private get min();
    private get max();
    protected get dateInputComp(): React.ComponentType<DateInputProps<any>>;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    protected setTimeSelectorRef: (timeSelector: TimeSelector | null) => void;
    protected nextValue: (nextProps: TimePickerProps, nextState: TimePickerState) => Date | null;
    protected nextShow: (nextProps: TimePickerProps, nextState: TimePickerState) => boolean;
    protected normalizeTime(date: Date): Date;
    protected setShow(show: boolean): void;
    protected mergeTime(value: Date | null): Date | null;
    private handleInputValueChange;
    private handleValueChange;
    private handleFocus;
    private handleBlur;
    private handleValueReject;
    private handleIconClick;
    private handleIconMouseDown;
    private handleKeyDown;
}
/**
 * Represents the PropsContext of the `TimePicker` component.
 * Used for global configuration of all `TimePicker` instances.
 *
 * For more information, refer to the [DateInputs Props Context]({% slug props-context_dateinputs %}) article.
 */
export declare const TimePickerPropsContext: React.Context<(p: TimePickerProps) => TimePickerProps>;
/**
 * Represent the `ref` of the TimePicker component.
 */
export interface TimePickerHandle extends Pick<TimePickerWithoutContext, keyof TimePickerWithoutContext> {
    /**
     * Gets the DateInput component inside the TimePicker component.
     */
    dateInput: DateInput | null;
    /**
     * Returns the HTML element of the TimePicker component.
     */
    element: HTMLSpanElement | null;
    /**
     * Gets the `name` property of the TimePicker.
     */
    name: string | undefined;
    /**
     * Gets the popup state of the TimeSelector.
     */
    show: boolean;
    /**
     * Represents the validity state into which the TimePicker is set.
     */
    validity: FormComponentValidity;
    /**
     * Gets the value of the TimePicker.
     */
    value: Date | null;
    /**
     * Gets the TimeSelector component inside the TimePicker component.
     */
    timeSelector: TimeSelector | null;
}
/** @hidden */
export declare type TimePicker = TimePickerHandle;
/**
 * Represents the KendoReact TimePicker Component.
 *
 * Accepts properties of type [TimePicker]({% slug api_dateinputs_timepickerprops %}).
 * Obtaining the `ref` returns an object of type [TimePickerHandle]({% slug api_dateinputs_timepickerhandle %}).
 */
export declare const TimePicker: React.ForwardRefExoticComponent<TimePickerProps & React.RefAttributes<any>>;
