import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ZIndexContext } from '@progress/kendo-react-common';
import { DialogProps } from './DialogProps';
interface DialogState {
    zIndex: number;
}
/** @hidden */
declare class DialogWithoutContext extends React.Component<DialogProps, DialogState> {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        title: PropTypes.Requireable<any>;
        id: PropTypes.Requireable<string>;
        dir: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        closeIcon: PropTypes.Requireable<boolean>;
        width: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        height: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        minWidth: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        autoFocus: PropTypes.Requireable<boolean>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        autoFocus: boolean;
    };
    /**
     * @hidden
     */
    static contextType: React.Context<import("@progress/kendo-react-common").ZIndexContextType>;
    /**
     * @hidden
     */
    context: React.ContextType<typeof ZIndexContext>;
    /**
     * @hidden
     */
    element?: HTMLDivElement | null;
    private _id;
    private titleId;
    private contentId;
    constructor(props: DialogProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    onCloseDialog: (event: React.SyntheticEvent<any>) => void;
    /**
     * @hidden
     */
    onKeyDown: React.KeyboardEventHandler<HTMLDivElement>;
    /**
     * @hidden
     */
    render(): JSX.Element | null;
    private getActionBar;
    private getContent;
    private generateTitleId;
    private generateContentId;
    private getCurrentZIndex;
    private getDocument;
}
/**
 * Represents the PropsContext of the `Dialog` component.
 * Used for global configuration of all `Dialog` instances.
 */
export declare const DialogPropsContext: React.Context<(p: DialogProps) => DialogProps>;
/**
 * Represent the `ref` of the Dialog component.
 */
export interface DialogHandle extends Pick<DialogWithoutContext, keyof DialogWithoutContext> {
}
/** @hidden */
export declare type Dialog = DialogHandle;
/**
 * Represents the [KendoReact Dialog component]({% slug overview_dialog %}).
 *
 * Accepts properties of type [DialogProps]({% slug api_dialogs_dialogprops %}).
 * Obtaining the `ref` returns an object of type [DialogHandle]({% slug api_dialogs_dialoghandle %}).
 */
export declare const Dialog: React.ForwardRefExoticComponent<DialogProps & React.RefAttributes<any>>;
export {};
