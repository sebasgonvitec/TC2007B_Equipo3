import * as React from 'react';
import * as PropTypes from 'prop-types';
import { WindowProps } from './WindowProps';
import { ZIndexContext } from '@progress/kendo-react-common';
import { Draggable } from '@progress/kendo-react-common';
import { windowStage } from './StageEnum';
interface WindowState {
    stage: windowStage | string;
    isDragging: boolean;
    top: number;
    left: number;
    width: number;
    height: number;
    focused: boolean;
    zIndex: number;
}
/** @hidden */
declare class WindowWithoutContext extends React.Component<WindowProps, WindowState> {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        width: PropTypes.Requireable<number>;
        height: PropTypes.Requireable<number>;
        left: PropTypes.Requireable<number>;
        top: PropTypes.Requireable<number>;
        initialWidth: PropTypes.Requireable<number>;
        initialHeight: PropTypes.Requireable<number>;
        initialLeft: PropTypes.Requireable<number>;
        initialTop: PropTypes.Requireable<number>;
        minWidth: PropTypes.Requireable<number>;
        minHeight: PropTypes.Requireable<number>;
        resizable: PropTypes.Requireable<boolean>;
        draggable: PropTypes.Requireable<boolean>;
        title: PropTypes.Requireable<any>;
        shouldUpdateOnDrag: PropTypes.Requireable<boolean>;
        stage: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        overlayStyle: PropTypes.Requireable<object>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        minWidth: number;
        minHeight: number;
        resizable: boolean;
        draggable: boolean;
        modal: boolean;
        doubleClickStageChange: boolean;
    };
    /**
     * @hidden
     */
    static contextType: React.Context<import("@progress/kendo-react-common").ZIndexContextType>;
    /**
     * @hidden
     */
    context: React.ContextType<typeof ZIndexContext>;
    /**
     * **Deprecated.** Use `element` instead.
     */
    windowElement?: HTMLDivElement | null;
    /**
     * The Window element.
     */
    element?: HTMLDivElement | null;
    /**
     * @hidden
     */
    windowTitle?: any;
    draggable: Draggable | null;
    private windowCoordinatesState?;
    private offSetCoordinates?;
    private _id;
    private titleId;
    private _blurTimeout?;
    constructor(props: WindowProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    onKeyDown: React.KeyboardEventHandler<HTMLDivElement>;
    /**
     * @hidden
     */
    onPress: (data: any) => void;
    /**
     * @hidden
     */
    onDrag: (data: any) => void;
    /**
     * @hidden
     */
    onRelease: (data: any) => void;
    /**
     * @hidden
     */
    onFocus: () => void;
    /**
     * @hidden
     */
    onBlur: () => void;
    /**
     * @hidden
     */
    render(): JSX.Element | null;
    private get top();
    private get left();
    private get width();
    private get height();
    private get windowStage();
    private getInitialTop;
    private getInitialLeft;
    private getInitialWidth;
    private getInitialHeight;
    private handleMinimize;
    private handleFullscreen;
    private handleRestore;
    private handleCloseWindow;
    private handleDoubleClick;
    private handleResize;
    private dispatchMoveEvent;
    private handleBrowserWindowResize;
    private getActionBar;
    private getContent;
    private getCurrentZIndex;
    private getDocument;
    private getWindow;
    private generateTitleId;
}
/**
 * Represents the PropsContext of the `Window` component.
 * Used for global configuration of all `Window` instances.
 */
export declare const WindowPropsContext: React.Context<(p: WindowProps) => WindowProps>;
/**
 * Represent the `ref` of the Window component.
 */
export interface WindowHandle extends Pick<WindowWithoutContext, keyof WindowWithoutContext> {
    /**
     * The Window element.
     */
    element?: HTMLDivElement | null;
    /**
     * **Deprecated.** Use `element` instead.
     */
    windowElement?: HTMLDivElement | null;
}
/** @hidden */
export declare type Window = WindowHandle;
/**
 * Represents the [KendoReact Window component]({% slug overview_window %}).
 *
 * Accepts properties of type [WindowProps]({% slug api_dialogs_windowprops %}).
 * Obtaining the `ref` returns an object of type [WindowHandle]({% slug api_dialogs_windowhandle %}).
 */
export declare const Window: React.ForwardRefExoticComponent<WindowProps & React.RefAttributes<any>>;
export {};
