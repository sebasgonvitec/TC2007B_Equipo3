var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
/**
 * @hidden
 */
export var usePointer = function (props, target, extend) {
    if (extend === void 0) { extend = {}; }
    return Object.keys(extend).reduce(function (acc, key) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[key] = React.useCallback(function (syntheticEvent) {
            if (extend[key]) {
                extend[key](syntheticEvent);
            }
            if (props[key]) {
                props[key]({ target: target.current, syntheticEvent: syntheticEvent });
            }
        }, [props[key], extend[key], target]), _a)));
    }, {});
};
