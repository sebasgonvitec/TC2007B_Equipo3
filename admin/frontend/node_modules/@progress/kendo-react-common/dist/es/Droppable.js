import * as React from 'react';
import { useDroppable } from './hooks';
/**
 * Represents the KendoReact Droppable component.
 *
 * Accepts properties of type [DroppableProps]({% slug api_common_droppableprops %}),
 * and returns an object of type [DroppableHandle]({% slug api_common_droppablehandle %}) when the `ref` is obtained.
 */
export var Droppable = React.forwardRef(function (props, ref) {
    var childRef = React.useRef(null);
    var target = React.useRef(null);
    var getElement = React.useCallback(function () { return childRef.current && childRef.current.element
        ? childRef.current.element
        : childRef.current; }, [childRef]);
    React.useImperativeHandle(target, function () { return ({ element: getElement() || undefined }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    React.useImperativeHandle(props.childRef, function () { return childRef.current; });
    var handleDragEnter = React.useCallback(function (event) {
        if (!props.onDragEnter) {
            return;
        }
        props.onDragEnter({
            element: getElement(),
            target: target.current,
            event: event
        });
    }, [props.onDragEnter, getElement]);
    var handleDragOver = React.useCallback(function (event) {
        if (!props.onDragOver) {
            return;
        }
        props.onDragOver({
            element: getElement(),
            target: target.current,
            event: event
        });
    }, [getElement, props.onDragOver]);
    var handleDragLeave = React.useCallback(function (event) {
        if (!props.onDragLeave) {
            return;
        }
        props.onDragLeave({
            element: getElement(),
            target: target.current,
            event: event
        });
    }, [props.onDragLeave, getElement]);
    var handleDrop = React.useCallback(function (event) {
        if (!props.onDrop) {
            return;
        }
        props.onDrop({
            element: getElement(),
            target: target.current,
            event: event
        });
    }, [props.onDrop, getElement]);
    useDroppable(childRef, {
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop
    });
    return props.children
        ? (React.cloneElement(React.Children.only(props.children), { ref: childRef }))
        : null;
});
Droppable.displayName = 'KendoReactDroppable';
