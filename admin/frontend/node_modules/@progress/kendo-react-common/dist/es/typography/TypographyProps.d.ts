/// <reference types="react" />
import { KendoReactComponentBaseProps } from '../models/kendoReactComponentBaseProps';
import { MarginEnum } from './models/margin';
/**
 * Represents the props of the [KendoReact Typography component]({% slug overview_typography %}).
 */
export interface TypographyProps extends KendoReactComponentBaseProps {
    /**
     * Sets additional CSS styles to the element.
     */
    style?: React.CSSProperties;
    /**
     * Specifies a list of CSS classes that will be added to the element.
     */
    className?: string;
    /**
     * Overrides the font size applied by the theme typography styles
     * [see example]({% slug appearance_typography %}#toc-font-size).
     *
     * The possible values are:
     * * `xsmall`
     * * `small`
     * * `medium`
     * * `large`
     * * `xlarge`
     *
     */
    fontSize?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
    /**
     * Overrides the font weight applied by the theme typography styles
     * [see example]({% slug appearance_typography %}#toc-font-weight).
     *
     * The possible values are:
     * * `light`&mdash;font-weight: 300
     * * `normal`&mdash;font-weight: 400
     * * `bold`&mdash;For Default and Bootstrap themes&mdash;font-weight: 700. For Material theme&mdash;font-weight: 500.
     *
     */
    fontWeight?: 'light' | 'normal' | 'bold';
    /**
     * Specifies the applied margin to the element
     * [see example]({% slug appearance_typography %}#toc-margin).
     *
     * The possible values for the Default and Material themes are:
     * * `xsmall` &mdash;Applies 4px margin.
     * * `small` &mdash;Applies 8px margin.
     * * `medium` &mdash;Applies 12px margin.
     * * `large` &mdash;Applies 16px margin.
     * * `xlarge` &mdash;Applies 24px margin.
     * * `thin` &mdash;Applies 2px margin.
     * * `hair` &mdash;Applies 1px margin.
     * * `number` &mdash;Passing a number will apply a margin of 4 times the passed number in pixels. The minimum number value is 0 and the maximum is 24.
     * * `object` &smdash;Passing an object allows setting the margins for each side.
     *
     * The possible values for the Bootstrap theme are:
     * * `xsmall` &mdash;Applies 0.25rem margin.
     * * `small` &mdash;Applies 0.5rem margin.
     * * `medium` &mdash;Applies 0.75rem margin.
     * * `large` &mdash;Applies 1rem margin.
     * * `xlarge` &mdash;Applies 1.25rem margin.
     * * `thin` &mdash;Applies 0.125rem margin.
     * * `hair` &mdash;Applies 0.0625rem margin.
     * * `number` &mdash;Passing a number will apply a margin equal to the passed number divided by 4 in rem units.
     * The minimum number value is 0 and the maximum is 24.
     * * `object` &smdash;Passing an object allows setting the margins for each side.
     */
    margin?: MarginEnum | {
        top?: MarginEnum;
        bottom?: MarginEnum;
        left?: MarginEnum;
        right?: MarginEnum;
    };
    /**
     * Specifies the text align
     * [see example]({% slug appearance_typography %}#toc-text-align).
     *
     * The possible values are:
     * * `left`&mdash;Applies text-align: left
     * * `right`&mdash;Applies text-align: right
     * * `center`&mdash;Applies text-align: center
     * * `justify`&mdash;Applies text-align: justify
     *
     */
    textAlign?: 'left' | 'right' | 'center' | 'justify';
    /**
     * Specifies the text transform
     * [see example]({% slug appearance_typography %}#toc-text-transform).
     *
     * The possible values are:
     * * `lowercase`&mdash;Applies text-transform: lowercase
     * * `uppercase`&mdash;Applies text-transform: uppercase
     * * `capitalize`&mdash;Applies text-transform: capitalize
     *
     */
    textTransform?: 'lowercase' | 'uppercase' | 'capitalize';
    /**
     * Specifies the theme color of the Typography
     * [see example]({% slug appearance_typography %}#toc-theme-color).
     *
     * The possible values are:
     * * `inherit`&mdash;Applies coloring based on the current color.
     * * `primary` &mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverse`&mdash; Applies coloring based on inverse theme color.
     *
     * You can use the `style` property to apply custom color related properties to the element.
     *
     */
    themeColor?: 'inherit' | 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'error' | 'dark' | 'light' | 'inverse';
    /**
     * Sets a custom property to the element.
     */
    [customProp: string]: any;
}
