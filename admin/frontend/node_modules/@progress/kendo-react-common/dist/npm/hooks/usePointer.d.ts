import * as React from 'react';
import { KendoPointer } from '../models';
declare type ElementPointer = {
    [P in keyof KendoPointer<any, any>]: (event: React.PointerEvent<any>) => void;
};
/**
 * @hidden
 */
export declare const usePointer: <E extends HTMLElement | null, P extends KendoPointer<any, any>, R extends {}>(props: P, target: React.RefObject<R>, extend?: {
    onPointerDown?: ((args: React.PointerEvent<E>) => void) | undefined;
    onPointerMove?: ((args: React.PointerEvent<E>) => void) | undefined;
    onPointerUp?: ((args: React.PointerEvent<E>) => void) | undefined;
    onPointerCancel?: ((args: React.PointerEvent<E>) => void) | undefined;
    onGotPointerCapture?: ((args: React.PointerEvent<E>) => void) | undefined;
    onLostPointerCapture?: ((args: React.PointerEvent<E>) => void) | undefined;
    onPointerEnter?: ((args: React.PointerEvent<E>) => void) | undefined;
    onPointerOver?: ((args: React.PointerEvent<E>) => void) | undefined;
    onPointerLeave?: ((args: React.PointerEvent<E>) => void) | undefined;
    onPointerOut?: ((args: React.PointerEvent<E>) => void) | undefined;
}) => ElementPointer;
export {};
