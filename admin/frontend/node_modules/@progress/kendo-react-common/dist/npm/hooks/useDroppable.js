"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDroppable = void 0;
var React = require("react");
var noop_1 = require("../noop");
var useInheritedState_1 = require("../hooks/useInheritedState");
var context_1 = require("../drag-n-drop/context");
/**
 * Represents the KendoReact `useDroppable` hook.
 * Use it to attach `drop` events to a native HTML DOM elements, or custom React Components.
 *
 * For more information, refer to the [KendoReact Droppable]({% slug droppable_drag-and-drop %}) article.
 *
 * @param ref - The `ref` of the HTML Element or React Component which will enable the `droppable` functionality.
 * @param callbacks - A collection of callbacks, called by the `useDroppable` hook when a specific action occurs.
 */
function useDroppable(ref, callbacks) {
    if (callbacks === void 0) { callbacks = {
        onDragEnter: noop_1.noop,
        onDragOver: noop_1.noop,
        onDragLeave: noop_1.noop,
        onDrop: noop_1.noop
    }; }
    var _a = callbacks.onDragEnter, onDragEnter = _a === void 0 ? noop_1.noop : _a, _b = callbacks.onDragOver, onDragOver = _b === void 0 ? noop_1.noop : _b, _c = callbacks.onDragLeave, onDragLeave = _c === void 0 ? noop_1.noop : _c, _d = callbacks.onDrop, onDrop = _d === void 0 ? noop_1.noop : _d;
    var _e = (0, useInheritedState_1.useInheritedState)(context_1.DropContext), setDrop = _e[1];
    var _f = React.useContext(context_1.DropsContext), registerDrop = _f[1], deregisterDrop = _f[2];
    var getElement = React.useCallback(function () { return ref.current && ref.current.element
        ? ref.current.element
        : ref.current; }, [ref]);
    var target = React.useRef(null);
    React.useImperativeHandle(target, function () { return ({
        element: getElement(),
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop,
        data: ref.current
    }); });
    var handleDragEnter = React.useCallback(function (event) {
        setDrop(target, { target: ref.current, event: event });
        onDragEnter(event);
    }, [setDrop, ref, onDragEnter]);
    var handleDragOver = React.useCallback(function (event) {
        onDragOver(event);
    }, [onDragOver]);
    var handleDragLeave = React.useCallback(function (event) {
        setDrop(null, { target: ref.current, event: event });
        onDragLeave(event);
    }, [setDrop, ref, onDragLeave]);
    var handleDrop = React.useCallback(function (event) {
        setDrop(null, { target: ref.current, event: event });
        onDrop(event);
    }, [setDrop, ref, onDrop]);
    var register = React.useCallback(function () {
        registerDrop(target);
        return function () {
            deregisterDrop(target);
        };
    }, [deregisterDrop, registerDrop]);
    React.useLayoutEffect(register, [register]);
}
exports.useDroppable = useDroppable;
;
