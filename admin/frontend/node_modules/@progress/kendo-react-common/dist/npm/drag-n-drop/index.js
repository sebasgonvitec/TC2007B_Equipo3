"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragAndDrop = void 0;
var React = require("react");
var hooks_1 = require("../hooks");
var context_1 = require("./context");
/**
 * The `DragAndDrop` component is required for the `droppable` functionality to work properly.
 *
 * It is used internally to synchronize the `drag` and `drop` functionalities.
 * Accepts properties of type [DragAndDropProps]({% slug api_common_draganddropprops %}).
 */
var DragAndDrop = function (props) {
    var _a = (0, hooks_1.useControlledState)(null, undefined), drag = _a[0], setDrag = _a[1];
    var _b = (0, hooks_1.useControlledState)(null, undefined), drop = _b[0], setDrop = _b[1];
    var _c = (0, hooks_1.useCollection)([]), drags = _c[0], dispatchDrags = _c[1];
    var _d = (0, hooks_1.useCollection)([]), drops = _d[0], dispatchDrops = _d[1];
    var registerDrag = function (item) {
        dispatchDrags({
            type: hooks_1.COLLECTION_ACTION.add,
            item: item
        });
    };
    var deregisterDrag = function (item) {
        dispatchDrags({
            type: hooks_1.COLLECTION_ACTION.remove,
            item: item
        });
    };
    var registerDrop = function (item) {
        dispatchDrops({
            type: hooks_1.COLLECTION_ACTION.add,
            item: item
        });
    };
    var deregisterDrop = function (item) {
        dispatchDrops({
            type: hooks_1.COLLECTION_ACTION.remove,
            item: item
        });
    };
    return (React.createElement(context_1.DragContext.Provider, { value: [drag, setDrag] },
        React.createElement(context_1.DropContext.Provider, { value: [drop, setDrop] },
            React.createElement(context_1.DragsContext.Provider, { value: [drags, registerDrag, deregisterDrag] },
                React.createElement(context_1.DropsContext.Provider, { value: [drops, registerDrop, deregisterDrop] }, props.children)))));
};
exports.DragAndDrop = DragAndDrop;
exports.DragAndDrop.displayName = 'KendoReactDragAndDrop';
