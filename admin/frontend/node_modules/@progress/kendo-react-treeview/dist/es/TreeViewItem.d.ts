import * as React from 'react';
import FieldsService from './utils/FieldsService';
/**
 * @hidden
 */
export declare const TreeViewItemPropsContext: React.Context<(props: TreeViewItemProps) => TreeViewItemProps>;
/**
 * @hidden
 */
export interface TreeViewItemProps {
    item: any;
    itemId: string;
    treeGuid: string;
    animate: boolean;
    focusedItemId?: string;
    tabbableItemId: string;
    fieldsService: FieldsService;
    itemUI?: React.ComponentType<{
        item: any;
        itemHierarchicalIndex: string;
    }>;
    ariaMultiSelectable: boolean;
    onItemClick: any;
    expandIcons?: boolean;
    onExpandChange: any;
    onCheckChange: any;
    checkboxes?: boolean;
    onFocusDomElNeeded: any;
    draggable?: boolean;
    onPress: any;
    onDrag: any;
    onRelease: any;
    size?: null | 'small' | 'medium' | 'large';
    /**
     * @hidden
     *
     * Internal usage!!!
     */
    position?: 'top' | 'mid' | 'bot';
    /**
     * Currently for internal usage only! Replicates the current behavior which disables all children
     * if the parent is disabled, which was previously achieved only though the kendo-themes,
     * but due to rendering changes had to be replicated programmatically!
     *
     * @hidden
     */
    disabled?: boolean;
}
/**
 * @hidden
 */
declare class TreeViewItemWithoutContext extends React.Component<TreeViewItemProps> {
    private itemElement;
    private checkboxElement;
    private itemGuid;
    static defaultProps: {
        position: string;
    };
    render(): JSX.Element;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TreeViewItemProps): void;
    private renderCheckbox;
    private renderExpandIcon;
    private renderSubitemsIfApplicable;
    private renderItemInPart;
    private onCheckChange;
    private onExpandChange;
    private onItemClick;
    private onPress;
    private onDrag;
    private onRelease;
    private get fieldsSvc();
    private get itemId();
    private get item();
    private get tabIndex();
    private get ariaExpanded();
    private get disabled();
    private get ariaChecked();
    private get ariaSelected();
    private getIconClassName;
    private assignDraggableMeta;
}
/**
 * @hidden
 */
export declare const TreeViewItem: React.ForwardRefExoticComponent<TreeViewItemProps & React.RefAttributes<TreeViewItemWithoutContext>>;
export {};
