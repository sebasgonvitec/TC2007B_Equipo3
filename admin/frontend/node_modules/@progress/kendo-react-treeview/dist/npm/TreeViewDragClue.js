"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeViewDragClue = void 0;
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
/**
 * Represents the KendoReact TreeViewDragClue component which renders a clue when an item is dragged.
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     dragClue;
 *     state = { tree };
 *
 *     render() {
 *         return (
 *             <div>
 *                 <TreeView data={this.state.tree} draggable={true}
 *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />
 *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />
 *             </div>
 *         );
 *     }
 *
 *     onItemDragOver = (event) => {
 *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));
 *     }
 *     onItemDragEnd = (event) => {
 *         this.dragClue.hide();
 *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();
 *
 *         if (eventAnalyzer.isDropAllowed) {
 *             const updatedTree = moveTreeViewItem(
 *                 event.itemHierarchicalIndex,
 *                 this.state.tree,
 *                 eventAnalyzer.getDropOperation(),
 *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,
 *             );
 *
 *             this.setState({ tree: updatedTree });
 *         }
 *     }
 *     getClueClassName(event) {
 *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();
 *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;
 *
 *         if (eventAnalyzer.isDropAllowed) {
 *             switch (eventAnalyzer.getDropOperation()) {
 *                 case 'child':
 *                     return 'k-i-plus';
 *                 case 'before':
 *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?
 *                         'k-i-insert-up' : 'k-i-insert-middle';
 *                 case 'after':
 *                     const siblings = getSiblings(itemIndex, this.state.tree);
 *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());
 *
 *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';
 *                 default:
 *                     break;
 *             }
 *         }
 *
 *         return 'k-i-cancel';
 *     }
 * }
 *
 * function getSiblings(itemIndex, data) {
 *     let result = data;
 *
 *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));
 *     for (let i = 0; i < indices.length - 1; i++) {
 *         result = result[indices[i]].items;
 *     }
 *
 *     return result;
 * }
 *
 * const SEPARATOR = '_';
 * const tree = [{
 *     text: 'Furniture', expanded: true, items: [
 *         { text: 'Tables & Chairs', expanded: true },
 *         { text: 'Sofas', expanded: true },
 *         { text: 'Occasional Furniture', expanded: true }]
 * }, {
 *     text: 'Decor', expanded: true, items: [
 *         { text: 'Bed Linen', expanded: true },
 *         { text: 'Curtains & Blinds', expanded: true },
 *         { text: 'Carpets', expanded: true }]
 * }];
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
var TreeViewDragClue = /** @class */ (function (_super) {
    __extends(TreeViewDragClue, _super);
    function TreeViewDragClue() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.state = {
            visible: false,
            top: 0,
            left: 0,
            text: '',
            operationClassName: 'k-i-cancel'
        };
        return _this;
    }
    /**
     * @hidden
     */
    TreeViewDragClue.prototype.render = function () {
        var dynamicStyle = { top: this.state.top + 'px', left: this.state.left + 'px' };
        return this.state.visible && (React.createElement("div", { className: "k-header k-drag-clue", style: __assign(__assign({}, this.props.style), dynamicStyle) },
            React.createElement("span", { className: (0, kendo_react_common_1.classNames)('k-icon k-drag-status k-icon-with-modifier', this.state.operationClassName) },
                React.createElement("span", { className: "k-icon k-icon-modifier" })),
            this.state.text));
    };
    /**
     * Displays the TreeViewDragClue component.
     *
     * @param top - The `top` CSS position of the component.
     * @param left - The `left` CSS position of the component.
     * @param text - The text of the component.
     * @param operationClassName - The CSS class name which is related to the specific drop operation.
     */
    TreeViewDragClue.prototype.show = function (top, left, text, operationClassName) {
        this.setState({ visible: true, top: top, left: left, text: text, operationClassName: operationClassName });
    };
    /**
     * Hides the TreeViewDragClue component.
     */
    TreeViewDragClue.prototype.hide = function () {
        this.setState({ visible: false });
    };
    /**
     * @hidden
     */
    TreeViewDragClue.defaultProps = { style: { display: 'block', position: 'absolute', zIndex: 20000, padding: '4px 6px' } };
    return TreeViewDragClue;
}(React.PureComponent));
exports.TreeViewDragClue = TreeViewDragClue;
