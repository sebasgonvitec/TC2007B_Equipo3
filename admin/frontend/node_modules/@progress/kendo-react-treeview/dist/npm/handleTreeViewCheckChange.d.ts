import { TreeViewExpandChangeEvent } from './events';
import { TreeViewCheckDescriptor } from './TreeViewOperationDescriptors';
/**
 * The settings that configure the update of the check descriptor.
 */
export interface TreeViewCheckChangeSettings {
    /**
     * Determines a selection of a single node at a time.
     */
    singleMode?: boolean;
    /**
     * Determines if the children checkboxes will be selected when the user selects the parent checkbox.
     */
    checkChildren?: boolean;
    /**
     * Determines if the parent checkbox will be selected when the user selects all its children checkboxes.
     */
    checkParents?: boolean;
}
/**
 * A helper function which updates the check descriptor.
 *
 * @param event - The event that triggered the change.
 * @param check - The check descriptor that will be updated.
 * @param data - The TreeView items.
 * @param settings - The additional settings that configure the update of the check descriptor.
 * @param childrenField - The field that points to the dataItem sub items. Defaults to `items`.
 * The default behavior allows the selection of multiple items.
 * @returns - The updated copy of the input check descriptor.
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    state = { check: [], items: tree };
 *    render() {
 *        return (
 *            <div>
 *                <TreeView
 *                    checkboxes={true} onCheckChange={this.onCheckChange}
 *                    data={processTreeViewItems(this.state.items, { check: this.state.check })}
 *                />
 *                <div style={{ marginTop: 5 }}>
 *                    <i>Press SPACE to check/uncheck the active item</i>
 *                    <div className="example-config">
 *                        Checked Indices: {this.state.check.join(",")}
 *                    </div>
 *                </div>
 *            </div>
 *        );
 *    }
 *    onCheckChange = (event) => {
 *        this.setState({ check: handleTreeViewCheckChange(event, this.state.check, this.state.items) });
 *    }
 * }
 *
 * const tree = [ {
 *    text: 'Furniture', expanded: true, items: [
 *        { text: 'Tables & Chairs' }, { text: 'Sofas' }, { text: 'Occasional Furniture' } ]
 * }, {
 *    text: 'Decor', expanded: true, items: [
 *        { text: 'Bed Linen' }, { text: 'Curtains & Blinds' }, { text: 'Carpets' } ]
 * } ];
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare function handleTreeViewCheckChange(event: TreeViewExpandChangeEvent, check: string[] | TreeViewCheckDescriptor, data?: any[] | null, settings?: TreeViewCheckChangeSettings, childrenField?: string): any[] | (TreeViewCheckDescriptor & {
    ids: any[];
});
