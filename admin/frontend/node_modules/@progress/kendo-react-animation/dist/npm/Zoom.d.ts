import * as React from 'react';
import * as PropTypes from 'prop-types';
import { AnimationInterface } from './AnimationInterface';
/**
 * Specifies the direction of the Zoom Animation ([see example]({% slug direction_animation %}#toc-zoom)).
 *
 * The supported directions are:
 * * (Default) `out`&mdash;Zooms the content from the outside to the inside.
 * * `in`&mdash;Zooms the content from the inside to the outside.
 */
export declare type ZoomDirection = 'in' | 'out';
/**
 * Represent the props of the [KendoReact Zoom Animation component]({% slug animationtypes_animation %}#toc-zoom).
 *
 * {% meta %}
 * {% variant title:Hooks %}
 * {% embed_file props/zoom/func/main.tsx preview %}
 * {% embed_file props/zoom/func/styles.css %}
 * {% endvariant %}
 * {% variant title:Classes %}
 * {% embed_file props/zoom/class/main.tsx preview %}
 * {% embed_file props/zoom/class/styles.css %}
 * {% endvariant %}
 * {% endmeta %}
 *
 */
export interface ZoomProps extends AnimationInterface {
    /**
     * After the element reaches its exit state, it is no longer available in the DOM. If a DOM operation is required, access it trough the `childFactory` function.
     */
    childFactory?: any;
    /**
     * Specifies the CSS class names which are set to the Animation.
     */
    className?: string;
    /**
     * Specifies the direction of the Zoom Animation. Defaults to `down`.
     */
    direction?: ZoomDirection;
    /**
     * Specifies the node type of the parent Asnimation. Defaults to `div`.
     */
    component?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the style of the parent Animation.
     */
    style?: any;
    /**
     * Specifies whether the child elements will stack on top of each other without interfering ([more information and examples]({% slug stacked_animation %})).
     */
    stackChildren?: boolean;
}
export declare class Zoom extends React.Component<ZoomProps, {}> {
    /**
     * @hidden
     */
    static propTypes: {
        children: PropTypes.Requireable<NonNullable<PropTypes.ReactNodeLike>>;
        childFactory: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<string>;
        direction: PropTypes.Requireable<string>;
        component: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<any>;
        stackChildren: PropTypes.Requireable<boolean>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        appear: boolean;
        enter: boolean;
        exit: boolean;
        transitionEnterDuration: number;
        transitionExitDuration: number;
        direction: string;
        stackChildren: boolean;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
}
