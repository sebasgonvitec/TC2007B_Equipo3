{"ast":null,"code":"import { addItem, removeItem } from './utils/itemUtils';\nimport { getDecrementedItemIdAfterRemoval, getItemById } from './utils/itemIdUtils';\nimport { CHILDREN_FIELD } from './utils/consts';\n/**\n *  A helper function which moves a TreeView item in an immutable way.\n *\n * @param sourceItemHierarchicalIndex - The hierarchical index of the item that will be moved.\n * @param sourceData - The tree which contains the item that will be moved.\n * @param operation - The specific move operation.\n *\n * The available options are:\n *  * `before`&mdash;Indicates that the source item will become the previous sibling of the target item.\n *  * `after`&mdash;Indicates that the source item will become the next sibling of the target item.\n *  * `child`&mdash;Indicates that the source item will become a child of the target item.\n * @param targetItemHierarchicalIndex - The hierarchical index of the item next to which the source item will be moved.\n * @param targetData - The tree which contains the target item.\n * If the argument is skipped, then the move operation will be executed within the same tree.\n * Setting the `sourceData` and `targetData` arguments to the same tree is also supported.\n * @param childrenField - The field that points to the dataItem sub items. Defaults to `items`.\n * @returns - The updated copies of the `sourceData` and `targetData` input arguments.\n * If `targetData` is not passed, then only the updated copy of the `sourceData` will be returned.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport function moveTreeViewItem(sourceItemHierarchicalIndex, sourceData, operation, targetItemHierarchicalIndex, targetData, childrenField) {\n  var subItemsField = childrenField || CHILDREN_FIELD;\n\n  if (!validateInput()) {\n    return prepareInputDataForReturn();\n  }\n\n  var sourceItem = getItemById(sourceItemHierarchicalIndex, sourceData, subItemsField);\n\n  if (!sourceItem) {\n    return prepareInputDataForReturn();\n  } // The source and the target tree are the same.\n\n\n  if (!targetData || targetData === sourceData) {\n    if (!validateNoCircularReference()) {\n      return prepareInputDataForReturn();\n    }\n\n    var updatedSourceData = removeItem(sourceItemHierarchicalIndex, subItemsField, sourceData);\n    var resultData = addItem(sourceItem, operation, subItemsField, getDecrementedItemIdAfterRemoval(sourceItemHierarchicalIndex, targetItemHierarchicalIndex), updatedSourceData); // A simpler output is explicitly returned when the source and the target tree are\n    // the same, that is, the targetData argument is skipped.\n\n    return targetData ? {\n      sourceData: resultData,\n      targetData: resultData\n    } : resultData;\n  } else {\n    var updatedSource = removeItem(sourceItemHierarchicalIndex, subItemsField, sourceData);\n    var updatedTarget = addItem(sourceItem, operation, subItemsField, targetItemHierarchicalIndex, targetData);\n    return {\n      sourceData: updatedSource,\n      targetData: updatedTarget\n    };\n  }\n\n  function prepareInputDataForReturn() {\n    return targetData ? {\n      sourceData: sourceData,\n      targetData: targetData\n    } : sourceData;\n  }\n\n  function validateNoCircularReference() {\n    return !\"\".concat(targetItemHierarchicalIndex, \"_\").startsWith(\"\".concat(sourceItemHierarchicalIndex, \"_\"));\n  }\n\n  function validateInput() {\n    if (!sourceData || !sourceData.length || !sourceItemHierarchicalIndex || !targetItemHierarchicalIndex) {\n      return false;\n    }\n\n    if (targetData && !targetData.length) {\n      // Dropping over an empty tree is not supported.\n      return false;\n    } // Validate that the target item exists.\n\n\n    var data = !targetData || targetData === sourceData ? sourceData : targetData;\n\n    if (!getItemById(targetItemHierarchicalIndex, data, subItemsField)) {\n      return false;\n    }\n\n    return true;\n  }\n}","map":{"version":3,"names":["addItem","removeItem","getDecrementedItemIdAfterRemoval","getItemById","CHILDREN_FIELD","moveTreeViewItem","sourceItemHierarchicalIndex","sourceData","operation","targetItemHierarchicalIndex","targetData","childrenField","subItemsField","validateInput","prepareInputDataForReturn","sourceItem","validateNoCircularReference","updatedSourceData","resultData","updatedSource","updatedTarget","concat","startsWith","length","data"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-react-treeview/dist/es/moveTreeViewItem.js"],"sourcesContent":["import { addItem, removeItem } from './utils/itemUtils';\nimport { getDecrementedItemIdAfterRemoval, getItemById } from './utils/itemIdUtils';\nimport { CHILDREN_FIELD } from './utils/consts';\n/**\n *  A helper function which moves a TreeView item in an immutable way.\n *\n * @param sourceItemHierarchicalIndex - The hierarchical index of the item that will be moved.\n * @param sourceData - The tree which contains the item that will be moved.\n * @param operation - The specific move operation.\n *\n * The available options are:\n *  * `before`&mdash;Indicates that the source item will become the previous sibling of the target item.\n *  * `after`&mdash;Indicates that the source item will become the next sibling of the target item.\n *  * `child`&mdash;Indicates that the source item will become a child of the target item.\n * @param targetItemHierarchicalIndex - The hierarchical index of the item next to which the source item will be moved.\n * @param targetData - The tree which contains the target item.\n * If the argument is skipped, then the move operation will be executed within the same tree.\n * Setting the `sourceData` and `targetData` arguments to the same tree is also supported.\n * @param childrenField - The field that points to the dataItem sub items. Defaults to `items`.\n * @returns - The updated copies of the `sourceData` and `targetData` input arguments.\n * If `targetData` is not passed, then only the updated copy of the `sourceData` will be returned.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport function moveTreeViewItem(sourceItemHierarchicalIndex, sourceData, operation, targetItemHierarchicalIndex, targetData, childrenField) {\n    var subItemsField = childrenField || CHILDREN_FIELD;\n    if (!validateInput()) {\n        return prepareInputDataForReturn();\n    }\n    var sourceItem = getItemById(sourceItemHierarchicalIndex, sourceData, subItemsField);\n    if (!sourceItem) {\n        return prepareInputDataForReturn();\n    }\n    // The source and the target tree are the same.\n    if (!targetData || targetData === sourceData) {\n        if (!validateNoCircularReference()) {\n            return prepareInputDataForReturn();\n        }\n        var updatedSourceData = removeItem(sourceItemHierarchicalIndex, subItemsField, sourceData);\n        var resultData = addItem(sourceItem, operation, subItemsField, getDecrementedItemIdAfterRemoval(sourceItemHierarchicalIndex, targetItemHierarchicalIndex), updatedSourceData);\n        // A simpler output is explicitly returned when the source and the target tree are\n        // the same, that is, the targetData argument is skipped.\n        return targetData ? { sourceData: resultData, targetData: resultData } : resultData;\n    }\n    else {\n        var updatedSource = removeItem(sourceItemHierarchicalIndex, subItemsField, sourceData);\n        var updatedTarget = addItem(sourceItem, operation, subItemsField, targetItemHierarchicalIndex, targetData);\n        return { sourceData: updatedSource, targetData: updatedTarget };\n    }\n    function prepareInputDataForReturn() {\n        return targetData ? { sourceData: sourceData, targetData: targetData } : sourceData;\n    }\n    function validateNoCircularReference() {\n        return !\"\".concat(targetItemHierarchicalIndex, \"_\").startsWith(\"\".concat(sourceItemHierarchicalIndex, \"_\"));\n    }\n    function validateInput() {\n        if (!sourceData || !sourceData.length ||\n            !sourceItemHierarchicalIndex || !targetItemHierarchicalIndex) {\n            return false;\n        }\n        if (targetData && !targetData.length) {\n            // Dropping over an empty tree is not supported.\n            return false;\n        }\n        // Validate that the target item exists.\n        var data = !targetData || targetData === sourceData ? sourceData : targetData;\n        if (!getItemById(targetItemHierarchicalIndex, data, subItemsField)) {\n            return false;\n        }\n        return true;\n    }\n}\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,UAAlB,QAAoC,mBAApC;AACA,SAASC,gCAAT,EAA2CC,WAA3C,QAA8D,qBAA9D;AACA,SAASC,cAAT,QAA+B,ggBAAT,CAA0BC,2BAA1B,EAAuDC,UAAvD,EAAmEC,SAAnE,EAA8EC,2BAA9E,EAA2GC,UAA3G,EAAuHC,aAAvH,EAAsI;EACzI,IAAIC,aAAa,GAAGD,aAAa,IAAIP,cAArC;;EACA,IAAI,CAACS,aAAa,EAAlB,EAAsB;IAClB,OAAOC,yBAAyB,EAAhC;EACH;;EACD,IAAIC,UAAU,GAAGZ,WAAW,CAACG,2BAAD,EAA8BC,UAA9B,EAA0CK,aAA1C,CAA5B;;EACA,IAAI,CAACG,UAAL,EAAiB;IACb,OAAOD,yBAAyB,EAAhC;EACH,CARwI,CASzI;;;EACA,IAAI,CAACJ,UAAD,IAAeA,UAAU,KAAKH,UAAlC,EAA8C;IAC1C,IAAI,CAACS,2BAA2B,EAAhC,EAAoC;MAChC,OAAOF,yBAAyB,EAAhC;IACH;;IACD,IAAIG,iBAAiB,GAAGhB,UAAU,CAACK,2BAAD,EAA8BM,aAA9B,EAA6CL,UAA7C,CAAlC;IACA,IAAIW,UAAU,GAAGlB,OAAO,CAACe,UAAD,EAAaP,SAAb,EAAwBI,aAAxB,EAAuCV,gCAAgC,CAACI,2BAAD,EAA8BG,2BAA9B,CAAvE,EAAmIQ,iBAAnI,CAAxB,CAL0C,CAM1C;IACA;;IACA,OAAOP,UAAU,GAAG;MAAEH,UAAU,EAAEW,UAAd;MAA0BR,UAAU,EAAEQ;IAAtC,CAAH,GAAwDA,UAAzE;EACH,CATD,MAUK;IACD,IAAIC,aAAa,GAAGlB,UAAU,CAACK,2BAAD,EAA8BM,aAA9B,EAA6CL,UAA7C,CAA9B;IACA,IAAIa,aAAa,GAAGpB,OAAO,CAACe,UAAD,EAAaP,SAAb,EAAwBI,aAAxB,EAAuCH,2BAAvC,EAAoEC,UAApE,CAA3B;IACA,OAAO;MAAEH,UAAU,EAAEY,aAAd;MAA6BT,UAAU,EAAEU;IAAzC,CAAP;EACH;;EACD,SAASN,yBAAT,GAAqC;IACjC,OAAOJ,UAAU,GAAG;MAAEH,UAAU,EAAEA,UAAd;MAA0BG,UAAU,EAAEA;IAAtC,CAAH,GAAwDH,UAAzE;EACH;;EACD,SAASS,2BAAT,GAAuC;IACnC,OAAO,CAAC,GAAGK,MAAH,CAAUZ,2BAAV,EAAuC,GAAvC,EAA4Ca,UAA5C,CAAuD,GAAGD,MAAH,CAAUf,2BAAV,EAAuC,GAAvC,CAAvD,CAAR;EACH;;EACD,SAASO,aAAT,GAAyB;IACrB,IAAI,CAACN,UAAD,IAAe,CAACA,UAAU,CAACgB,MAA3B,IACA,CAACjB,2BADD,IACgC,CAACG,2BADrC,EACkE;MAC9D,OAAO,KAAP;IACH;;IACD,IAAIC,UAAU,IAAI,CAACA,UAAU,CAACa,MAA9B,EAAsC;MAClC;MACA,OAAO,KAAP;IACH,CARoB,CASrB;;;IACA,IAAIC,IAAI,GAAG,CAACd,UAAD,IAAeA,UAAU,KAAKH,UAA9B,GAA2CA,UAA3C,GAAwDG,UAAnE;;IACA,IAAI,CAACP,WAAW,CAACM,2BAAD,EAA8Be,IAA9B,EAAoCZ,aAApC,CAAhB,EAAoE;MAChE,OAAO,KAAP;IACH;;IACD,OAAO,IAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}