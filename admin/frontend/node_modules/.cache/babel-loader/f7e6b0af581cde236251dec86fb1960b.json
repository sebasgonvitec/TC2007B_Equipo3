{"ast":null,"code":"import { CURRENCY, ACCOUNTING, DECIMAL, PERCENT, SCIENTIFIC } from '../common/constants';\nimport isString from '../common/is-string';\nvar standardFormatRegExp = /^(n|c|p|e|a)(\\d*)$/i;\n\nfunction standardFormatOptions(format) {\n  var formatAndPrecision = standardFormatRegExp.exec(format);\n\n  if (formatAndPrecision) {\n    var options = {\n      style: DECIMAL\n    };\n    var style = formatAndPrecision[1].toLowerCase();\n\n    if (style === \"c\") {\n      options.style = CURRENCY;\n    } else if (style === \"a\") {\n      options.style = ACCOUNTING;\n    } else if (style === \"p\") {\n      options.style = PERCENT;\n    } else if (style === \"e\") {\n      options.style = SCIENTIFIC;\n    }\n\n    if (formatAndPrecision[2]) {\n      options.minimumFractionDigits = options.maximumFractionDigits = parseInt(formatAndPrecision[2], 10);\n    }\n\n    return options;\n  }\n}\n\nexport default function formatOptions(format) {\n  var options;\n\n  if (isString(format)) {\n    options = standardFormatOptions(format);\n  } else {\n    options = format;\n  }\n\n  return options;\n}","map":{"version":3,"names":["CURRENCY","ACCOUNTING","DECIMAL","PERCENT","SCIENTIFIC","isString","standardFormatRegExp","standardFormatOptions","format","formatAndPrecision","exec","options","style","toLowerCase","minimumFractionDigits","maximumFractionDigits","parseInt","formatOptions"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-intl/dist/es/numbers/format-options.js"],"sourcesContent":["import { CURRENCY, ACCOUNTING, DECIMAL, PERCENT, SCIENTIFIC } from '../common/constants';\nimport isString from '../common/is-string';\n\nvar standardFormatRegExp = /^(n|c|p|e|a)(\\d*)$/i;\n\nfunction standardFormatOptions(format) {\n    var formatAndPrecision = standardFormatRegExp.exec(format);\n\n    if (formatAndPrecision) {\n        var options = {\n            style: DECIMAL\n        };\n\n        var style = formatAndPrecision[1].toLowerCase();\n\n        if (style === \"c\") {\n            options.style = CURRENCY;\n        } else if (style === \"a\") {\n            options.style = ACCOUNTING;\n        } else if (style === \"p\") {\n            options.style = PERCENT;\n        } else if (style === \"e\") {\n            options.style = SCIENTIFIC;\n        }\n\n        if (formatAndPrecision[2]) {\n            options.minimumFractionDigits = options.maximumFractionDigits = parseInt(formatAndPrecision[2], 10);\n        }\n\n        return options;\n    }\n}\n\nexport default function formatOptions(format) {\n    var options;\n    if (isString(format)) {\n        options = standardFormatOptions(format);\n    } else {\n        options = format;\n    }\n\n    return options;\n}"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,OAA/B,EAAwCC,OAAxC,EAAiDC,UAAjD,QAAmE,qBAAnE;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,IAAIC,oBAAoB,GAAG,qBAA3B;;AAEA,SAASC,qBAAT,CAA+BC,MAA/B,EAAuC;EACnC,IAAIC,kBAAkB,GAAGH,oBAAoB,CAACI,IAArB,CAA0BF,MAA1B,CAAzB;;EAEA,IAAIC,kBAAJ,EAAwB;IACpB,IAAIE,OAAO,GAAG;MACVC,KAAK,EAAEV;IADG,CAAd;IAIA,IAAIU,KAAK,GAAGH,kBAAkB,CAAC,CAAD,CAAlB,CAAsBI,WAAtB,EAAZ;;IAEA,IAAID,KAAK,KAAK,GAAd,EAAmB;MACfD,OAAO,CAACC,KAAR,GAAgBZ,QAAhB;IACH,CAFD,MAEO,IAAIY,KAAK,KAAK,GAAd,EAAmB;MACtBD,OAAO,CAACC,KAAR,GAAgBX,UAAhB;IACH,CAFM,MAEA,IAAIW,KAAK,KAAK,GAAd,EAAmB;MACtBD,OAAO,CAACC,KAAR,GAAgBT,OAAhB;IACH,CAFM,MAEA,IAAIS,KAAK,KAAK,GAAd,EAAmB;MACtBD,OAAO,CAACC,KAAR,GAAgBR,UAAhB;IACH;;IAED,IAAIK,kBAAkB,CAAC,CAAD,CAAtB,EAA2B;MACvBE,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,qBAAR,GAAgCC,QAAQ,CAACP,kBAAkB,CAAC,CAAD,CAAnB,EAAwB,EAAxB,CAAxE;IACH;;IAED,OAAOE,OAAP;EACH;AACJ;;AAED,eAAe,SAASM,aAAT,CAAuBT,MAAvB,EAA+B;EAC1C,IAAIG,OAAJ;;EACA,IAAIN,QAAQ,CAACG,MAAD,CAAZ,EAAsB;IAClBG,OAAO,GAAGJ,qBAAqB,CAACC,MAAD,CAA/B;EACH,CAFD,MAEO;IACHG,OAAO,GAAGH,MAAV;EACH;;EAED,OAAOG,OAAP;AACH"},"metadata":{},"sourceType":"module"}