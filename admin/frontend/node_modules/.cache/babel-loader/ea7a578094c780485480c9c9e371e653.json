{"ast":null,"code":"import { zoneAndRule } from './zone-and-rule'; // tslint:disable:max-line-length\n\n/**\n * A function which returns the abbreviated name of the timezone. You can specify an optional date for returning the timezone name at a different point in time. The corresponding UTC date is used for locating the relevant rule. Timezone names change both historically and when they reflect the Daylight Savings Time rules.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which to locate the zone rule. By default, the current time is used.\n *\n * @return - The abbreviated name of the timezone at the specified date or, if not set, returns now.\n *\n * @example\n * ```ts-no-run\n * import { abbrTimezone } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/Europe/Sofia';\n *\n * const dstDate = new Date('2018-04-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', dstDate)); // EEST\n *\n * const date = new Date('2018-01-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', date); // EET\n * ```\n */\n// tslint:enable:max-line-length\n\nexport var abbrTimezone = function (timezone, date) {\n  if (date === void 0) {\n    date = new Date();\n  }\n\n  if (timezone === \"Etc/UTC\") {\n    return 'UTC';\n  }\n\n  if (timezone === \"Etc/GMT\") {\n    return 'GMT';\n  }\n\n  if (timezone === '') {\n    return '';\n  }\n\n  var _a = zoneAndRule(timezone, date),\n      zone = _a.zone,\n      rule = _a.rule;\n\n  var base = zone[2];\n\n  if (base.indexOf(\"/\") >= 0) {\n    return base.split(\"/\")[rule && +rule[6] ? 1 : 0];\n  } else if (base.indexOf(\"%s\") >= 0) {\n    return base.replace(\"%s\", !rule || rule[7] === \"-\" ? '' : rule[7]);\n  }\n\n  return base;\n};","map":{"version":3,"names":["zoneAndRule","abbrTimezone","timezone","date","Date","_a","zone","rule","base","indexOf","split","replace"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-date-math/dist/es/tz/abbr-timezone.js"],"sourcesContent":["import { zoneAndRule } from './zone-and-rule';\n// tslint:disable:max-line-length\n/**\n * A function which returns the abbreviated name of the timezone. You can specify an optional date for returning the timezone name at a different point in time. The corresponding UTC date is used for locating the relevant rule. Timezone names change both historically and when they reflect the Daylight Savings Time rules.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which to locate the zone rule. By default, the current time is used.\n *\n * @return - The abbreviated name of the timezone at the specified date or, if not set, returns now.\n *\n * @example\n * ```ts-no-run\n * import { abbrTimezone } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/Europe/Sofia';\n *\n * const dstDate = new Date('2018-04-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', dstDate)); // EEST\n *\n * const date = new Date('2018-01-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', date); // EET\n * ```\n */\n// tslint:enable:max-line-length\nexport var abbrTimezone = function (timezone, date) {\n    if (date === void 0) { date = new Date(); }\n    if (timezone === \"Etc/UTC\") {\n        return 'UTC';\n    }\n    if (timezone === \"Etc/GMT\") {\n        return 'GMT';\n    }\n    if (timezone === '') {\n        return '';\n    }\n    var _a = zoneAndRule(timezone, date), zone = _a.zone, rule = _a.rule;\n    var base = zone[2];\n    if (base.indexOf(\"/\") >= 0) {\n        return base.split(\"/\")[rule && +rule[6] ? 1 : 0];\n    }\n    else if (base.indexOf(\"%s\") >= 0) {\n        return base.replace(\"%s\", (!rule || rule[7] === \"-\") ? '' : rule[7]);\n    }\n    return base;\n};\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,YAAY,GAAG,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;EAChD,IAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;IAAEA,IAAI,GAAG,IAAIC,IAAJ,EAAP;EAAoB;;EAC3C,IAAIF,QAAQ,KAAK,SAAjB,EAA4B;IACxB,OAAO,KAAP;EACH;;EACD,IAAIA,QAAQ,KAAK,SAAjB,EAA4B;IACxB,OAAO,KAAP;EACH;;EACD,IAAIA,QAAQ,KAAK,EAAjB,EAAqB;IACjB,OAAO,EAAP;EACH;;EACD,IAAIG,EAAE,GAAGL,WAAW,CAACE,QAAD,EAAWC,IAAX,CAApB;EAAA,IAAsCG,IAAI,GAAGD,EAAE,CAACC,IAAhD;EAAA,IAAsDC,IAAI,GAAGF,EAAE,CAACE,IAAhE;;EACA,IAAIC,IAAI,GAAGF,IAAI,CAAC,CAAD,CAAf;;EACA,IAAIE,IAAI,CAACC,OAAL,CAAa,GAAb,KAAqB,CAAzB,EAA4B;IACxB,OAAOD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBH,IAAI,IAAI,CAACA,IAAI,CAAC,CAAD,CAAb,GAAmB,CAAnB,GAAuB,CAAvC,CAAP;EACH,CAFD,MAGK,IAAIC,IAAI,CAACC,OAAL,CAAa,IAAb,KAAsB,CAA1B,EAA6B;IAC9B,OAAOD,IAAI,CAACG,OAAL,CAAa,IAAb,EAAoB,CAACJ,IAAD,IAASA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAtB,GAA6B,EAA7B,GAAkCA,IAAI,CAAC,CAAD,CAAzD,CAAP;EACH;;EACD,OAAOC,IAAP;AACH,CApBM"},"metadata":{},"sourceType":"module"}