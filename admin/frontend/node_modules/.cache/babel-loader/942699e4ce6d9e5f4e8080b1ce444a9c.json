{"ast":null,"code":"import { exec, map, groupCombinator } from '../transducers';\nimport { isArray, isPresent } from '../utils';\nimport { aggregateBy } from './aggregate.operators';\nimport { filterBy } from '../filtering/filter-expression.factory';\n/**\n * @hidden\n */\n\nexport var normalizeGroups = function (descriptors) {\n  descriptors = isArray(descriptors) ? descriptors : [descriptors];\n  return descriptors.map(function (x) {\n    return Object.assign({\n      dir: \"asc\"\n    }, x);\n  });\n};\nvar identity = map(function (x) {\n  return x;\n});\n/**\n * Groups the provided data according to the specified descriptors.\n *\n * @param {Array} data - The data that will be grouped.\n * @param {GroupDescriptor[]} descriptors - The descriptors.\n * @param {any} transformers - For internal use.\n * @param {Array} originalData - For internal use.\n * @returns {(Array<GroupResult<T>> | T[])} - The grouped data.\n *\n * @example\n * ```ts\n *\n * import { groupBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *     { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = groupBy(data, [{ field: \"subcategory\" }]);\n * ```\n */\n\nexport var groupBy = function (data, descriptors, transformers, originalData) {\n  if (descriptors === void 0) {\n    descriptors = [];\n  }\n\n  if (transformers === void 0) {\n    transformers = identity;\n  }\n\n  if (originalData === void 0) {\n    originalData = data;\n  }\n\n  descriptors = normalizeGroups(descriptors);\n\n  if (!descriptors.length) {\n    return data;\n  }\n\n  var descriptor = descriptors[0];\n  var initialValue = {};\n  var view = exec(transformers(groupCombinator(descriptor.field)), initialValue, data);\n  var result = [];\n  Object.keys(view).forEach(function (field) {\n    Object.keys(view[field]).forEach(function (value) {\n      var group = view[field][value];\n      var aggregateResult = {};\n      var filteredData = originalData;\n\n      if (isPresent(descriptor.aggregates)) {\n        filteredData = filterBy(originalData, {\n          field: descriptor.field,\n          ignoreCase: false,\n          operator: 'eq',\n          value: group.value\n        });\n        aggregateResult = aggregateBy(filteredData, descriptor.aggregates);\n      }\n\n      result[group.__position] = {\n        aggregates: aggregateResult,\n        field: field,\n        items: descriptors.length > 1 ? groupBy(group.items, descriptors.slice(1), identity, filteredData) : group.items,\n        value: group.value\n      };\n    });\n  });\n  return result;\n};","map":{"version":3,"names":["exec","map","groupCombinator","isArray","isPresent","aggregateBy","filterBy","normalizeGroups","descriptors","x","Object","assign","dir","identity","groupBy","data","transformers","originalData","length","descriptor","initialValue","view","field","result","keys","forEach","value","group","aggregateResult","filteredData","aggregates","ignoreCase","operator","__position","items","slice"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/demo/frontend/node_modules/@progress/kendo-data-query/dist/es/grouping/group.operators.js"],"sourcesContent":["import { exec, map, groupCombinator } from '../transducers';\nimport { isArray, isPresent } from '../utils';\nimport { aggregateBy } from './aggregate.operators';\nimport { filterBy } from '../filtering/filter-expression.factory';\n/**\n * @hidden\n */\nexport var normalizeGroups = function (descriptors) {\n    descriptors = isArray(descriptors) ? descriptors : [descriptors];\n    return descriptors.map(function (x) { return Object.assign({ dir: \"asc\" }, x); });\n};\nvar identity = map(function (x) { return x; });\n/**\n * Groups the provided data according to the specified descriptors.\n *\n * @param {Array} data - The data that will be grouped.\n * @param {GroupDescriptor[]} descriptors - The descriptors.\n * @param {any} transformers - For internal use.\n * @param {Array} originalData - For internal use.\n * @returns {(Array<GroupResult<T>> | T[])} - The grouped data.\n *\n * @example\n * ```ts\n *\n * import { groupBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *     { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = groupBy(data, [{ field: \"subcategory\" }]);\n * ```\n */\nexport var groupBy = function (data, descriptors, transformers, originalData) {\n    if (descriptors === void 0) { descriptors = []; }\n    if (transformers === void 0) { transformers = identity; }\n    if (originalData === void 0) { originalData = data; }\n    descriptors = normalizeGroups(descriptors);\n    if (!descriptors.length) {\n        return data;\n    }\n    var descriptor = descriptors[0];\n    var initialValue = {};\n    var view = exec(transformers(groupCombinator(descriptor.field)), initialValue, data);\n    var result = [];\n    Object.keys(view).forEach(function (field) {\n        Object.keys(view[field]).forEach(function (value) {\n            var group = view[field][value];\n            var aggregateResult = {};\n            var filteredData = originalData;\n            if (isPresent(descriptor.aggregates)) {\n                filteredData = filterBy(originalData, {\n                    field: descriptor.field,\n                    ignoreCase: false,\n                    operator: 'eq',\n                    value: group.value\n                });\n                aggregateResult = aggregateBy(filteredData, descriptor.aggregates);\n            }\n            result[group.__position] = {\n                aggregates: aggregateResult,\n                field: field,\n                items: descriptors.length > 1 ?\n                    groupBy(group.items, descriptors.slice(1), identity, filteredData)\n                    : group.items,\n                value: group.value\n            };\n        });\n    });\n    return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}