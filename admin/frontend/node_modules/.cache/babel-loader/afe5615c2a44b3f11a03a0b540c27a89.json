{"ast":null,"code":"import { Direction } from \"./direction.enum\";\nimport { adjustDST } from \"./adjust-dst\";\nimport { cloneDate } from './clone-date';\n/**\n * @hidden\n *\n * A function which returns the next or previous date for a specific week day. For example, `Day.Monday`.\n *\n * @param date - The date to calculate from.\n * @param weekDay - The `Day` enum specifying the desired week day.\n * @param direction - The `Direction` enum specifying the calculation direction.\n * @returns - A `Date` instance.\n *\n * @example\n * ```ts-no-run\n * dayOfWeek(new Date(2016, 0, 1), Day.Wednesday, Direction.Forward); // 2016-01-06, Wednesday\n * dayOfWeek(new Date(2016, 0, 1), Day.Wednesday, Direction.Backward); // 2015-12-30, Wednesday\n * ```\n */\n\nexport var dayOfWeek = function (date, weekDay, direction) {\n  if (direction === void 0) {\n    direction = Direction.Forward;\n  }\n\n  var newDate = cloneDate(date);\n  var newDay = (weekDay - newDate.getDay() + 7 * direction) % 7;\n  newDate.setDate(newDate.getDate() + newDay);\n  return adjustDST(newDate, date.getHours());\n};","map":{"version":3,"names":["Direction","adjustDST","cloneDate","dayOfWeek","date","weekDay","direction","Forward","newDate","newDay","getDay","setDate","getDate","getHours"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/demo/frontend/node_modules/@progress/kendo-date-math/dist/es/day-of-week.js"],"sourcesContent":["import { Direction } from \"./direction.enum\";\nimport { adjustDST } from \"./adjust-dst\";\nimport { cloneDate } from './clone-date';\n/**\n * @hidden\n *\n * A function which returns the next or previous date for a specific week day. For example, `Day.Monday`.\n *\n * @param date - The date to calculate from.\n * @param weekDay - The `Day` enum specifying the desired week day.\n * @param direction - The `Direction` enum specifying the calculation direction.\n * @returns - A `Date` instance.\n *\n * @example\n * ```ts-no-run\n * dayOfWeek(new Date(2016, 0, 1), Day.Wednesday, Direction.Forward); // 2016-01-06, Wednesday\n * dayOfWeek(new Date(2016, 0, 1), Day.Wednesday, Direction.Backward); // 2015-12-30, Wednesday\n * ```\n */\nexport var dayOfWeek = function (date, weekDay, direction) {\n    if (direction === void 0) { direction = Direction.Forward; }\n    var newDate = cloneDate(date);\n    var newDay = ((weekDay - newDate.getDay()) + (7 * direction)) % 7;\n    newDate.setDate(newDate.getDate() + newDay);\n    return adjustDST(newDate, date.getHours());\n};\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,UAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,SAAzB,EAAoC;EACvD,IAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;IAAEA,SAAS,GAAGN,SAAS,CAACO,OAAtB;EAAgC;;EAC5D,IAAIC,OAAO,GAAGN,SAAS,CAACE,IAAD,CAAvB;EACA,IAAIK,MAAM,GAAG,CAAEJ,OAAO,GAAGG,OAAO,CAACE,MAAR,EAAX,GAAgC,IAAIJ,SAArC,IAAmD,CAAhE;EACAE,OAAO,CAACG,OAAR,CAAgBH,OAAO,CAACI,OAAR,KAAoBH,MAApC;EACA,OAAOR,SAAS,CAACO,OAAD,EAAUJ,IAAI,CAACS,QAAL,EAAV,CAAhB;AACH,CANM"},"metadata":{},"sourceType":"module"}