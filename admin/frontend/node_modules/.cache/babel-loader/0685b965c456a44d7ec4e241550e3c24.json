{"ast":null,"code":"import { extendDataItem, mapTree } from '@progress/kendo-react-common';\nvar GROUP_ID_FIELD = 'groupId';\nvar GROUP_SUBITEMS_COLLECTION = 'items';\n/**\n * @hidden\n */\n\nvar setGroupId = function (group, depth, parentValue) {\n  if (group.items) {\n    group[GROUP_ID_FIELD] = \"\".concat(parentValue).concat(parentValue && '_').concat(group.value).concat(group.field);\n\n    if (depth > 1) {\n      group.items.forEach(function (item) {\n        return setGroupId(item, depth - 1, group[GROUP_ID_FIELD]);\n      });\n    }\n  }\n};\n/**\n * Add unique ids to the group items inside data.\n *\n * @param {{data: any[], group: GroupDescriptor[]}} options - The options to be processed.\n */\n\n\nexport var setGroupIds = function (options) {\n  var group = options.group;\n\n  if (group && group.length && options.data) {\n    return options.data.forEach(function (item) {\n      return setGroupId(item, group.length, '');\n    });\n  }\n};\n/**\n * Get all group ids from the data.\n *\n * @param {{data: any[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\n\nexport var getGroupIds = function (options) {\n  var groupIds = [];\n  mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n    if (item[GROUP_ID_FIELD]) {\n      groupIds.push(item[GROUP_ID_FIELD]);\n    }\n  });\n  return groupIds;\n};\n/**\n * Apply the `expanded` prop to the group items in data based on the provided collection of group ids.\n *\n * @param {{data: any[], collapsedIds: string[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\n\nexport var setExpandedState = function (options) {\n  // TODO: no need to traverse whole tree, only group levels\n  return mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n    return extendDataItem(item, GROUP_SUBITEMS_COLLECTION, {\n      expanded: !options.collapsedIds.some(function (groupId) {\n        return groupId === item[GROUP_ID_FIELD];\n      })\n    });\n  });\n};","map":{"version":3,"names":["extendDataItem","mapTree","GROUP_ID_FIELD","GROUP_SUBITEMS_COLLECTION","setGroupId","group","depth","parentValue","items","concat","value","field","forEach","item","setGroupIds","options","length","data","getGroupIds","groupIds","push","setExpandedState","expanded","collapsedIds","some","groupId"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-react-data-tools/dist/es/utils/group-operations.js"],"sourcesContent":["import { extendDataItem, mapTree } from '@progress/kendo-react-common';\nvar GROUP_ID_FIELD = 'groupId';\nvar GROUP_SUBITEMS_COLLECTION = 'items';\n/**\n * @hidden\n */\nvar setGroupId = function (group, depth, parentValue) {\n    if (group.items) {\n        group[GROUP_ID_FIELD] = \"\".concat(parentValue).concat(parentValue && '_').concat(group.value).concat(group.field);\n        if (depth > 1) {\n            group.items.forEach(function (item) { return setGroupId(item, depth - 1, group[GROUP_ID_FIELD]); });\n        }\n    }\n};\n/**\n * Add unique ids to the group items inside data.\n *\n * @param {{data: any[], group: GroupDescriptor[]}} options - The options to be processed.\n */\nexport var setGroupIds = function (options) {\n    var group = options.group;\n    if (group && group.length && options.data) {\n        return options.data.forEach(function (item) { return setGroupId(item, group.length, ''); });\n    }\n};\n/**\n * Get all group ids from the data.\n *\n * @param {{data: any[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\nexport var getGroupIds = function (options) {\n    var groupIds = [];\n    mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n        if (item[GROUP_ID_FIELD]) {\n            groupIds.push(item[GROUP_ID_FIELD]);\n        }\n    });\n    return groupIds;\n};\n/**\n * Apply the `expanded` prop to the group items in data based on the provided collection of group ids.\n *\n * @param {{data: any[], collapsedIds: string[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\nexport var setExpandedState = function (options) {\n    // TODO: no need to traverse whole tree, only group levels\n    return mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n        return extendDataItem(item, GROUP_SUBITEMS_COLLECTION, {\n            expanded: !options.collapsedIds.some(function (groupId) { return groupId === item[GROUP_ID_FIELD]; })\n        });\n    });\n};\n"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,8BAAxC;AACA,IAAIC,cAAc,GAAG,SAArB;AACA,IAAIC,yBAAyB,GAAG,OAAhC;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqC;EAClD,IAAIF,KAAK,CAACG,KAAV,EAAiB;IACbH,KAAK,CAACH,cAAD,CAAL,GAAwB,GAAGO,MAAH,CAAUF,WAAV,EAAuBE,MAAvB,CAA8BF,WAAW,IAAI,GAA7C,EAAkDE,MAAlD,CAAyDJ,KAAK,CAACK,KAA/D,EAAsED,MAAtE,CAA6EJ,KAAK,CAACM,KAAnF,CAAxB;;IACA,IAAIL,KAAK,GAAG,CAAZ,EAAe;MACXD,KAAK,CAACG,KAAN,CAAYI,OAAZ,CAAoB,UAAUC,IAAV,EAAgB;QAAE,OAAOT,UAAU,CAACS,IAAD,EAAOP,KAAK,GAAG,CAAf,EAAkBD,KAAK,CAACH,cAAD,CAAvB,CAAjB;MAA4D,CAAlG;IACH;EACJ;AACJ,CAPD;AAQA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIY,WAAW,GAAG,UAAUC,OAAV,EAAmB;EACxC,IAAIV,KAAK,GAAGU,OAAO,CAACV,KAApB;;EACA,IAAIA,KAAK,IAAIA,KAAK,CAACW,MAAf,IAAyBD,OAAO,CAACE,IAArC,EAA2C;IACvC,OAAOF,OAAO,CAACE,IAAR,CAAaL,OAAb,CAAqB,UAAUC,IAAV,EAAgB;MAAE,OAAOT,UAAU,CAACS,IAAD,EAAOR,KAAK,CAACW,MAAb,EAAqB,EAArB,CAAjB;IAA4C,CAAnF,CAAP;EACH;AACJ,CALM;AAMP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,WAAW,GAAG,UAAUH,OAAV,EAAmB;EACxC,IAAII,QAAQ,GAAG,EAAf;EACAlB,OAAO,CAACc,OAAO,CAACE,IAAT,EAAed,yBAAf,EAA0C,UAAUU,IAAV,EAAgB;IAC7D,IAAIA,IAAI,CAACX,cAAD,CAAR,EAA0B;MACtBiB,QAAQ,CAACC,IAAT,CAAcP,IAAI,CAACX,cAAD,CAAlB;IACH;EACJ,CAJM,CAAP;EAKA,OAAOiB,QAAP;AACH,CARM;AASP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,gBAAgB,GAAG,UAAUN,OAAV,EAAmB;EAC7C;EACA,OAAOd,OAAO,CAACc,OAAO,CAACE,IAAT,EAAed,yBAAf,EAA0C,UAAUU,IAAV,EAAgB;IACpE,OAAOb,cAAc,CAACa,IAAD,EAAOV,yBAAP,EAAkC;MACnDmB,QAAQ,EAAE,CAACP,OAAO,CAACQ,YAAR,CAAqBC,IAArB,CAA0B,UAAUC,OAAV,EAAmB;QAAE,OAAOA,OAAO,KAAKZ,IAAI,CAACX,cAAD,CAAvB;MAA0C,CAAzF;IADwC,CAAlC,CAArB;EAGH,CAJa,CAAd;AAKH,CAPM"},"metadata":{},"sourceType":"module"}