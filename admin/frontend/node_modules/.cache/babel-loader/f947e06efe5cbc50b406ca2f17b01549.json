{"ast":null,"code":"import { PERCENT, SCIENTIFIC, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, EMPTY, POINT } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport formatCurrencySymbol from './format-currency-symbol';\nimport groupInteger from './group-integer';\nimport isCurrencyStyle from './is-currency-style';\nimport pad from '../common/pad';\nimport round from '../common/round';\nimport { currencyFractionOptions } from '../cldr';\nvar DEFAULT_DECIMAL_ROUNDING = 3;\nvar DEFAULT_PERCENT_ROUNDING = 0;\nvar trailingZeroRegex = /0+$/;\n\nfunction fractionOptions(options) {\n  var minimumFractionDigits = options.minimumFractionDigits;\n  var maximumFractionDigits = options.maximumFractionDigits;\n  var style = options.style;\n  var isCurrency = isCurrencyStyle(style);\n  var currencyFractions;\n\n  if (isCurrency) {\n    currencyFractions = currencyFractionOptions(options.currency);\n  }\n\n  if (minimumFractionDigits === undefined) {\n    minimumFractionDigits = isCurrency ? currencyFractions.minimumFractionDigits : 0;\n  }\n\n  if (maximumFractionDigits === undefined) {\n    if (style === PERCENT) {\n      maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_PERCENT_ROUNDING);\n    } else if (isCurrency) {\n      maximumFractionDigits = Math.max(minimumFractionDigits, currencyFractions.maximumFractionDigits);\n    } else {\n      maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_DECIMAL_ROUNDING);\n    }\n  }\n\n  return {\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: maximumFractionDigits\n  };\n}\n\nfunction applyPattern(value, pattern, symbol) {\n  var result = EMPTY;\n\n  for (var idx = 0, length = pattern.length; idx < length; idx++) {\n    var ch = pattern.charAt(idx);\n\n    if (ch === NUMBER_PLACEHOLDER) {\n      result += value;\n    } else if (ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER) {\n      result += symbol;\n    } else {\n      result += ch;\n    }\n  }\n\n  return result;\n}\n\nfunction currencyUnitPattern(info, value) {\n  var currencyInfo = info.numbers.currency;\n  var pattern = value !== 1 ? currencyInfo[\"unitPattern-count-other\"] : currencyInfo[\"unitPattern-count-one\"];\n\n  if (value < 0) {\n    pattern = pattern.replace(NUMBER_PLACEHOLDER, \"-\" + NUMBER_PLACEHOLDER);\n  }\n\n  return pattern;\n}\n\nexport default function standardNumberFormat(number, options, info) {\n  var symbols = info.numbers.symbols;\n  var style = options.style;\n  var isCurrency = isCurrencyStyle(style); //return number in exponential format\n\n  if (style === SCIENTIFIC) {\n    var exponential = options.minimumFractionDigits !== undefined ? number.toExponential(options.minimumFractionDigits) : number.toExponential();\n    return exponential.replace(POINT, symbols.decimal);\n  }\n\n  var value = number;\n  var symbol;\n\n  if (isCurrency) {\n    options.value = value;\n    symbol = formatCurrencySymbol(info, options);\n  }\n\n  if (style === PERCENT) {\n    value *= 100;\n    symbol = symbols.percentSign;\n  }\n\n  var ref = fractionOptions(options);\n  var minimumFractionDigits = ref.minimumFractionDigits;\n  var maximumFractionDigits = ref.maximumFractionDigits;\n  value = round(value, maximumFractionDigits);\n  var negative = value < 0;\n  var negativeZero = isNegativeZero(number);\n  var parts = value.split(POINT);\n  var integer = parts[0];\n  var fraction = pad(parts[1] ? parts[1].replace(trailingZeroRegex, EMPTY) : EMPTY, minimumFractionDigits, true); //exclude \"-\" if number is negative.\n\n  if (negative) {\n    integer = integer.substring(1);\n  }\n\n  if (options.minimumIntegerDigits) {\n    integer = pad(integer, options.minimumIntegerDigits);\n  }\n\n  var formattedValue = options.useGrouping !== false ? groupInteger(integer, 0, integer.length, options, info) : integer;\n\n  if (fraction) {\n    formattedValue += symbols.decimal + fraction;\n  }\n\n  var pattern;\n\n  if (isCurrency && options.currencyDisplay === \"name\") {\n    pattern = currencyUnitPattern(info, number);\n  } else {\n    var patterns = options.patterns;\n    pattern = negative || negativeZero ? patterns[1] || \"-\" + patterns[0] : patterns[0];\n  }\n\n  if (pattern === NUMBER_PLACEHOLDER && !negative) {\n    return formattedValue;\n  }\n\n  var result = applyPattern(formattedValue, pattern, symbol);\n  return result;\n}","map":{"version":3,"names":["PERCENT","SCIENTIFIC","NUMBER_PLACEHOLDER","CURRENCY_PLACEHOLDER","PERCENT_PLACEHOLDER","EMPTY","POINT","isNegativeZero","formatCurrencySymbol","groupInteger","isCurrencyStyle","pad","round","currencyFractionOptions","DEFAULT_DECIMAL_ROUNDING","DEFAULT_PERCENT_ROUNDING","trailingZeroRegex","fractionOptions","options","minimumFractionDigits","maximumFractionDigits","style","isCurrency","currencyFractions","currency","undefined","Math","max","applyPattern","value","pattern","symbol","result","idx","length","ch","charAt","currencyUnitPattern","info","currencyInfo","numbers","replace","standardNumberFormat","number","symbols","exponential","toExponential","decimal","percentSign","ref","negative","negativeZero","parts","split","integer","fraction","substring","minimumIntegerDigits","formattedValue","useGrouping","currencyDisplay","patterns"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-intl/dist/es/numbers/standard-number-format.js"],"sourcesContent":["import { PERCENT, SCIENTIFIC, NUMBER_PLACEHOLDER, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, EMPTY, POINT } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport formatCurrencySymbol from './format-currency-symbol';\nimport groupInteger from './group-integer';\nimport isCurrencyStyle from './is-currency-style';\nimport pad from '../common/pad';\nimport round from '../common/round';\nimport { currencyFractionOptions } from '../cldr';\n\nvar DEFAULT_DECIMAL_ROUNDING = 3;\nvar DEFAULT_PERCENT_ROUNDING = 0;\n\nvar trailingZeroRegex = /0+$/;\n\nfunction fractionOptions(options) {\n    var minimumFractionDigits = options.minimumFractionDigits;\n    var maximumFractionDigits = options.maximumFractionDigits;\n    var style = options.style;\n    var isCurrency = isCurrencyStyle(style);\n    var currencyFractions;\n    if (isCurrency) {\n        currencyFractions = currencyFractionOptions(options.currency);\n    }\n\n    if (minimumFractionDigits === undefined) {\n        minimumFractionDigits = isCurrency ? currencyFractions.minimumFractionDigits : 0;\n    }\n\n    if (maximumFractionDigits === undefined) {\n        if (style === PERCENT) {\n            maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_PERCENT_ROUNDING);\n        } else if (isCurrency) {\n            maximumFractionDigits = Math.max(minimumFractionDigits, currencyFractions.maximumFractionDigits);\n        } else {\n            maximumFractionDigits = Math.max(minimumFractionDigits, DEFAULT_DECIMAL_ROUNDING);\n        }\n    }\n\n    return {\n        minimumFractionDigits: minimumFractionDigits,\n        maximumFractionDigits: maximumFractionDigits\n    };\n}\n\nfunction applyPattern(value, pattern, symbol) {\n    var result = EMPTY;\n    for (var idx = 0, length = pattern.length; idx < length; idx++) {\n        var ch = pattern.charAt(idx);\n\n        if (ch === NUMBER_PLACEHOLDER) {\n            result += value;\n        } else if (ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER) {\n            result += symbol;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n\nfunction currencyUnitPattern(info, value) {\n    var currencyInfo = info.numbers.currency;\n    var pattern = value !== 1 ? currencyInfo[\"unitPattern-count-other\"] : currencyInfo[\"unitPattern-count-one\"];\n    if (value < 0) {\n        pattern = pattern.replace(NUMBER_PLACEHOLDER, (\"-\" + NUMBER_PLACEHOLDER));\n    }\n\n    return pattern;\n}\n\n\nexport default function standardNumberFormat(number, options, info) {\n    var symbols = info.numbers.symbols;\n    var style = options.style;\n    var isCurrency = isCurrencyStyle(style);\n\n    //return number in exponential format\n    if (style === SCIENTIFIC) {\n        var exponential = options.minimumFractionDigits !== undefined ? number.toExponential(options.minimumFractionDigits) : number.toExponential();\n        return exponential.replace(POINT, symbols.decimal);\n    }\n\n    var value = number;\n    var symbol;\n\n    if (isCurrency) {\n        options.value = value;\n        symbol = formatCurrencySymbol(info, options);\n    }\n\n    if (style === PERCENT) {\n        value *= 100;\n        symbol = symbols.percentSign;\n    }\n\n    var ref = fractionOptions(options);\n    var minimumFractionDigits = ref.minimumFractionDigits;\n    var maximumFractionDigits = ref.maximumFractionDigits;\n\n    value = round(value, maximumFractionDigits);\n\n    var negative = value < 0;\n    var negativeZero = isNegativeZero(number);\n\n    var parts = value.split(POINT);\n\n    var integer = parts[0];\n    var fraction = pad(parts[1] ? parts[1].replace(trailingZeroRegex, EMPTY) : EMPTY, minimumFractionDigits, true);\n\n    //exclude \"-\" if number is negative.\n    if (negative) {\n        integer = integer.substring(1);\n    }\n\n    if (options.minimumIntegerDigits) {\n        integer = pad(integer, options.minimumIntegerDigits);\n    }\n\n    var formattedValue = options.useGrouping !== false ? groupInteger(integer, 0, integer.length, options, info) : integer;\n\n    if (fraction) {\n        formattedValue += symbols.decimal + fraction;\n    }\n\n    var pattern;\n\n    if (isCurrency && options.currencyDisplay === \"name\") {\n        pattern = currencyUnitPattern(info, number);\n    } else {\n        var patterns = options.patterns;\n        pattern = (negative || negativeZero) ? patterns[1] || (\"-\" + patterns[0]) : patterns[0];\n    }\n\n    if (pattern === NUMBER_PLACEHOLDER && !negative) {\n        return formattedValue;\n    }\n\n    var result = applyPattern(formattedValue, pattern, symbol);\n\n    return result;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}