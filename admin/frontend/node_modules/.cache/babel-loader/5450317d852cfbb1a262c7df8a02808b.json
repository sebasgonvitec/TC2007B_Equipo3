{"ast":null,"code":"import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\n\nvar operatorMap = function (key) {\n  return {\n    \"!=\": \"neq\",\n    \"<\": \"lt\",\n    \"<=\": \"lte\",\n    \"==\": \"eq\",\n    \">\": \"gt\",\n    \">=\": \"gte\",\n    equal: \"eq\",\n    equals: \"eq\",\n    equalto: \"eq\",\n    ge: \"gte\",\n    greater: \"gt\",\n    greaterthan: \"gt\",\n    greaterthanequal: \"gte\",\n    isempty: \"isempty\",\n    isequalto: \"eq\",\n    isgreaterthan: \"gt\",\n    isgreaterthanorequalto: \"gte\",\n    islessthan: \"lt\",\n    islessthanorequalto: \"lte\",\n    isnotempty: \"isnotempty\",\n    isnotequalto: \"neq\",\n    isnull: \"isnull\",\n    le: \"lte\",\n    less: \"lt\",\n    lessthan: \"lt\",\n    lessthanequal: \"lte\",\n    ne: \"neq\",\n    notequal: \"neq\",\n    notequals: \"neq\",\n    notequalto: \"neq\",\n    notsubstringof: \"doesnotcontain\"\n  }[key.toLowerCase()] || key;\n};\n\nvar normalizeOperator = function (descriptor) {\n  if (descriptor.filters) {\n    descriptor.filters = descriptor.filters.map(function (filter) {\n      var result = Object.assign({}, filter);\n\n      if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n        result.operator = operatorMap(filter.operator);\n      }\n\n      if (isCompositeFilterDescriptor(filter)) {\n        normalizeOperator(result);\n      }\n\n      return result;\n    });\n  }\n};\n\nvar normalizeDescriptor = function (descriptor) {\n  if (!isCompositeFilterDescriptor(descriptor)) {\n    return {\n      filters: isArray(descriptor) ? descriptor : [descriptor],\n      logic: \"and\"\n    };\n  }\n\n  return Object.assign({}, descriptor);\n}; // tslint:disable:max-line-length\n\n/**\n * Converts a [FilterDescriptor]({% slug api_kendo-data-query_filterdescriptor %}) into a [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\n\n\nexport var normalizeFilters = function (descriptor) {\n  if (isPresent(descriptor)) {\n    descriptor = normalizeDescriptor(descriptor);\n    normalizeOperator(descriptor);\n  }\n\n  return descriptor;\n};","map":{"version":3,"names":["isPresent","isString","isArray","isCompositeFilterDescriptor","operatorMap","key","equal","equals","equalto","ge","greater","greaterthan","greaterthanequal","isempty","isequalto","isgreaterthan","isgreaterthanorequalto","islessthan","islessthanorequalto","isnotempty","isnotequalto","isnull","le","less","lessthan","lessthanequal","ne","notequal","notequals","notequalto","notsubstringof","toLowerCase","normalizeOperator","descriptor","filters","map","filter","result","Object","assign","operator","normalizeDescriptor","logic","normalizeFilters"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-data-query/dist/es/filtering/filter.operators.js"],"sourcesContent":["import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nvar operatorMap = function (key) { return ({\n    \"!=\": \"neq\",\n    \"<\": \"lt\",\n    \"<=\": \"lte\",\n    \"==\": \"eq\",\n    \">\": \"gt\",\n    \">=\": \"gte\",\n    equal: \"eq\",\n    equals: \"eq\",\n    equalto: \"eq\",\n    ge: \"gte\",\n    greater: \"gt\",\n    greaterthan: \"gt\",\n    greaterthanequal: \"gte\",\n    isempty: \"isempty\",\n    isequalto: \"eq\",\n    isgreaterthan: \"gt\",\n    isgreaterthanorequalto: \"gte\",\n    islessthan: \"lt\",\n    islessthanorequalto: \"lte\",\n    isnotempty: \"isnotempty\",\n    isnotequalto: \"neq\",\n    isnull: \"isnull\",\n    le: \"lte\",\n    less: \"lt\",\n    lessthan: \"lt\",\n    lessthanequal: \"lte\",\n    ne: \"neq\",\n    notequal: \"neq\",\n    notequals: \"neq\",\n    notequalto: \"neq\",\n    notsubstringof: \"doesnotcontain\"\n}[key.toLowerCase()] || key); };\nvar normalizeOperator = function (descriptor) {\n    if (descriptor.filters) {\n        descriptor.filters = descriptor.filters.map(function (filter) {\n            var result = Object.assign({}, filter);\n            if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n                result.operator = operatorMap(filter.operator);\n            }\n            if (isCompositeFilterDescriptor(filter)) {\n                normalizeOperator(result);\n            }\n            return result;\n        });\n    }\n};\nvar normalizeDescriptor = function (descriptor) {\n    if (!isCompositeFilterDescriptor(descriptor)) {\n        return {\n            filters: isArray(descriptor) ? descriptor : [descriptor],\n            logic: \"and\"\n        };\n    }\n    return Object.assign({}, descriptor);\n};\n// tslint:disable:max-line-length\n/**\n * Converts a [FilterDescriptor]({% slug api_kendo-data-query_filterdescriptor %}) into a [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\nexport var normalizeFilters = function (descriptor) {\n    if (isPresent(descriptor)) {\n        descriptor = normalizeDescriptor(descriptor);\n        normalizeOperator(descriptor);\n    }\n    return descriptor;\n};\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,UAA7C;AACA,SAASC,2BAAT,QAA4C,+BAA5C;;AACA,IAAIC,WAAW,GAAG,UAAUC,GAAV,EAAe;EAAE,OAAQ;IACvC,MAAM,KADiC;IAEvC,KAAK,IAFkC;IAGvC,MAAM,KAHiC;IAIvC,MAAM,IAJiC;IAKvC,KAAK,IALkC;IAMvC,MAAM,KANiC;IAOvCC,KAAK,EAAE,IAPgC;IAQvCC,MAAM,EAAE,IAR+B;IASvCC,OAAO,EAAE,IAT8B;IAUvCC,EAAE,EAAE,KAVmC;IAWvCC,OAAO,EAAE,IAX8B;IAYvCC,WAAW,EAAE,IAZ0B;IAavCC,gBAAgB,EAAE,KAbqB;IAcvCC,OAAO,EAAE,SAd8B;IAevCC,SAAS,EAAE,IAf4B;IAgBvCC,aAAa,EAAE,IAhBwB;IAiBvCC,sBAAsB,EAAE,KAjBe;IAkBvCC,UAAU,EAAE,IAlB2B;IAmBvCC,mBAAmB,EAAE,KAnBkB;IAoBvCC,UAAU,EAAE,YApB2B;IAqBvCC,YAAY,EAAE,KArByB;IAsBvCC,MAAM,EAAE,QAtB+B;IAuBvCC,EAAE,EAAE,KAvBmC;IAwBvCC,IAAI,EAAE,IAxBiC;IAyBvCC,QAAQ,EAAE,IAzB6B;IA0BvCC,aAAa,EAAE,KA1BwB;IA2BvCC,EAAE,EAAE,KA3BmC;IA4BvCC,QAAQ,EAAE,KA5B6B;IA6BvCC,SAAS,EAAE,KA7B4B;IA8BvCC,UAAU,EAAE,KA9B2B;IA+BvCC,cAAc,EAAE;EA/BuB,EAgCzCzB,GAAG,CAAC0B,WAAJ,EAhCyC,KAgCnB1B,GAhCW;AAgCJ,CAhC/B;;AAiCA,IAAI2B,iBAAiB,GAAG,UAAUC,UAAV,EAAsB;EAC1C,IAAIA,UAAU,CAACC,OAAf,EAAwB;IACpBD,UAAU,CAACC,OAAX,GAAqBD,UAAU,CAACC,OAAX,CAAmBC,GAAnB,CAAuB,UAAUC,MAAV,EAAkB;MAC1D,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,MAAlB,CAAb;;MACA,IAAI,CAACjC,2BAA2B,CAACiC,MAAD,CAA5B,IAAwCnC,QAAQ,CAACmC,MAAM,CAACI,QAAR,CAApD,EAAuE;QACnEH,MAAM,CAACG,QAAP,GAAkBpC,WAAW,CAACgC,MAAM,CAACI,QAAR,CAA7B;MACH;;MACD,IAAIrC,2BAA2B,CAACiC,MAAD,CAA/B,EAAyC;QACrCJ,iBAAiB,CAACK,MAAD,CAAjB;MACH;;MACD,OAAOA,MAAP;IACH,CAToB,CAArB;EAUH;AACJ,CAbD;;AAcA,IAAII,mBAAmB,GAAG,UAAUR,UAAV,EAAsB;EAC5C,IAAI,CAAC9B,2BAA2B,CAAC8B,UAAD,CAAhC,EAA8C;IAC1C,OAAO;MACHC,OAAO,EAAEhC,OAAO,CAAC+B,UAAD,CAAP,GAAsBA,UAAtB,GAAmC,CAACA,UAAD,CADzC;MAEHS,KAAK,EAAE;IAFJ,CAAP;EAIH;;EACD,OAAOJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,UAAlB,CAAP;AACH,CARD,C,CASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIU,gBAAgB,GAAG,UAAUV,UAAV,EAAsB;EAChD,IAAIjC,SAAS,CAACiC,UAAD,CAAb,EAA2B;IACvBA,UAAU,GAAGQ,mBAAmB,CAACR,UAAD,CAAhC;IACAD,iBAAiB,CAACC,UAAD,CAAjB;EACH;;EACD,OAAOA,UAAP;AACH,CANM"},"metadata":{},"sourceType":"module"}