{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}; // Gets and sets the children. Returns the children or the re-created item with the new children.\n\n\nfunction children(item, subItemsField, subItems) {\n  var _a;\n\n  if (subItems) {\n    return __assign(__assign({}, item), (_a = {}, _a[subItemsField] = subItems.length ? __spreadArray([], subItems, true) : undefined, _a));\n  } else {\n    return item && item[subItemsField] ? __spreadArray([], item[subItemsField], true) : [];\n  }\n}\n\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n  if (dataItem[subItemsField]) {\n    var subItems = children(dataItem, subItemsField).map(function (child) {\n      return mapItem(child, subItemsField, callbackfn);\n    });\n    return callbackfn(children(dataItem, subItemsField, subItems));\n  }\n\n  return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\n\nexport var mapTree = function (tree, subItemsField, callback) {\n  return __spreadArray([], tree.map(function (item) {\n    return mapItem(item, subItemsField, callback);\n  }), true);\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n  var curData = tree;\n  var parentNodes = [];\n\n  for (var i = 0; i < level.length; i++) {\n    curData = curData[level[i]];\n    curData = Array.isArray(curData) ? curData : curData[subItemsField];\n    parentNodes.push(curData);\n  }\n\n  var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n  var newItemIndex = level[level.length - 1];\n  var newItem = callback(parent[newItemIndex]);\n  parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\n\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n  var _a;\n\n  return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\n\nexport var getItemPath = function (tree, level, subItemsField) {\n  var nodes = [];\n\n  var itemLevel = __spreadArray([], level, true);\n\n  if (itemLevel.length) {\n    var element = tree[itemLevel.shift() || 0];\n    nodes.push(element);\n\n    while (itemLevel.length && subItemsField) {\n      element = element[subItemsField][itemLevel.shift() || 0];\n      nodes.push(element);\n    }\n  }\n\n  return nodes;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArray","to","from","pack","l","ar","Array","slice","concat","children","item","subItemsField","subItems","_a","undefined","mapItem","dataItem","callbackfn","map","child","mapTree","tree","callback","mapTreeItem","level","curData","parentNodes","isArray","push","parent","newItemIndex","newItem","splice","extendDataItem","propsToExtend","getItemPath","nodes","itemLevel","element","shift"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/demo/frontend/node_modules/@progress/kendo-react-common/dist/es/treeDataOperations.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n// Gets and sets the children. Returns the children or the re-created item with the new children.\nfunction children(item, subItemsField, subItems) {\n    var _a;\n    if (subItems) {\n        return __assign(__assign({}, item), (_a = {}, _a[subItemsField] = subItems.length ? __spreadArray([], subItems, true) : undefined, _a));\n    }\n    else {\n        return item && item[subItemsField] ? __spreadArray([], item[subItemsField], true) : [];\n    }\n}\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n    if (dataItem[subItemsField]) {\n        var subItems = children(dataItem, subItemsField).map(function (child) { return mapItem(child, subItemsField, callbackfn); });\n        return callbackfn(children(dataItem, subItemsField, subItems));\n    }\n    return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTree = function (tree, subItemsField, callback) {\n    return __spreadArray([], tree.map(function (item) { return mapItem(item, subItemsField, callback); }), true);\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n    var curData = tree;\n    var parentNodes = [];\n    for (var i = 0; i < level.length; i++) {\n        curData = curData[level[i]];\n        curData = Array.isArray(curData) ? curData : curData[subItemsField];\n        parentNodes.push(curData);\n    }\n    var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n    var newItemIndex = level[level.length - 1];\n    var newItem = callback(parent[newItemIndex]);\n    parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n    var _a;\n    return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\nexport var getItemPath = function (tree, level, subItemsField) {\n    var nodes = [];\n    var itemLevel = __spreadArray([], level, true);\n    if (itemLevel.length) {\n        var element = tree[itemLevel.shift() || 0];\n        nodes.push(element);\n        while (itemLevel.length && subItemsField) {\n            element = element[subItemsField][itemLevel.shift() || 0];\n            nodes.push(element);\n        }\n    }\n    return nodes;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IACP;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,IAAIO,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoBC,IAApB,EAA0B;EAC1E,IAAIA,IAAI,IAAIV,SAAS,CAACC,MAAV,KAAqB,CAAjC,EAAoC,KAAK,IAAIH,CAAC,GAAG,CAAR,EAAWa,CAAC,GAAGF,IAAI,CAACR,MAApB,EAA4BW,EAAjC,EAAqCd,CAAC,GAAGa,CAAzC,EAA4Cb,CAAC,EAA7C,EAAiD;IACjF,IAAIc,EAAE,IAAI,EAAEd,CAAC,IAAIW,IAAP,CAAV,EAAwB;MACpB,IAAI,CAACG,EAAL,EAASA,EAAE,GAAGC,KAAK,CAACV,SAAN,CAAgBW,KAAhB,CAAsBT,IAAtB,CAA2BI,IAA3B,EAAiC,CAAjC,EAAoCX,CAApC,CAAL;MACTc,EAAE,CAACd,CAAD,CAAF,GAAQW,IAAI,CAACX,CAAD,CAAZ;IACH;EACJ;EACD,OAAOU,EAAE,CAACO,MAAH,CAAUH,EAAE,IAAIC,KAAK,CAACV,SAAN,CAAgBW,KAAhB,CAAsBT,IAAtB,CAA2BI,IAA3B,CAAhB,CAAP;AACH,CARD,C,CASA;;;AACA,SAASO,QAAT,CAAkBC,IAAlB,EAAwBC,aAAxB,EAAuCC,QAAvC,EAAiD;EAC7C,IAAIC,EAAJ;;EACA,IAAID,QAAJ,EAAc;IACV,OAAO1B,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKwB,IAAL,CAAT,GAAsBG,EAAE,GAAG,EAAL,EAASA,EAAE,CAACF,aAAD,CAAF,GAAoBC,QAAQ,CAAClB,MAAT,GAAkBM,aAAa,CAAC,EAAD,EAAKY,QAAL,EAAe,IAAf,CAA/B,GAAsDE,SAAnF,EAA8FD,EAApH,EAAf;EACH,CAFD,MAGK;IACD,OAAOH,IAAI,IAAIA,IAAI,CAACC,aAAD,CAAZ,GAA8BX,aAAa,CAAC,EAAD,EAAKU,IAAI,CAACC,aAAD,CAAT,EAA0B,IAA1B,CAA3C,GAA6E,EAApF;EACH;AACJ;;AACD,SAASI,OAAT,CAAiBC,QAAjB,EAA2BL,aAA3B,EAA0CM,UAA1C,EAAsD;EAClD,IAAID,QAAQ,CAACL,aAAD,CAAZ,EAA6B;IACzB,IAAIC,QAAQ,GAAGH,QAAQ,CAACO,QAAD,EAAWL,aAAX,CAAR,CAAkCO,GAAlC,CAAsC,UAAUC,KAAV,EAAiB;MAAE,OAAOJ,OAAO,CAACI,KAAD,EAAQR,aAAR,EAAuBM,UAAvB,CAAd;IAAmD,CAA5G,CAAf;IACA,OAAOA,UAAU,CAACR,QAAQ,CAACO,QAAD,EAAWL,aAAX,EAA0BC,QAA1B,CAAT,CAAjB;EACH;;EACD,OAAOK,UAAU,CAACD,QAAD,CAAjB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAII,OAAO,GAAG,UAAUC,IAAV,EAAgBV,aAAhB,EAA+BW,QAA/B,EAAyC;EAC1D,OAAOtB,aAAa,CAAC,EAAD,EAAKqB,IAAI,CAACH,GAAL,CAAS,UAAUR,IAAV,EAAgB;IAAE,OAAOK,OAAO,CAACL,IAAD,EAAOC,aAAP,EAAsBW,QAAtB,CAAd;EAAgD,CAA3E,CAAL,EAAmF,IAAnF,CAApB;AACH,CAFM;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUF,IAAV,EAAgBG,KAAhB,EAAuBb,aAAvB,EAAsCW,QAAtC,EAAgD;EACrE,IAAIG,OAAO,GAAGJ,IAAd;EACA,IAAIK,WAAW,GAAG,EAAlB;;EACA,KAAK,IAAInC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiC,KAAK,CAAC9B,MAA1B,EAAkCH,CAAC,EAAnC,EAAuC;IACnCkC,OAAO,GAAGA,OAAO,CAACD,KAAK,CAACjC,CAAD,CAAN,CAAjB;IACAkC,OAAO,GAAGnB,KAAK,CAACqB,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,GAAmCA,OAAO,CAACd,aAAD,CAApD;IACAe,WAAW,CAACE,IAAZ,CAAiBH,OAAjB;EACH;;EACD,IAAII,MAAM,GAAGH,WAAW,CAAChC,MAAZ,GAAqB,CAArB,GAAyBgC,WAAW,CAACA,WAAW,CAAChC,MAAZ,GAAqB,CAAtB,CAApC,GAA+D2B,IAA5E;EACA,IAAIS,YAAY,GAAGN,KAAK,CAACA,KAAK,CAAC9B,MAAN,GAAe,CAAhB,CAAxB;EACA,IAAIqC,OAAO,GAAGT,QAAQ,CAACO,MAAM,CAACC,YAAD,CAAP,CAAtB;EACAD,MAAM,CAACG,MAAP,CAAcF,YAAd,EAA4B,CAA5B,EAA+BC,OAA/B;AACH,CAZM;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,cAAc,GAAG,UAAUvB,IAAV,EAAgBC,aAAhB,EAA+BuB,aAA/B,EAA8C;EACtE,IAAIrB,EAAJ;;EACA,OAAO1B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBsB,IAAlB,EAAwBA,IAAI,CAACC,aAAD,CAAJ,IAAuBE,EAAE,GAAG,EAAL,EAASA,EAAE,CAACF,aAAD,CAAF,GAAoBD,IAAI,CAACC,aAAD,CAAJ,CAAoBJ,KAApB,EAA7B,EAA0DM,EAAjF,IAAuF,EAA/G,EAAmHqB,aAAa,IAAI,EAApI,CAAP;AACH,CAHM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUd,IAAV,EAAgBG,KAAhB,EAAuBb,aAAvB,EAAsC;EAC3D,IAAIyB,KAAK,GAAG,EAAZ;;EACA,IAAIC,SAAS,GAAGrC,aAAa,CAAC,EAAD,EAAKwB,KAAL,EAAY,IAAZ,CAA7B;;EACA,IAAIa,SAAS,CAAC3C,MAAd,EAAsB;IAClB,IAAI4C,OAAO,GAAGjB,IAAI,CAACgB,SAAS,CAACE,KAAV,MAAqB,CAAtB,CAAlB;IACAH,KAAK,CAACR,IAAN,CAAWU,OAAX;;IACA,OAAOD,SAAS,CAAC3C,MAAV,IAAoBiB,aAA3B,EAA0C;MACtC2B,OAAO,GAAGA,OAAO,CAAC3B,aAAD,CAAP,CAAuB0B,SAAS,CAACE,KAAV,MAAqB,CAA5C,CAAV;MACAH,KAAK,CAACR,IAAN,CAAWU,OAAX;IACH;EACJ;;EACD,OAAOF,KAAP;AACH,CAZM"},"metadata":{},"sourceType":"module"}