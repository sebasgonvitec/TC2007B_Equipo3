{"ast":null,"code":"import { timezones } from './timezones';\nimport { ruleToDate } from './rule-to-date';\nvar CURRENT_UTC_TIME = new Date().getTime();\n/**\n * @hidden\n *\n * A function that finds zone rules which become applicable after a specific time.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param utcTime - The UTC time boundary for a zone rule. Defaults to the current UTC time.\n *\n * @return - Returns a zone rule for the specific zone name.\n *\n * @example\n * ```ts-no-run\n * findZone('Europe/Sofia'); //[-120,\"EU\",\"EE%sT\",null]\n * ```\n */\n\nexport var findRule = function (zoneRule, utcTime, zoneOffset) {\n  if (utcTime === void 0) {\n    utcTime = CURRENT_UTC_TIME;\n  }\n\n  if (zoneOffset === void 0) {\n    zoneOffset = 0;\n  }\n\n  var rules = timezones.rules[zoneRule];\n\n  if (!rules) {\n    var time = zoneRule.split(\":\");\n    var offset = 0;\n\n    if (time.length > 1) {\n      offset = time[0] * 60 + Number(time[1]);\n    }\n\n    return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];\n  }\n\n  var year = new Date(utcTime).getUTCFullYear();\n  rules = rules.filter(function (currentRule) {\n    var from = currentRule[0];\n    var to = currentRule[1];\n    return from <= year && (to >= year || from === year && to === \"only\" || to === \"max\");\n  });\n  rules.push(utcTime);\n  rules.sort(function (a, b) {\n    if (typeof a !== \"number\") {\n      a = Number(ruleToDate(year, a, zoneOffset));\n    }\n\n    if (typeof b !== \"number\") {\n      b = Number(ruleToDate(year, b, zoneOffset));\n    }\n\n    return a - b;\n  });\n  var rule = rules[rules.indexOf(utcTime) - 1] || rules[rules.length - 1];\n  return isNaN(rule) ? rule : null;\n};","map":{"version":3,"names":["timezones","ruleToDate","CURRENT_UTC_TIME","Date","getTime","findRule","zoneRule","utcTime","zoneOffset","rules","time","split","offset","length","Number","year","getUTCFullYear","filter","currentRule","from","to","push","sort","a","b","rule","indexOf","isNaN"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-date-math/dist/es/tz/find-rule.js"],"sourcesContent":["import { timezones } from './timezones';\nimport { ruleToDate } from './rule-to-date';\nvar CURRENT_UTC_TIME = (new Date()).getTime();\n/**\n * @hidden\n *\n * A function that finds zone rules which become applicable after a specific time.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param utcTime - The UTC time boundary for a zone rule. Defaults to the current UTC time.\n *\n * @return - Returns a zone rule for the specific zone name.\n *\n * @example\n * ```ts-no-run\n * findZone('Europe/Sofia'); //[-120,\"EU\",\"EE%sT\",null]\n * ```\n */\nexport var findRule = function (zoneRule, utcTime, zoneOffset) {\n    if (utcTime === void 0) { utcTime = CURRENT_UTC_TIME; }\n    if (zoneOffset === void 0) { zoneOffset = 0; }\n    var rules = timezones.rules[zoneRule];\n    if (!rules) {\n        var time = zoneRule.split(\":\");\n        var offset = 0;\n        if (time.length > 1) {\n            offset = time[0] * 60 + Number(time[1]);\n        }\n        return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];\n    }\n    var year = new Date(utcTime).getUTCFullYear();\n    rules = rules.filter(function (currentRule) {\n        var from = currentRule[0];\n        var to = currentRule[1];\n        return from <= year && (to >= year || (from === year && to === \"only\") || to === \"max\");\n    });\n    rules.push(utcTime);\n    rules.sort(function (a, b) {\n        if (typeof a !== \"number\") {\n            a = Number(ruleToDate(year, a, zoneOffset));\n        }\n        if (typeof b !== \"number\") {\n            b = Number(ruleToDate(year, b, zoneOffset));\n        }\n        return a - b;\n    });\n    var rule = rules[rules.indexOf(utcTime) - 1] || rules[rules.length - 1];\n    return isNaN(rule) ? rule : null;\n};\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,IAAIC,gBAAgB,GAAI,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAG,UAAUC,QAAV,EAAoBC,OAApB,EAA6BC,UAA7B,EAAyC;EAC3D,IAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAGL,gBAAV;EAA6B;;EACvD,IAAIM,UAAU,KAAK,KAAK,CAAxB,EAA2B;IAAEA,UAAU,GAAG,CAAb;EAAiB;;EAC9C,IAAIC,KAAK,GAAGT,SAAS,CAACS,KAAV,CAAgBH,QAAhB,CAAZ;;EACA,IAAI,CAACG,KAAL,EAAY;IACR,IAAIC,IAAI,GAAGJ,QAAQ,CAACK,KAAT,CAAe,GAAf,CAAX;IACA,IAAIC,MAAM,GAAG,CAAb;;IACA,IAAIF,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;MACjBD,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAV,GAAeI,MAAM,CAACJ,IAAI,CAAC,CAAD,CAAL,CAA9B;IACH;;IACD,OAAO,CAAC,CAAC,OAAF,EAAW,KAAX,EAAkB,GAAlB,EAAuB,KAAvB,EAA8B,CAA9B,EAAiC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjC,EAA4CE,MAA5C,EAAoD,GAApD,CAAP;EACH;;EACD,IAAIG,IAAI,GAAG,IAAIZ,IAAJ,CAASI,OAAT,EAAkBS,cAAlB,EAAX;EACAP,KAAK,GAAGA,KAAK,CAACQ,MAAN,CAAa,UAAUC,WAAV,EAAuB;IACxC,IAAIC,IAAI,GAAGD,WAAW,CAAC,CAAD,CAAtB;IACA,IAAIE,EAAE,GAAGF,WAAW,CAAC,CAAD,CAApB;IACA,OAAOC,IAAI,IAAIJ,IAAR,KAAiBK,EAAE,IAAIL,IAAN,IAAeI,IAAI,KAAKJ,IAAT,IAAiBK,EAAE,KAAK,MAAvC,IAAkDA,EAAE,KAAK,KAA1E,CAAP;EACH,CAJO,CAAR;EAKAX,KAAK,CAACY,IAAN,CAAWd,OAAX;EACAE,KAAK,CAACa,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IACvB,IAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;MACvBA,CAAC,GAAGT,MAAM,CAACb,UAAU,CAACc,IAAD,EAAOQ,CAAP,EAAUf,UAAV,CAAX,CAAV;IACH;;IACD,IAAI,OAAOgB,CAAP,KAAa,QAAjB,EAA2B;MACvBA,CAAC,GAAGV,MAAM,CAACb,UAAU,CAACc,IAAD,EAAOS,CAAP,EAAUhB,UAAV,CAAX,CAAV;IACH;;IACD,OAAOe,CAAC,GAAGC,CAAX;EACH,CARD;EASA,IAAIC,IAAI,GAAGhB,KAAK,CAACA,KAAK,CAACiB,OAAN,CAAcnB,OAAd,IAAyB,CAA1B,CAAL,IAAqCE,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAArD;EACA,OAAOc,KAAK,CAACF,IAAD,CAAL,GAAcA,IAAd,GAAqB,IAA5B;AACH,CA9BM"},"metadata":{},"sourceType":"module"}