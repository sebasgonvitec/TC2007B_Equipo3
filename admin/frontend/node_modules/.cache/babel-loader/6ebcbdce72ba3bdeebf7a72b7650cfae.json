{"ast":null,"code":"import { messages } from './messages';\n/**\n * A service which provides localization methods.\n */\n\nvar LocalizationService =\n/** @class */\nfunction () {\n  function LocalizationService(language) {\n    this.language = language;\n\n    if (language === '' && process.env.NODE_ENV !== 'production') {\n      throw 'Language should not be an empty string';\n    }\n  }\n  /* eslint-disable max-len */\n\n  /**\n   * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n   *\n   * @param key - The key which identifies the string for the current language.\n   * @param defaultValue - The default value which will be returned when no string\n   * for the current language is available under the key.\n   * @return - The string for the current language.\n   */\n  // tslint:enable:max-line-length\n\n\n  LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\n    if (this.language && messages[this.language] && messages[this.language].hasOwnProperty(key)) {\n      return messages[this.language][key];\n    } else {\n      return defaultValue;\n    }\n  };\n\n  return LocalizationService;\n}();\n\nexport { LocalizationService };","map":{"version":3,"names":["messages","LocalizationService","language","process","env","NODE_ENV","prototype","toLanguageString","key","defaultValue","hasOwnProperty"],"sources":["C:/Users/asana/Documents/TEC/Semestre 5/Seguridad_Informatica/ModuloReact/Admin/frontend/node_modules/@progress/kendo-react-intl/dist/es/Localization/LocalizationService.js"],"sourcesContent":["import { messages } from './messages';\n/**\n * A service which provides localization methods.\n */\nvar LocalizationService = /** @class */ (function () {\n    function LocalizationService(language) {\n        this.language = language;\n        if (language === '' && process.env.NODE_ENV !== 'production') {\n            throw 'Language should not be an empty string';\n        }\n    }\n    /* eslint-disable max-len */\n    /**\n     * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n     *\n     * @param key - The key which identifies the string for the current language.\n     * @param defaultValue - The default value which will be returned when no string\n     * for the current language is available under the key.\n     * @return - The string for the current language.\n     */\n    // tslint:enable:max-line-length\n    LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\n        if (this.language &&\n            messages[this.language] &&\n            messages[this.language].hasOwnProperty(key)) {\n            return messages[this.language][key];\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    return LocalizationService;\n}());\nexport { LocalizationService };\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB;AAAG;AAAe,YAAY;EACjD,SAASA,mBAAT,CAA6BC,QAA7B,EAAuC;IACnC,KAAKA,QAAL,GAAgBA,QAAhB;;IACA,IAAIA,QAAQ,KAAK,EAAb,IAAmBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAhD,EAA8D;MAC1D,MAAM,wCAAN;IACH;EACJ;EACD;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;;;EACAJ,mBAAmB,CAACK,SAApB,CAA8BC,gBAA9B,GAAiD,UAAUC,GAAV,EAAeC,YAAf,EAA6B;IAC1E,IAAI,KAAKP,QAAL,IACAF,QAAQ,CAAC,KAAKE,QAAN,CADR,IAEAF,QAAQ,CAAC,KAAKE,QAAN,CAAR,CAAwBQ,cAAxB,CAAuCF,GAAvC,CAFJ,EAEiD;MAC7C,OAAOR,QAAQ,CAAC,KAAKE,QAAN,CAAR,CAAwBM,GAAxB,CAAP;IACH,CAJD,MAKK;MACD,OAAOC,YAAP;IACH;EACJ,CATD;;EAUA,OAAOR,mBAAP;AACH,CA5BwC,EAAzC;;AA6BA,SAASA,mBAAT"},"metadata":{},"sourceType":"module"}